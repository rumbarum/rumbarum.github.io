<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ 개발세발개발]]></title><description><![CDATA[개발자 성장일기]]></description><link>https://rumbarum.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Sun, 18 Aug 2019 09:00:59 GMT</lastBuildDate><item><title><![CDATA[ TIL&TEL 19.08.12~ 19.08.18 ]]></title><description><![CDATA[19.08.12~ 19.08.18 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-12~ 19-08-18/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-12~ 19-08-18/</guid><pubDate>Tue, 20 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;TIL &amp; TEL 19.08.12~ 19.08.18 &lt;/h2&gt;
&lt;h3 id=&quot;til-today-i-learned&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;19.08.12&lt;/li&gt;
&lt;li&gt;프리코스 종료 후 파운데이션 코스진행에 대한 안내 청취.&lt;/li&gt;
&lt;li&gt;CodeKata 시간&lt;/li&gt;
&lt;li&gt;실사례를 가지고 클래스 개념 배우기&lt;/li&gt;
&lt;li&gt;django 로 JS와 연결이 어떻게 되는지 간접체험&lt;/li&gt;
&lt;li&gt;19.08.13&lt;/li&gt;
&lt;li&gt;블로그 정리 &lt;/li&gt;
&lt;li&gt;페어 코드카타&lt;/li&gt;
&lt;li&gt;API 다시 붙잡기&lt;/li&gt;
&lt;li&gt;django 로 만든 end point Java Script에 붙이기 위해 구글삼매경&lt;/li&gt;
&lt;li&gt;리액트 세션&lt;/li&gt;
&lt;li&gt;디자이너와 협업하기란 위워크 세션에 참석(신동주님)&lt;/li&gt;
&lt;li&gt;19.08.14&lt;/li&gt;
&lt;li&gt;블로그 정리&lt;/li&gt;
&lt;li&gt;코드카타 &lt;/li&gt;
&lt;li&gt;리눅스 터미널, 쉘 관련 세션 by 은우님&lt;/li&gt;
&lt;li&gt;js 바닐라로 서버 연결 페이지 만들기 &lt;/li&gt;
&lt;li&gt;19.08.15&lt;/li&gt;
&lt;li&gt;JS miniter 수정 &lt;/li&gt;
&lt;li&gt;django view 수정 &lt;/li&gt;
&lt;li&gt;19.08.16&lt;/li&gt;
&lt;li&gt;fetch response 안에서의 variable 관리 시도 &lt;/li&gt;
&lt;li&gt;코드카타&lt;/li&gt;
&lt;li&gt;9월 한달간 진행할 프로젝트 의견 취합 &lt;/li&gt;
&lt;li&gt;Js 프론트로 패치 받아보기 계속 수정&lt;/li&gt;
&lt;li&gt;Postman을 이용해서 외부 컴퓨터와 통신 성공!&lt;/li&gt;
&lt;li&gt;19.08.18&lt;/li&gt;
&lt;li&gt;django 복습 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.08.12&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binding(this) &lt;/li&gt;
&lt;li&gt;( ) =&gt; { }&lt;/li&gt;
&lt;li&gt;애로우 펑션의 최고 기능 this를 선언한 곳에 묶는다. &lt;/li&gt;
&lt;li&gt;세마포어, 뮤텍스, 크리티컬 섹션 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.13&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array.join() &lt;/li&gt;
&lt;li&gt;default 인자는 ” , ” 이다, 아무것도 없이 합치고자 한다면 , 인자로 &quot;&quot;를 줘야한다. &lt;/li&gt;
&lt;li&gt;비슷한 예로 string.split( ) 이 있다. split 안에 &quot;&quot;을 넣어야 &quot;&quot;으로 쪼갠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.14&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS numbe.split() =&gt; error //string 만 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.08.05~ 19.08.11 ]]></title><description><![CDATA[ 19.08.05~ 19.08.11 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-11/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-11/</guid><pubDate>Sun, 11 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;TIL &amp; TEL 19.08.05~ 19.08.11 &lt;/h2&gt;
&lt;h3 id=&quot;til-today-i-learned&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;19.08.05&lt;/li&gt;
&lt;li&gt;파이썬 공부&lt;/li&gt;
&lt;li&gt;파이썬 데코레이터와의 씨름 &lt;/li&gt;
&lt;li&gt;2기 정재욱님의 선배 토크&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 공부 계속 &lt;/li&gt;
&lt;li&gt;Gatsby 활용한 블로그 만들기 세션 에러대파티!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.07&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장고 공식문서 튜토리얼 개시 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.08&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django 튜토리얼 다시 해봄&lt;/li&gt;
&lt;li&gt;송은우멘토님의 웹개발 흐름에 대한 세션&lt;/li&gt;
&lt;li&gt;지훈 멘토님과 함께 django 라이브 세션을 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.09&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django 튜토리얼 복습&lt;/li&gt;
&lt;li&gt;django API 구현 세션&lt;/li&gt;
&lt;li&gt;한광훈님의 클라스 있는 클래스 강의&lt;/li&gt;
&lt;li&gt;블로그 메뉴 추가 하기 계속 삽질 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;깃공부 &lt;/li&gt;
&lt;li&gt;django 로 Api 만드는거 다시 봄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django API 만들기 다른 내용들 배우며 복습함&lt;/li&gt;
&lt;li&gt;django API 서버 개설 성공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.08.05&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 등호 == &lt;/li&gt;
&lt;li&gt;if 문 다음 : 빼먹지 마숑  &lt;/li&gt;
&lt;li&gt;variable arguments  *args =&gt; args 로 받는다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;def function (*args  ) :&lt;/p&gt;
&lt;p&gt;​    print( args)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 함수 파라미터 뒤에 ” : ” &lt;/li&gt;
&lt;li&gt;return 뒤에 ”:” 없어야한다.&lt;/li&gt;
&lt;li&gt;self를 selt로 입력했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django 초기 url 설정이 안먹혀서 삽질하고 있었는데 영상 가이드에서는 상위 urls를 비워놨는데 난 모르고 채워 눠서 안되고 있었다 . &lt;/li&gt;
&lt;li&gt;‘django.middleware.csrf.CsrfViewMiddleware’, 요게 걸린다 .&lt;/li&gt;
&lt;li&gt;통신을 하면 먼저 get을 통해 csrf&lt;em&gt;token을 채울 폼을 클라로 보낸다. 클라에서 csrf&lt;/em&gt;token을 같이 채워서 request를 해줘야 django 에서 request 를 accept 하고 표현한다. &lt;/li&gt;
&lt;li&gt;편의상 개발서버에서 돌릴때에는 setting.py 에서 csrf middleware를 비활성 시켜 놓는다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[REST-framework 를 쓰지 않고, 초간단 api 서버 만들기하면서 장고 기본원리 설명하기 ]]></title><description><![CDATA[django를 사용해서 간단한 API end point 를 만들어 봅시다. (get/post method 사용 안함) ]]></description><link>https://rumbarum.github.io//posts/createapiwithoutrestframework/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/createapiwithoutrestframework/</guid><pubDate>Sun, 11 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;간단한 Json을 보여주는 API를 만들겁니다.&lt;/h2&gt;
( python, conda, django, pip 의 설치 내용은 이번글에 포함되지 않습니다 . )
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?time_continue=707&amp;#x26;v=s9E5EYAm5gs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?time_continue=707&amp;#x26;v=s9E5EYAm5gs&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;위 유튜브의 내용을 3.7 python에 맞추어 정리해보았습니다. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-프로젝트-담을-폴더로-이동-후-프로젝-장고프로젝트-스타트&quot;&gt;&lt;a href=&quot;#shell-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%8B%B4%EC%9D%84-%ED%8F%B4%EB%8D%94%EB%A1%9C-%EC%9D%B4%EB%8F%99-%ED%9B%84-%ED%94%84%EB%A1%9C%EC%A0%9D-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8A%A4%ED%83%80%ED%8A%B8&quot; aria-label=&quot;shell 프로젝트 담을 폴더로 이동 후 프로젝 장고프로젝트 스타트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] 프로젝트 담을 폴더로 이동 후 프로젝 장고프로젝트 스타트&lt;/h4&gt;
&lt;p&gt;프로젝트는 만드려고 하는 웹페이지의 전체(프론트엔드, 백엔드 총괄//보여지는 부분과 보이지 않지만 동작하고 있는 기능, 데이터베이스)를 통칭한다고 보시면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;django&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;admim startproject someproject  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== shell 에서 입력 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-프로젝트-폴더에서-앱만들기&quot;&gt;&lt;a href=&quot;#shell-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8F%B4%EB%8D%94%EC%97%90%EC%84%9C-%EC%95%B1%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;shell 프로젝트 폴더에서 앱만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] 프로젝트 폴더에서 앱만들기&lt;/h4&gt;
&lt;p&gt;앱은 프로젝트를 이루는 구동 단위 입니다. 페이지라기 보다는, 로그인 기능, 결제 기능등등의 기능 단위로 이해하시면 됩니다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py startapp someapp &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== shell 에서 입력 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-세팅-변경&quot;&gt;&lt;a href=&quot;#shell-%EC%84%B8%ED%8C%85-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;shell 세팅 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] 세팅 변경&lt;/h4&gt;
&lt;p&gt;프로젝트의 세팅을 변경해서 원하는 세팅으로 작동할 수 있도록 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someproject&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;settings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== vim으로 파일을 열고 &lt;/span&gt;

INSTALLED_APPS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;someapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== 추가후 저장 하시면 됩니다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;u&gt;*vim 설명 : 터미널에서 작동하는 텍스트 에디터, 파일을 열면 기본은 view 모드 입니다. 수정을 하기 위해서는 i 키를 눌러야 삽입모드가 됩니다. 원하는 텍스트로 수정후  :wq 를 입력하면 저장후 종료가 됩니다.&lt;/u&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-url-변경&quot;&gt;&lt;a href=&quot;#shell-url-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;shell url 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] url 변경&lt;/h4&gt;
&lt;p&gt;url은 앱을 구동시키기 위한 경로입니다. 홈페이지 상에서 연결되는 페이지 경로라기 보다는, 설정한 기능을 불러오는 경로라고 보시면 됩니다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someproject&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;urls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== vim으로 파일을 열고 &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;urls &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; include  &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== django.urls에서 경로설정을 하기 위해 필요한 path, include	를 불러옵니다 .&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; admin  &lt;span class=&quot;token comment&quot;&gt;# 장고의 기본 관리자 설정을 불러옵니다. &lt;/span&gt;

urlpatterns &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;#url 경로를 설정하는 양식입니다. &lt;/span&gt;

path &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;admin/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;admin.urls.py&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#메인 페이지 경로에 admin/추가시 &apos;admin.urls.py&apos;을 참조합니다.&lt;/span&gt;

path &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; include&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;someapp.urls&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#메인 페이지경로에서 someapp.urls 주소를 참조합니다. 프로젝트의 url이 앱의 url을 가르키도록 설정합니다.  &lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;urls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== vim으로 파일을 열고 &lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;urls &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; path  &lt;span class=&quot;token comment&quot;&gt;#  마찬가지로 someapp에서도 경로설정을 위해 path를 불러옵니다. include는 필요하지 않습니다. &lt;/span&gt;

urlpatterns &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;#앱에서 어떤 로직을 불러올지 설정합니다. &lt;/span&gt;

path &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#views.content_list는 someapp이 불러올 실행코드(view)입니다. &lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-views-세팅-후-서버-작동-확인&quot;&gt;&lt;a href=&quot;#shell-views-%EC%84%B8%ED%8C%85-%ED%9B%84-%EC%84%9C%EB%B2%84-%EC%9E%91%EB%8F%99-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;shell views 세팅 후 서버 작동 확인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] views 세팅 후 서버 작동 확인&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py   &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== vim으로 파일을 열고 &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; JsonResponse  &lt;span class=&quot;token comment&quot;&gt;#JsonResponse 라는 반응을 가져옵니다. &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;content_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;token comment&quot;&gt;#Http Request가 올때 함수를 작성합니다. &lt;/span&gt;
   data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 리턴할 데이터 입니다. 들여쓰기는 화이트스페이스4칸입니다.&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 데이터를 Json 형식으로 리턴합니다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py runserver   &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== shell에서 실행, django를 이용한 개발서버를 활성화 시킵니다.&lt;/span&gt;

http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== 브라우저로 주소로 들어가 3.에서 입력한 데이터가 나오는지 확인합니다. 나오지 않는다면 어딘가 틀렸단 얘기입니다. (제 설명이 틀리지 않았다면요...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-models-세팅&quot;&gt;&lt;a href=&quot;#shell-models-%EC%84%B8%ED%8C%85&quot; aria-label=&quot;shell models 세팅 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell ]models 세팅&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== 작성할 DB모델을 불러옵니다. &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== Content 라는 DB class를 선언합니다. &lt;/span&gt;

   title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# DB의 값을 설정합니다. models.CharField는 max_length를 필수 인자로 받습니다. 그외의 조건들을 추가할 수 있습니다. &lt;/span&gt;

   content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TextField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

   created_at &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DateTimeField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto_now_add&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#models.DateTimeField 시간을 입력하는 DB model value입니다. auto_now_add 는 입력할때의 값으로 고정이 됩니다. &lt;/span&gt;

   updated_at &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DateTimeField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto_now&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#auto_now 데이터 저장시에 그 시점으로 업데이트되어 저장됩니다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-db-생성하기&quot;&gt;&lt;a href=&quot;#shell-db-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;shell db 생성하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] DB 생성하기&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py migrate  

python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py makemigrations someapp &lt;span class=&quot;token comment&quot;&gt;# DB 가 위에서 설정한 모델의 설정을 저장할 수 있도록 준비합니다. &lt;/span&gt;

python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py migrate someapp &lt;span class=&quot;token comment&quot;&gt;# model 설정을 DB에 적용합니다.  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-admin-에서-db-에-등록-할-수-있도록-기능-추가&quot;&gt;&lt;a href=&quot;#shell-admin-%EC%97%90%EC%84%9C-db-%EC%97%90-%EB%93%B1%EB%A1%9D-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;shell admin 에서 db 에 등록 할 수 있도록 기능 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] admin 에서 DB 에 등록 할 수 있도록 기능 추가&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py 

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; admin 

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Post  &lt;span class=&quot;token comment&quot;&gt;#model Class를 불러옵니다. &lt;/span&gt;

admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Post&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#어드민 페이지에서 Post DB에 등록할 수 있도록 설정합니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py createsuperuser &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== admin 페이지의 id pw 설정합니다. &lt;/span&gt;

http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;admin 으로 들어가면 관리자 페이지 로그인 창이 나타납니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 위에서 설정한 &lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;pw 를 이용해서 들어갑니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;someapp으로 들어가셔서 데이터를 추가합니다.  title1, content1 이런 식으로 title3, content3 까지 만듭니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;view-수정-postlist-가-나올-수-있도록&quot;&gt;&lt;a href=&quot;#view-%EC%88%98%EC%A0%95-postlist-%EA%B0%80-%EB%82%98%EC%98%AC-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D&quot; aria-label=&quot;view 수정 postlist 가 나올 수 있도록 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;view 수정 postlist 가 나올 수 있도록&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py   &lt;span class=&quot;token comment&quot;&gt;# 수정할 파일을 엽니다. &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;content_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
   post_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;token comment&quot;&gt;#admin에서 입력한 값들이 담길 리스트 생성&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; post &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#반복문을 돌며 리스트에 data들을 담습니다. &lt;/span&gt;
       post_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;content&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;post_list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; 에서 입력한 Title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Content 불러 오는 거 확인하시면
위에서 입력한 title과 content가 나오는걸 볼 수 있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 요호! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Python -Class, Module, Exception ]]></title><description><![CDATA[야생의 바름은(는) 파이썬의 Class,Module,Exception과 조우했다. ]]></description><link>https://rumbarum.github.io//posts/19-08-06_python/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/19-08-06_python/</guid><pubDate>Tue, 06 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;공통적인 개념으로 묶이는, 추상적 대상&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;실체가 있는 구체적인 대상&lt;/li&gt;
&lt;li&gt;Class 정의 하기&lt;/li&gt;
&lt;li&gt;class 이름은 각 단어의 앞글자를 대문자로 사용합니다.&lt;/li&gt;
&lt;li&gt;한단어 이상으로 이루어져 있다면 밑줄(underscore) 없이 모든 단어를 다 붙인다.&lt;/li&gt;
&lt;li&gt;Class의 attribute(속성)&lt;/li&gt;
&lt;li&gt;class에 정의되는 공통 요소&lt;/li&gt;
&lt;li&gt;class 안에서 정의해주는 함수(function)는 function이라고 하지 않고 method 라고 합니다)&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maker&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; horse_power&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; maker 
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; model 
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;horse_power &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; horse_power&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Class Method&lt;/li&gt;
&lt;li&gt;객체가 행할 수 있는 행동&lt;/li&gt;
&lt;li&gt;메소드를 사용할때는 dot(.) 을 사용하여 객체를 호출&lt;/li&gt;
&lt;li&gt;&amp;#x3C;객체&gt;.&amp;#x3C;메소드&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메소드 정의&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maker&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; horse_power&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; maker 
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; model 
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;horse_power &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; horse_power 
  
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;honk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maker&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 빠라바라빠라밤&quot;&lt;/span&gt;&lt;/span&gt;

hyundai &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Car&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;현대&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;제네시스&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
hyundai&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;honk&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;현대 빠라바라빠라밤&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;모듈은 변수나 함수 그리고 클래스 등을 모아놓은 파일 (라이브러리?)&lt;/li&gt;
&lt;li&gt;다른 파일에서 재사용이 가능&lt;/li&gt;
&lt;li&gt;전체 코드가 한 파일에 넣기에는 너무 커졌을때 여러 파일로 나누어서 정리&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일을 만든후 그 안에 재사용 하고 싶은 함수나 클래스 혹은 변수등을 구현&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;## my_module.py&lt;/span&gt;
my_module_var &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def my&lt;em&gt;module&lt;/em&gt;func():
return “Hello!“class MyModuleClass: pass&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;import my_module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모듈 전체 import&lt;/li&gt;
&lt;li&gt;파일 확장자인 “.py” 는 제외하고 파일 이름만 사용&lt;/li&gt;
&lt;li&gt;사용하기&lt;/li&gt;
&lt;li&gt;&amp;#x3C;모듈 이름&gt;.&amp;#x3C;모듈에서 사용하길 원하는 변수/함수/클래스 이름&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;## main.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; my_module&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;print(my&lt;em&gt;module.my&lt;/em&gt;module_var)&lt;/p&gt;
&lt;p&gt;my&lt;em&gt;module.my&lt;/em&gt;module_func()&lt;/p&gt;
&lt;p&gt;my&lt;em&gt;module&lt;/em&gt;class = my_module.MyModuleClass()&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternative ways to import modules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모듈의 일부분 import&lt;/li&gt;
&lt;li&gt;from &amp;#x3C;모듈 이름&gt; import &amp;#x3C;함수/변수/클래스1&gt;, &amp;#x3C;함수/변수/클래스2&gt;, …, &amp;#x3C;함수/변수/클래스N&gt;&lt;/li&gt;
&lt;li&gt;이렇게 가져온 다음에 모듈이름을 앞에 붙이지 않아도 바로 처리가 가능하다.&lt;/li&gt;
&lt;li&gt;모듈에서 사용하는 것이 명확할때 from import 를 사용하면 편리&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; my_module &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; my_module_func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my_module_var
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_module_var&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;my_module_func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import As&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import 해온 정보의 이름을 사용하기 편하게 바꾼다.&lt;/li&gt;
&lt;li&gt;이름의 중복 이나 긴 이름을 방지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packages&lt;/li&gt;
&lt;li&gt;파일에 나누어져 있는 코드들도 다른 곳에서 하나의 module로 불러와서 사용할 수 있도록 해주는것&lt;/li&gt;
&lt;li&gt;파이썬 파일들로 이루어져 있는 디렉토리(directory)가 하나의 package&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package Initialization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://init.py/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;init.py&lt;/a&gt;파일을 통해 package 초기 설정을 가능하게함&lt;/li&gt;
&lt;li&gt;Import 할때 경로의 총 길이 줄여주기&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://init.py/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;init.py&lt;/a&gt;파일에 먼저 한번 import 후 .py 에서 import&lt;/p&gt;
&lt;p&gt;init&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Package에서 import 할 수 있는 변수/함수/클래스 제한하기&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;package를 통해 import 될 수 있는 요소들은 모두 변수를 통해 정의&lt;/p&gt;
&lt;p&gt;all&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;all 변수는 string 값의 요소를 가지고 있는 list&lt;/li&gt;
&lt;li&gt;all 변수의 default 값은 모든 함수/변수/클래스&lt;/li&gt;
&lt;li&gt;all 변수를 따로 정의해줌으로 import 될 수 있는 요소들을 제한&lt;/li&gt;
&lt;li&gt;그 외 package가 import될때 꼭 먼저 실행되어야 하는 코드들을 설정해 놓는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 사람의 package 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PIP는 파이썬의 package manager&lt;/li&gt;
&lt;li&gt;pip install Django ( 컴온 장고!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How import statement finds modules and packages&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import Search 순서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sys.module&lt;/li&gt;
&lt;li&gt;import된 모듈과 package들을 저장&lt;/li&gt;
&lt;li&gt;단순한 dictionary&lt;/li&gt;
&lt;li&gt;새로 import 하는 모듈은 sys.modules 에서 찾을 수 없다.&lt;/li&gt;
&lt;li&gt;built-in modules&lt;/li&gt;
&lt;li&gt;파이썬 공식 라이브러리들&lt;/li&gt;
&lt;li&gt;이미 포함되어 있어서 찾기 쉽다.&lt;/li&gt;
&lt;li&gt;sys.path&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string 요소들을 가지고 있는 list &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/bin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python36.zip&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/lib-dynload&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/site-packages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/site-packages/aeosa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/site-packages/IPython/extensions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/.ipython&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Absolute Path &amp;#x26; Relative Path&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Absolute path&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최상위 폴더를 기준으로 탐색&lt;/li&gt;
&lt;li&gt;어느 파일, 어느 위치에서 import 하던지 경로가 항상 위와 같이 동일하게 된다.&lt;/li&gt;
&lt;li&gt;경로가 길어지는 경우가 생길 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;relativev path&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 위치를 기준으로 탐색&lt;/li&gt;
&lt;li&gt;헷갈리기 쉽고 파일 위치가 변경되면 경로 위치도 변경되어야 하는 단점이 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exceptions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;에러 발생시 예외처리 정하기 &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;somefunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
trial &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;실행코드에 에러가 없으면 진행되는 코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
  
exception ErrorName &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;실행코드 진행중 ErrorName 에러 발생시 실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 

anotherException anotherErrorName &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(optional)&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;anotherErrorName 에러 발생시 실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(optional)&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ErrorName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; anotherErrorName 외의 에러 발생시 실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
  
&lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;에러 발생 여부와 상관없이 최종적으로 실행되는 코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(optional)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Decorator 톺아보기 ]]></title><description><![CDATA[첨보는 데코레이터 코드 이쁘게 데코해주나요? Error~! ]]></description><link>https://rumbarum.github.io//posts/19-08-05_python_decorator /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/19-08-05_python_decorator /</guid><pubDate>Mon, 05 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 style=&quot;color:rgb(9,136,104)&quot;&gt;Decorator 와의 싸움&lt;/h3&gt;
&lt;h4 id=&quot;decorator-개념&quot;&gt;&lt;a href=&quot;#decorator-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;decorator 개념 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator 개념&lt;/h4&gt;
&lt;p&gt;기존의 함수에 여러가지 기능을 추가하는 파이썬 구문이라고 한다.&lt;/p&gt;
&lt;p&gt;어떤 함수실행에 앞이나 뒤에 원하는 코드(함수)들이 같이 실행되도록 할 수 있다!&lt;/p&gt;
&lt;p&gt;함수 또는 함수의 인자들을 활용 할 수도 있다.&lt;/p&gt;
&lt;p&gt;fnA() ⇒ fnB ⇒ …fnN&lt;/p&gt;
&lt;h3 id=&quot;decorator-샘플-코드&quot;&gt;&lt;a href=&quot;#decorator-%EC%83%98%ED%94%8C-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;decorator 샘플 코드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator 샘플 코드&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#5&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#7&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function  &lt;span class=&quot;token comment&quot;&gt;#6&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#8&lt;/span&gt;

decorated_display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; decorator_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#3&lt;/span&gt;

decorated_display&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#4 &lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;decorator_function 정의&lt;/li&gt;
&lt;li&gt;display 정의&lt;/li&gt;
&lt;li&gt;decorated&lt;em&gt;display라는 변수에 display 함수를 인자로 가진 decorator&lt;/em&gt;function을 실행한 리턴값을 할당(리턴값은 wrapper_function 아직 실행되지 않음 )&lt;/li&gt;
&lt;li&gt;decorated&lt;em&gt;display()를 통해 wrapper&lt;/em&gt;function을 호출&lt;/li&gt;
&lt;li&gt;wrapper_function 정의&lt;/li&gt;
&lt;li&gt;wrapper_function 호출&lt;/li&gt;
&lt;li&gt;original_function(=display) ()&lt;/li&gt;
&lt;li&gt;문자열 출력&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;decorator-why&quot;&gt;&lt;a href=&quot;#decorator-why&quot; aria-label=&quot;decorator why permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator Why?&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#5&lt;/span&gt;
        실행시키길 원하는 코드&lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#7&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#8  &lt;/span&gt;
        실행시키길 원하는 코드&lt;span class=&quot;token number&quot;&gt;2222&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#9&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function  &lt;span class=&quot;token comment&quot;&gt;#6&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#8&lt;/span&gt;

decorated_display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; decorator_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#3&lt;/span&gt;

decorated_display&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#4 &lt;/span&gt;

실행시키길 원하는 코드 &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#10&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#11 &lt;/span&gt;
실행시키길 원하는 코드 &lt;span class=&quot;token number&quot;&gt;2222&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#12 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 내가 함수 실행에 내가 원하는 코드를 엮을 수 있다.&lt;/p&gt;
&lt;p&gt;그럼 그냥 함수 하나로 짜면 안돼?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중복되는 부분을 함수에서 분리시켜 코드를 줄일 수 있다.&lt;/li&gt;
&lt;li&gt;그 외의 장점은… 생각해봐야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 방법을 줄일 수 있는 방법이 있다! @심벌 사용하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function


@decorator_function  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_1 함수가 실행됐습니다.&apos;&lt;/span&gt;


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator_function&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_2 함수가 실행됐습니다.&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# display_1 = decorator_function(display_1)  #3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# display_2 = decorator_function(display_2)  #4&lt;/span&gt;

display_1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
display_2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&apos;display_1 함수가 실행됐습니다.&apos;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;display_2 함수가 실행됐습니다.&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;변수를 붙이고 실행 시키는 대신 @심벌을 데코레이션 함수와 함수 정의에 붙여 준다.&lt;/p&gt;
&lt;p&gt;그럼 동일한 결과를 얻는다 .&lt;/p&gt;
&lt;h3 id=&quot;decorator-실전&quot;&gt;&lt;a href=&quot;#decorator-%EC%8B%A4%EC%A0%84&quot; aria-label=&quot;decorator 실전 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator 실전&lt;/h3&gt;
&lt;h3 id=&quot;original_function의-인자가-있을-경우&quot;&gt;&lt;a href=&quot;#original_function%EC%9D%98-%EC%9D%B8%EC%9E%90%EA%B0%80-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;original_function의 인자가 있을 경우 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;original_function의 인자가 있을 경우&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function


@decorator_function
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator_function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;display_info({name}, {}) 함수가 실행됐습니다.&quot;&lt;/span&gt;

display&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;
display_info&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;display_info 함수가 호출되기전 입니다.&quot;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;display_info(John, 25) 함수가 실행됐습니다.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;display 함수가 인자 (name, age)를 받을 경우에는 wrapper 함수와 original_function에 인자를 설정해줘서 인자가 전달 될 수 있도록 한다. *args, **kwargs 를 같이 써줘야 유동적으로 인자를 받을 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;decorator에-parameter-집어넣기&quot;&gt;&lt;a href=&quot;#decorator%EC%97%90-parameter-%EC%A7%91%EC%96%B4%EB%84%A3%EA%B8%B0&quot; aria-label=&quot;decorator에 parameter 집어넣기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator에 parameter 집어넣기&lt;/h3&gt;
&lt;p&gt;그리고 decorator_function에도 parameter를 집어 넣는 것도 가능하다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 1. 데코레이터를 데코레이터 해놓기- 이렇게 함으로써 데코레이터가 함수이외의 인자를 넣을수 있는 자리를 만들어 준다. &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parametrized&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dec&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; dec&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; repl
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; layer

@parametrized
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; paramofDeco
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function

@decorator_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_3 함수가 실행됐습니다.decorator_function() 인자는 &apos;&lt;/span&gt;

display_3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_3 함수가 호출되기전 입니다.&apos;&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_3 함수가 실행됐습니다.decorator_function() 인자는 paramofDeco&apos;&lt;/span&gt;
 

&lt;span class=&quot;token comment&quot;&gt;# 2. 데코레이터를 한번 더 싸기&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;deco_decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
      result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; paramofDeco
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; decorator_function

@deco_decorator_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_4 함수가 실행됐습니다.decorator_function() 인자는 &apos;&lt;/span&gt;

display_4&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_4 함수가 호출되기전 입니다.&apos;&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_4 함수가 실행됐습니다.decorator_function() 인자는 paramofDeco&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1의 방법은 한번 만들어 놓으면 @심벌로 다른 데코레이터 함수들선언시에 parameter를 쉽게 받을 수 있도록 할 수 있다. (코드 1줄 줄일 수 있네. n번 늘어나면 n줄 Save! )&lt;/p&gt;
&lt;p&gt;2의 방법은 그때 그때 적용&lt;/p&gt;
&lt;p&gt;*주의사항 데코레이터 함수가 parameter 값을 받도록 설정했을때, 만약 paremeter값을 받지 않아도 실행코드 ” () ” 만들어 놔야한다. 안그러면 실행이 되지 않는다. (파라미터값을 넣고 데코레이터 실행한다는걸로 코드가 작성되었기 때문이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#위의 데코레이션을 사용한다고 가정했을때 &lt;/span&gt;

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@deco_decorator_function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; something &quot;&lt;/span&gt;  

display_5&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##실행에러 &lt;/span&gt;

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@deco_decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;something&quot;&lt;/span&gt; 

display_6&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token string&quot;&gt;&quot;something&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL & TEL 19.07.29~ 19.08.04 ]]></title><description><![CDATA[ 19.07.29~ 19.08.04 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_weekly_19-08-04 /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_weekly_19-08-04 /</guid><pubDate>Sun, 04 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;TIL &amp; TEL 19.07.29~ 19.08.04 &lt;/h2&gt;
### TIL( Today I Learned)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.07.29 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위코더들 자기소개 &lt;/li&gt;
&lt;li&gt;학습 계획 공유 &lt;/li&gt;
&lt;li&gt;CSS 복습 문제풀이 &lt;/li&gt;
&lt;li&gt;CSS 문제풀이후 JS 복습 문제풀이 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.07.30&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장비세팅 &lt;/li&gt;
&lt;li&gt;JavaScript 공부&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.07.31&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 공부&lt;/li&gt;
&lt;li&gt;개발자도구 다루기 &lt;/li&gt;
&lt;li&gt;html/ css 실습 돌입 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.01 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 마무리&lt;/li&gt;
&lt;li&gt;Dom셀렉터 공부&lt;/li&gt;
&lt;li&gt;Flex 적용 게임 - 개구리게임 &lt;/li&gt;
&lt;li&gt;트위터클론 이벤트 만들기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.02&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 이벤트 컨트롤 ​&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.07.30 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For 문 에러
for문 사용시 return 을 for문 안에서 사용해 버리면 for문이 돌지를 못한다. return 하고 후속 과정을 종료해버리기때문이다. 코드스테이츠 시험에서 한번 틀렸었는데 또 틀렸네.&lt;/li&gt;
&lt;li&gt;함수 실행 에러
함수인지 아닌지 구분을 잘 하시고, 함수이면 함수를 참조하는지, 함수실행 결과를 참조하는지 잘 구분하고 코딩할것!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.07.31&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 arrow function 선언하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;const or let 함수명 = ( param ) =&amp;gt; { 함수코드} 단일 리턴일 경우 {} 생략 가능!!&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;appendChild 잘못 실행 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;constdoassignment = () =&gt; &quot;&gt;&lt;pre class=&quot;language-constdoassignment = () =&gt; &quot;&gt;&lt;code class=&quot;language-constdoassignment = () =&gt; &quot;&gt;var inputposition = document.getElementById(&amp;#39;h1-title&amp;#39;) ;
let makePtag = document.createElement(&amp;#39;p&amp;#39;) ;
makePtag.className = &amp;#39;dom&amp;#39; ;
makePtag.innerHTML = &amp;#39;DOM&amp;#39; ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;console.log(makePtag);
console.log(inputposition);&lt;/p&gt;
&lt;p&gt;inputposition.appendChild(makePtag) ;
} ;&lt;/p&gt;
&lt;p&gt;doassignment() ; `&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;inputposition 앞에 document 붙여서 틀림.. - _ -;;;&lt;/p&gt;
&lt;p&gt;컴퓨터는 안틀려.. 바름이는 틀려… 안되면 이유가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 내컴에서만 돌아가는 코드는 의미가 없어요 ㅜㅠ 끼워맞추기 코딩

- ```javascript
const getCookieValue = () =&amp;gt; { 
  let result = &amp;quot;&amp;quot; ; 
let sentence = document.cookie ; 
  let position = sentence.indexOf(&amp;#39;ajs_anonymous_id&amp;#39;) ;
  let cutlength = sentence.indexOf(&amp;#39;ajs_user_id&amp;#39;)-2 ; // &amp;lt;==고정값이 되버리면 다른데 응용을 못함
  result = sentence.slice( position+&amp;#39;ajs_anonymous_id&amp;#39;.length +1, cutlength ) ; return result ; 
  } ; 
  getCookieValue() 이건 그냥 나의 상황에 때려맞춘거고 다른사람컴에서는 같은값이 안나오는 경우가 생긴다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;수정본&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getCookieValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sentence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cookie &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cookiearray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sentence&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
cookiearray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ele&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;idx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ajs_anonymous_id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;문자열에 따라 변동 적인 값으로 수정
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getCookieValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.01&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[CSS] fixed -화면 고정 랑 absolute 다르다..&lt;/li&gt;
&lt;li&gt;getElementsByClassName과 Tag 네임은 특정엘리먼트가 아닌, 엘리먼트 리스트를 찾아온다. 그래서 그 태그/클래스에 다 붙이려면 반복문으로 인덱스별로 다 붙이거나, 원하는 인덱스를 골라내야 한다. 그래야 작동이 가능하다. &lt;/li&gt;
&lt;li&gt;자그만한 실수들 .인자 하나씩 빼먹는 실수들이 나온다. 맨날 쓰는건 더 제대로 알아야 할 필요가 있다. 그리고 정확하게 아는게 대충아는것보다 낫다…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.02&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getFullYear, getMonth, getDate는 함수다. ()으로 실행을 시켜줘야만 작동을 한다..&lt;/li&gt;
&lt;li&gt;Date, 값의 매소드다. 단독 실행 안되..&lt;/li&gt;
&lt;li&gt;특정날자 Date 값 받는것도 new Date (특정날짜) &lt;/li&gt;
&lt;li&gt;getTime, 시간 절대값 생성 ,1970 01-01 00:00 =&gt; 0&lt;/li&gt;
&lt;li&gt;숫자는 length 인자가 없습니다…&lt;/li&gt;
&lt;li&gt;toString 은 함수이다. () 으로 실행시켜야한다.&lt;/li&gt;
&lt;li&gt;css. 셀렉터 잘못 골라서 고생고생 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.03&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String.indexOf( ) 인자로는 스트링이 옵니다.&lt;/li&gt;
&lt;li&gt;String.indexOf(“string”) =&gt; o&lt;/li&gt;
&lt;li&gt;String.indexOf(string) =&gt; x &lt;/li&gt;
&lt;li&gt;불러오는 값이 정확히 어떤 값인지 파악합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;container2.style.left = 385px&lt;/code&gt;
소환 되는 값은 string “385px”
값을 사용하시고 싶으면 px를 떼시고, number 로 바꿔 주세요 바름군. &lt;/li&gt;
&lt;li&gt;처리되는 값과 가능 범위 계산 조심 범위 설정한 값에서만 움직이도록 할때 조건 계산을 잘 해야한다.&lt;/li&gt;
&lt;li&gt;한 점이 0~ 20 사이에서 내가 입력한 값으로 좌우로 3씩 움직인다.
시작점이 10으로 고정.
좌로 3번 가면, 좌표가 1이된다. 우로 3번 가면 좌표가 19
내가 움직임을 입력할 수 있는 위치를 0~ 20으로 설정해 놓는다면, 1에서도 나는 -3을 입력 할수 있다. 좌표는 -2가 된다.
내가 움직임을 입력할 수있는 범위를 벗어났기 때문에 (0~20) 나는 오른쪽으로 복귀하는 움직임을 할 수 없게 되었다.
0~20 사이 움직여야 한다면, 결과 위치가 0~20 사이 위치하여야 하고, 입력 위치는 그 범위 안에있어야 한다.
결과 가능한 위치 (1~19)
좌로 입력 가능한 위치( 4~19)
우로 입력 가능한 위치( 1~ 16) &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intervalID = setInterval( func, delaytime ) 으로 실행 delaytime 은 그냥 number&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clearInterval(intervalID) 로 인터벌 삭제 &lt;/li&gt;
&lt;li&gt;리턴으로 임의의 타이머 id &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeoutID = setTimeout( 실행함수나 코드 , 타임, 코드parametet(optional) )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function() 으로 입력하면 안된다. function을 하고,인자값을 3번째 para 로 주던지,
let wantrunthis = ( param) =&gt; { …} 실행 원하는 함수
param=&gt; target 집어넣을 값 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\1. setTimeout( wantrunthis, 5000, target ) &lt;/p&gt;
&lt;p&gt;\2. setTimeout( ()=&gt;{wantrunthis(target) }, 5000 )&lt;/p&gt;
&lt;p&gt;\3. setTimeout( (param)=&gt;{wantrunthis(param)},5000, target) `&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python 에러&lt;/p&gt;
&lt;p&gt;다섯줄을 출력하는 방법…? 출력을 다섯번을 하면 된다. =&gt; 큰따옴표 3개를 앞뒤로 붙인다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.04&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 등호는 == &lt;/li&gt;
&lt;li&gt;if, elif, else 조건문 뒤에는 ” : ” 붙이기 &lt;/li&gt;
&lt;li&gt;else 뒤에는 조건문이 붙지 않는다&lt;/li&gt;
&lt;li&gt;숫자를 표현할때 4/2 =&gt; 2.0 not 2 !!! so 4//2 를 쓰던지, int(4/2) 를 해줘야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Python 한눈에 톺아보기]]></title><description><![CDATA[파이썬 복습을 하기위한 자료]]></description><link>https://rumbarum.github.io//posts/onpagrPython /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/onpagrPython /</guid><pubDate>Sun, 04 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h1 id=&quot;python-뽀개기&quot;&gt;&lt;a href=&quot;#python-%EB%BD%80%EA%B0%9C%EA%B8%B0&quot; aria-label=&quot;python 뽀개기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python 뽀개기&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Print - 프린트다음에 오는 글자들을 출력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;print( “Hello World!“)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;data-type&quot;&gt;&lt;a href=&quot;#data-type&quot; aria-label=&quot;data type permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Data Type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integer - 정수&lt;/li&gt;
&lt;li&gt;Float - 소수점이 들어간 숫자&lt;/li&gt;
&lt;li&gt;Complex Num - 실수+ 허수 복소수&lt;/li&gt;
&lt;li&gt;String 문자&lt;/li&gt;
&lt;li&gt;Boolean 조건문 평가값 T/F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;variable&quot;&gt;&lt;a href=&quot;#variable&quot; aria-label=&quot;variable permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;변수 지정 하고 변수 수정 자유로움&lt;/li&gt;
&lt;li&gt;변수이름 = 변수값&lt;/li&gt;
&lt;li&gt;변수 이름 법칙&lt;/li&gt;
&lt;li&gt;변수 이름은 영어 알파벳과 숫자 그리고 underscore (_) 으로만 구성될 수 있습니다.&lt;/li&gt;
&lt;li&gt;변수 이름 첫글자는 알파벳이나 underscore로만 시작해야 합니다. 숫자로는 시작될 수 없습니다.&lt;/li&gt;
&lt;li&gt;영어 알파벳은 대문자와 소문자가 구분이 됩니다 (case sensitive).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;string&quot;&gt;&lt;a href=&quot;#string&quot; aria-label=&quot;string permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fomatting&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;%-formatting - 코드 가독성이 떨어짐&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Eric&quot;&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;74&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;Hello, %s.You are %s.&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token string&quot;&gt;&apos;Hello Eric. You are 74.&apos;&lt;/span&gt;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;str.format() - 인수가 많아질 경우 복잡해지기 마찬가지&lt;/p&gt;
&lt;p&gt;`&gt;&gt;&gt; person = {‘name’: ‘Eric’, ‘age’: 74}&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, {name}. You are {age}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token string&quot;&gt;&apos;Hello, Eric. You are 74.&apos;&lt;/span&gt;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f-String &lt;a href=&quot;https://realpython.com/python-f-strings/#arbitrary-expressions&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://realpython.com/python-f-strings/#arbitrary-expressions&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Eric&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;74&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; f&quot;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; You are &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&quot;&lt;span class=&quot;token string&quot;&gt;&apos;Hello, Eric. You are 74.&apos;&lt;/span&gt;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;단순, 응용력 좋음, 멀티라인,&lt;/li&gt;
&lt;li&gt;Quotation Mark 1, 2, 3개의 ” “이 앞뒤로 붙어도 된다.&lt;/li&gt;
&lt;li&gt;Dictionaries 데이터도 텍스트에 삽입&lt;/li&gt;
&lt;li&gt;Note - 딕셔너리 데이터 키 이름이 텍스트 인용 부호와 같으면 오류&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;comedian &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Eric Idle&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;age&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;The comedian is {comedian[&apos;&lt;/span&gt;&lt;/span&gt;name&lt;span class=&quot;token string&quot;&gt;&apos;]}, aged {comedian[&apos;&lt;/span&gt;age&lt;span class=&quot;token string&quot;&gt;&apos;]}. &apos;&lt;/span&gt; File &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;stdin&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; line &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;The comedian is {comedian[&apos;&lt;/span&gt;&lt;/span&gt;name&lt;span class=&quot;token string&quot;&gt;&apos;]}, aged {comedian[&apos;&lt;/span&gt;age&lt;span class=&quot;token string&quot;&gt;&apos;]}.&apos;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;SyntaxError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; invalid syntax` 참이 되려면 아래처럼 
&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;The comedian is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;comedian&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, aged &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;comedian&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;age&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;The comedian is {comedian[&quot;name&quot;]}, aged {comedian[&quot;age&quot;]}.&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Braces 다중 괄호 가능하다&lt;/li&gt;
&lt;li&gt;앞뒤각각 3개이상일 경우에 앞뒤로 2개 가능 &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt;&amp;gt; f&amp;quot;{{74}}&amp;quot;
&amp;#39;{74}&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;f string expression 부분에 ” 삽입은 불가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;문자연결&lt;/li&gt;
&lt;li&gt;print(“Hello, ” + “World”)&lt;/li&gt;
&lt;li&gt;name = input() print(f”Hello, {name}“)&lt;/li&gt;
&lt;li&gt;multiple line 표현에는 앞뒤로 “*3 을 붙인다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;number&quot;&gt;&lt;a href=&quot;#number&quot; aria-label=&quot;number permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;따옴표 들어가면 안됨. “100” ≠ 100&lt;/li&gt;
&lt;li&gt;문자열과 숫자열의 계산 안됨&lt;/li&gt;
&lt;li&gt;수학연산&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가감승제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수나누기 정수값으로 떨어지게 반내림을 한다. &lt;code class=&quot;language-text&quot;&gt;7 // 3 = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;% : 나누고 나머지 값 표현&lt;/li&gt;
&lt;li&gt;+= 3: 변수에 값을 더하고 변수로 지정&lt;/li&gt;
&lt;li&gt;-= 3: 변수에서 값을 뺌 값을 지정&lt;/li&gt;
&lt;li&gt;*= : 변수에 값을 곱한값을 변수로 지정&lt;/li&gt;
&lt;li&gt;/= : 변수를 값으로 나눈 결과를 변수로 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사칙연산 우선순위!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;( )&lt;/li&gt;
&lt;li&gt;** 제곱!&lt;/li&gt;
&lt;li&gt;*, / , 그리고 %&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;와 -&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;white-space--indention&quot;&gt;&lt;a href=&quot;#white-space--indention&quot; aria-label=&quot;white space  indention permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;white space = indention!!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;js는 괄호로 종속성을 표현하지만 python은 들여쓰기로 종속성을 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;if-statement&quot;&gt;&lt;a href=&quot;#if-statement&quot; aria-label=&quot;if statement permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If statement&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; expression&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  codes to execute
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;산수는 어렵지 않아요!&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;elif and Else&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;elif = else if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if 구문과 연결되어 사용, if 다음에 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;if 가 false 일 경우 실행 true 면 if 에서 끝남&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if 나 , else if 가 false 일 경우 실행, 별도의 조건이 필요없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing condition&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and : 여러 조건문 연결&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 조건문이 true 여야 한다. 하나라도 false 가 있으면 실행이 안됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and 의 반대, 테스트 조건중 하나라도 true 이면 코드가 실행이 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nested If Statements&lt;/li&gt;
&lt;li&gt;반복되는 컨디션이 있을때는 nested if statemens 즉 중첩되는 if 구문을 사용&lt;/li&gt;
&lt;li&gt;(간격)으로 구분&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2단계 이상 중첩을 하면 가독성이 너무 떨어지기 때문에 일반적으로 2단계 이상은 잘 하지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;학생&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;취업이 곧 다가온다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;그래도 아직 놀 시간이 있네..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;한창 놀때지..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;열심히 공부 해서 대학교 부터 가라!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;비교-연산자&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;비교 연산자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비교 연산자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;== : 같다&lt;/li&gt;
&lt;li&gt;!= : 다르다&lt;/li&gt;
&lt;li&gt;”&gt;”: 크다 *string 도 &gt; 으로 비교가능하다 .&lt;/li&gt;
&lt;li&gt;&amp;#x3C; : 작다&lt;/li&gt;
&lt;li&gt;”&gt;=” : 크거나 같다.&lt;/li&gt;
&lt;li&gt;&amp;#x3C;= : 작거나 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;comment&quot;&gt;&lt;a href=&quot;#comment&quot; aria-label=&quot;comment permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;#으로 시작한다&lt;/li&gt;
&lt;li&gt;멀티라인삽입 - 가능하나 보통 #으로 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token triple-quoted-string string&quot;&gt;&apos;&apos;&apos;This is a multiline comments. 
이렇게 여러 줄에 걸쳐서 
주석을 삽입하는게 가능합니다...&apos;&apos;&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;best practice는 주석은 최소한으로 사용하는 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;function&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;반복코드의 효과적 사용&lt;/li&gt;
&lt;li&gt;코드의 가독성 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def 함수명(parameter): 문장1 문장2 … 문장N [return 리턴값]&lt;/p&gt;
&lt;p&gt;parameter 와 return 은 optional&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&quot;parameter&quot;&gt;&lt;a href=&quot;#parameter&quot; aria-label=&quot;parameter permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;parameter&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;positional arguments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순서대로 값이 parameter로 함수에 전해지는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keyword arguments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순서 대신에 parameter 이름으로 맞추어서 값을 전해준다.&lt;/li&gt;
&lt;li&gt;가독성 향상&lt;/li&gt;
&lt;li&gt;실수 가능성 줄임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mixing positional arguments and keyword arguments 두개를 섞는 것도 가능함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keyword arguments 는 순서가 바뀌어도 상관 없지만 positional arguments 부분은 순서를 지켜줘야 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parameter Default Value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default 값이 정의된 paramter는 함수가 호출될때 값이 넘겨지 않아도 괜찮다.&lt;/li&gt;
&lt;li&gt;값이 넘겨지 않은 경우 default 값이 자동으로 넘겨지게 된다.&lt;/li&gt;
&lt;li&gt;&lt;u&gt;default 값이 정의된 parameter가 default 값이 정의 되지 않은 parameter 보다 먼저 위치해 있으면 안됨 syntax 에러 표현&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;string, number, boolean 등 모든 타입의 값을 저장할 수 있다.&lt;/li&gt;
&lt;li&gt;samlple&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;korea_provinces &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;강원도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;경기도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;경상도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;전라도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;충청도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variable 변수명&lt;/li&gt;
&lt;li&gt;Element 구성 요소&lt;/li&gt;
&lt;li&gt;index&lt;/li&gt;
&lt;li&gt;인덱스는 0부터 시작&lt;/li&gt;
&lt;li&gt;index의 마지막은 n-1 (n은 list의 총 길이)&lt;/li&gt;
&lt;li&gt;소환은 ListName[index]&lt;/li&gt;
&lt;li&gt;Adding And Changing Elements To List&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Append :한개의 엘리먼트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;list name&gt; &lt;dot&gt; &lt;append&gt; (element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;: 한개 이상의 엘리먼트 추가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list1 = list1 + list2&lt;/li&gt;
&lt;li&gt;새로 생성된 list를 변수에 다시 지정해 주지 않으면 기존 list들은 수정이 되지 않은 상태로 남아있게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원하는 위치에 element를 삽입&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;서울특별시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;부산광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인천광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대구광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대전광역시&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; cities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;insert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;제주특별자치도 제주시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; 부산광역시 자리&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; cities&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 에 채워넣음&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 나머지 뒤로 한칸씩 밀린다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

cities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;서울특별시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;제주특별자치도 제주시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;부산광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인천광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대구광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대전광역시&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empty List&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비어있는 대괄호( )로 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updating Elements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수정하고자 하는 element의 index 값을 통해 list에서 element를 선택한 후 새로운 값을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;서울특별시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;부산광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인천광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대구광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대전광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;cities&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;경기도 성남시&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;List Slicing&lt;/li&gt;
&lt;li&gt;리스트의 일부분을 따로 copy&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;slicing은 오리지널 list를 수정하는게 아니라, 새로운 list를 만들어 낸다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sample&lt;code class=&quot;language-text&quot;&gt;list_name[start : stop]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start와 stop에는 정수만 들어가야 한다! 2.0 도 안됨!!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slicing Steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list_name[start : stop : step]&lt;/li&gt;
&lt;li&gt;optional&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slicing Tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start index를 빈칸으로 남겨두면 해당 list의 첫 요소 부터 시작&lt;/li&gt;
&lt;li&gt;stop index를 빈칸으로 남겨두면 start index 부터 끝까지 가져옴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deleting Elements From List&lt;/li&gt;
&lt;li&gt;del ListName[indexNumber]&lt;/li&gt;
&lt;li&gt;Listname.remove(Element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;tuples&quot;&gt;&lt;a href=&quot;#tuples&quot; aria-label=&quot;tuples permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List는 수정이 가능하지만 tuple은 한번 선언되면 수정이 불가능&lt;/li&gt;
&lt;li&gt;[…] =&gt; list , (…) =&gt; tuples&lt;/li&gt;
&lt;li&gt;2개에서 5개 사이의 요소들을 저장할때 사용&lt;/li&gt;
&lt;li&gt;특정 데이터를 ad hoc(즉석적으로) 하게 표현하고 싶을때 사용&lt;/li&gt;
&lt;li&gt;List의 요소들로 tuple을 사용&lt;code class=&quot;language-text&quot;&gt;cords = [ (4,4), (5,2), (-2, 2), (-3, -4) ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;인덱스 할당으로 데이터 입력이 불가능하다.&lt;code class=&quot;language-text&quot;&gt;tuple= (value,...) (가능)``tuple[n] = value (불가능)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; aria-label=&quot;set permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;list의 친척&lt;/li&gt;
&lt;li&gt;ordering이 없다.&lt;/li&gt;
&lt;li&gt;순서가 없으므로 indexing도 없다.&lt;/li&gt;
&lt;li&gt;중복값이 존재하지 않는다. 중복값 입력시 새로운 요소가 이전 요소 대신함&lt;/li&gt;
&lt;li&gt;Set 생성하는 법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중괄호 ({ }) 사용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;set1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set() 함수&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;set2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;set를 만들기 위해서는 list를 parameter로 전달&lt;/li&gt;
&lt;li&gt;set() 함수를 사용해서 set를 만드는 경우는 list를 set로 변환하고 싶을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set에서 새로운 요소 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_set&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Set에서 요소 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_set&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Look Up : value 존재여부 알아보기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1 is in the set&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;4 is not in the set&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Intersection (교집합) &amp;#x26; Union (합집합)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;교집합은 &amp;#x26; 키워드 혹은 intersection&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;set1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
set2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;intersection&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;합집합은 | 키워드 혹은 union 함수&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;union&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;dictionary&quot;&gt;&lt;a href=&quot;#dictionary&quot; aria-label=&quot;dictionary permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dictionary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;object 는 키에 스트링 표현을 안붙여도 입력이 가능했는데 Dictionary는 그러지가 않는다.&lt;/li&gt;
&lt;li&gt;sample&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_dic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;key1&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;value1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;key2&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dictionary에서 요소(element) 읽어들이기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DictionaryName[“key Name”]&lt;/li&gt;
&lt;li&gt;Elements add&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DictionaryName[New_Key]=new_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;동일한 key가 이미 존재할 경우 새로운 값이 대체한다&lt;/li&gt;
&lt;li&gt;Elements fix&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DictionaryName[Key] = fixed Element.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elements remove&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;del DictionaryName[Key]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Looping&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for each_key in DictionaryID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리의 키값들을 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for each_key in DictionaryID.values()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;밸류값들을 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Looping Dictionary With Both Keys And Values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for each_key, each value in DictionaryID.items()&lt;/li&gt;
&lt;li&gt;Dictionary의 items 함수는 key와 value를 tuple로 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complex Dictionary&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of Dictionaries&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;손쉽게 여러 dictionary들을 grouping&lt;/li&gt;
&lt;li&gt;특정 dictionary 접근시 코드와 실행 시간이 길어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nested Dictionary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원하는 데이터의 키값으로 바로 찾을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;for-loops&quot;&gt;&lt;a href=&quot;#for-loops&quot; aria-label=&quot;for loops permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For Loops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for element in list: do_something_with_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For 문은 tuple, set 등에서도 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;Break&lt;/li&gt;
&lt;li&gt;다음 interation으로 넘어가지 않고 for 구문에서 빠져나옴&lt;/li&gt;
&lt;li&gt;Continue&lt;/li&gt;
&lt;li&gt;for 문 안의 추가된 코드 실행안시키고 interation으로 넘어가고 싶을때는 continue&lt;/li&gt;
&lt;li&gt;Nested For Loops&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;  numbers1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  numbers2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; num1 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; numbers1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; num2 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; numbers2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;num2&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; == &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;while-loops&quot;&gt;&lt;a href=&quot;#while-loops&quot; aria-label=&quot;while loops permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;While Loops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 조건문이 True 일 경우에만 코드블록을 반복 실행&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;조건문&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장N&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;number = 0
while number &amp;#x3C;= 10:
print(number) number += 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0…10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Break &amp;amp; Continue

- For문과 동일하게 break는 while문을 강제종료

- continue는 다음 iteration으로 넘어갑니다.

- ```python
  number = 0
  while number &amp;lt;= 10: 
    if number == 9: 
      break 
    elif number &amp;lt;= 5: 
      number += 1 continue 
    else: 
      print(number) 
      number += 1
  
  &amp;gt; 678&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;While Else&lt;/li&gt;
&lt;li&gt;while의 조건문이 False 이면 실행&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;조건문&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장N&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장N&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ 19.08.03 작업결과물]]></title><description><![CDATA[Javascript를 통해서 간단한 떨어지는 유령과 움직이는 영웅을 구현 ]]></description><link>https://rumbarum.github.io//posts/ 19-08-03_outPut/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/ 19-08-03_outPut/</guid><pubDate>Sat, 03 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/imageForBlog/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-08-03%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.51.49.png&quot;&gt;
유령비가 내려와~~&lt;/p&gt;
&lt;h3 style=&quot;color:rgb(9, 136, 104)&quot;&gt;오늘의 작업물&lt;/h3&gt;
- 1. 바탕화면 깔기
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; DOM div 엘리먼트 생성, CSS 로 background image 불러옴&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;히어로를 가운데서시작하도록&lt;/li&gt;
&lt;li&gt;DOM div로 이미지 컨테이너생성, 컨테이너 child로 이미지 삽입. 컨테이너 위치를 바닥, 가운데로 설정. 삽입된 이미지 position: absolute로 활용해서 원하는 이미지 부분을 불러온다.나머지 부분은 clip-path로 안보이게 삭제,&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;키이벤트 -&gt; 좌우 누를때 히어로 움직이게&lt;/li&gt;
&lt;li&gt;키입력( 좌, 우 키 ) 값을 불러와서 해당 키값별로 컨테이너의 left 값을 조정한다. 히어로 이미지도 수정해서 좌 , 우 모습이 다르게 나오게 한다. 그리고 키입력이 끝나면 다시 정면 모습이 보이게 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;바탕화면 끝 도달하면 더이상 움직이지 않도록&lt;/li&gt;
&lt;li&gt;컨테이너의 위치값 범위를 지정해서 범위 안에서만 움직이도록 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;귀신 하늘에서 시작하도록&lt;/li&gt;
&lt;li&gt;히어로와 마찬가지로 엘리먼트생성하고 이미지를 넣는다&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;랜덤한 x의 위치에서 소환&lt;/li&gt;
&lt;li&gt;Math.floor(Math.random* (최대값 - 최소값)+ 최소값&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;랜덤 함수로 absoulte position 설정해버림.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;귀신 시작한 위치에서 y를 아래로 내려주시면 됩니다.&lt;/li&gt;
&lt;li&gt;setInterval을 이용해서 주기적으로아래로 움직임 부여.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;바닥 도착 하면 죽음&lt;/li&gt;
&lt;li&gt;좌표 바닥 도착후, clearInterval로 계속 실행 되는거 방지&lt;/li&gt;
&lt;li&gt;유령의 이미지 변경&lt;/li&gt;
&lt;li&gt;5초후 setTimeout 으로 유령이미지 컨테이너 삭제해버림&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ RGB 값으로 내가 원하는 색상을 만들 수 있을까?]]></title><description><![CDATA[바름은(는) css 색상을 지정하다가 색상을 혼자서 만들어 볼 수 있겠다는 생각이 떠올랐다.  어떻게?]]></description><link>https://rumbarum.github.io//posts/understandRGBcolor /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understandRGBcolor /</guid><pubDate>Fri, 02 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=midesse&amp;#x26;logNo=220343601395&amp;#x26;proxyReferer=https%3A%2F%2Fwww.google.com%2F&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=midesse&amp;#x26;logNo=220343601395&amp;#x26;proxyReferer=https%3A%2F%2Fwww.google.com%2F&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;▲ rgb 컬러에 대한 자세한 설명  &lt;/p&gt;
&lt;h2 id=&quot;rgb-숫자로-색깔-만들기&quot;&gt;&lt;a href=&quot;#rgb-%EC%88%AB%EC%9E%90%EB%A1%9C-%EC%83%89%EA%B9%94-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;rgb 숫자로 색깔 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rgb 숫자로 색깔 만들기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;rgb  =&gt; Red , Green , Blue 빛의 3원색을 가리킨다. &lt;/li&gt;
&lt;li&gt;빛은 더할 수록 밝아진다. &lt;/li&gt;
&lt;li&gt;에디터에서 rgb 컬러를 표현할때 rgb(n, m, k) 로 표현한다. n, m, k 의 값은 0~ 255 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 방식으로 #000000으로 표현도 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 자리마다 0~9+ a~f 로 표현되는 16자리 숫자가 들어간다. 각각의 2자리가 Red, Green,Blue &lt;/li&gt;
&lt;li&gt;hex-html 코드라고도 부른다.  &lt;/li&gt;
&lt;li&gt;검정색 #000000, 흰색 #ffffff  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0은 빛이 없고, 255는 각각의 빛이 최고라고 보면 된다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검정색 rgb (0 ,0 ,0 ),  흰색 rgb (255,255,255) , &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;혼합사례&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;노랑 rgb(255,255,0) #ffff00&lt;/li&gt;
&lt;li&gt;보라 rgb( 120,0,120) #800080&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[08.02 작업물 ]]></title><description><![CDATA[위코드 2주차 프로젝트 트위터 간단하게 클론해보기 ]]></description><link>https://rumbarum.github.io//posts/19-08-02_outPut /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/19-08-02_outPut /</guid><pubDate>Thu, 01 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/imageForBlog/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-08-02%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.45.01.png&quot; alt=&quot;오늘의 작업물&quot;&gt;&lt;/p&gt;
&lt;h3 style=&quot;color:rgb(9, 136, 104)&quot;&gt;오늘 작업이 끝난 미니터&lt;/h3&gt;
들어간 기능들
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;textarea 글자수 제한, 글자수 표시&lt;/p&gt;
&lt;p&gt;텍스트에어리어 입력값 불러와서 표시&lt;/p&gt;
&lt;p&gt;100자 넘어가면 알림창 뜨고 100자 뒤의 글자 지워버림&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tweet 버튼 누르면, 아래 트위터에 실제로 추가&lt;/p&gt;
&lt;p&gt;데이터에 id, tweet, date 저장&lt;/p&gt;
&lt;p&gt;html 생성자 작동하면서 데이터 불러옴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tweet 개수 왼쪽 프로필에 표시&lt;/p&gt;
&lt;p&gt;데이터 갯수 읽기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;내 tweet 일 경우, 우측에 삭제버튼 나오게&lt;/p&gt;
&lt;p&gt;2번의 생성자를 만들면서, 아이디가 내 이름일 경우 삭제 버튼이 생성되도록 조건 함수 추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;삭제버튼 누르면, 해당 tweet 삭제&lt;/p&gt;
&lt;p&gt;삭제시 event.Target의 parentNode로 타고 올라가 다시 자기를 지우도록 스크립트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최근것이 위로 올라오도록,&lt;/p&gt;
&lt;p&gt;데이터에서 날짜를 정렬해서 순서대로 불러오려고 했는데 그러다가 순차적으로 들어간 데이터를 역순으로 불러와서 정렬&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트윗에 날짜 추가 (2019년 8월 1일)&lt;/p&gt;
&lt;p&gt;데이터에 날짜 프로퍼티 추가하였음&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Flex 알아보기  ]]></title><description><![CDATA[CSS display 요소인 플렉스 정리 ]]></description><link>https://rumbarum.github.io//posts/understandFlexElement /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understandFlexElement /</guid><pubDate>Thu, 01 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 id=&quot;flex--html-문서내-엘리먼트들의-배열을-도와준다&quot;&gt;&lt;a href=&quot;#flex--html-%EB%AC%B8%EC%84%9C%EB%82%B4-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EB%93%A4%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%8F%84%EC%99%80%EC%A4%80%EB%8B%A4&quot; aria-label=&quot;flex  html 문서내 엘리먼트들의 배열을 도와준다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flex = Html 문서내 엘리먼트들의 배열을 도와준다.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://flexboxfroggy.com/#koFlex&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://flexboxfroggy.com/#koFlex&lt;/a&gt; 좀더 이해하기 쉽게 만들어주는 게임.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동일레벨의 엘리먼트들을 클래스 셀렉터를 사용해 css 로 display : flex; 를 설정 후 다음의 속성들을 부여한다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;justify-content =&gt; 엘레멘트 그룹 가로배열&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 요소들을 컨테이너의 왼쪽으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;flex-end: 요소들을 컨테이너의 오른쪽으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;center: 요소들을 컨테이너의 가운데로 정렬합니다.&lt;/li&gt;
&lt;li&gt;space-between: 요소들 사이에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;li&gt;space-around: 요소들 주위에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;align-items =&gt;엘레멘트 그룹 세로배열&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 요소들을 컨테이너의 꼭대기로 정렬합니다.&lt;/li&gt;
&lt;li&gt;flex-end: 요소들을 컨테이너의 바닥으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;center: 요소들을 컨테이너의 세로선 상의 가운데로 정렬합니다.&lt;/li&gt;
&lt;li&gt;baseline: 요소들을 컨테이너의 시작 위치에 정렬합니다.&lt;/li&gt;
&lt;li&gt;stretch: 요소들을 컨테이너에 맞도록 늘립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flex-direction - 엘레멘트 그룹내 배열 방법 및 순서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;row: 요소들을 텍스트의 방향과 동일하게 정렬합니다.&lt;/li&gt;
&lt;li&gt;row-reverse: 요소들을 텍스트의 반대 방향으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;column: 요소들을 위에서 아래로 정렬합니다.&lt;/li&gt;
&lt;li&gt;column-reverse: 요소들을 아래에서 위로 정렬합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;order 엘레멘트 그룹내 순서 개별조정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성을 각 요소에 적용할 수 있습니다. order의 기본 값은 0이며, 양수나 음수로 바꿀 수 있습니다.&lt;/li&gt;
&lt;li&gt;0 자기 포지션,&lt;/li&gt;
&lt;li&gt;++ 오른쪽, 아래쪽,&lt;/li&gt;
&lt;li&gt;— 왼쪽, 위쪽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;align-self&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;align-item 개별 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flex-wrap 엘레멘트 그룹내 줄 맞춤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nowrap: 모든 요소들을 한 줄에 정렬합니다.&lt;/li&gt;
&lt;li&gt;wrap: 요소들을 여러 줄에 걸쳐 정렬합니다.&lt;/li&gt;
&lt;li&gt;wrap-reverse: 요소들을 여러 줄에 걸쳐 반대로 정렬합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flex-flow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-direction과 flex-wrap 합체&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;align-content 엘레멘트 그룹내 ( 여러줄로( flex-wrap: wrap) )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 여러 줄들을 컨테이너의 꼭대기에 정렬합니다.&lt;/li&gt;
&lt;li&gt;flex-end: 여러 줄들을 컨테이너의 바닥에 정렬합니다.&lt;/li&gt;
&lt;li&gt;center: 여러 줄들을 세로선 상의 가운데에 정렬합니다.&lt;/li&gt;
&lt;li&gt;space-between: 여러 줄들 사이에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;li&gt;space-around: 여러 줄들 주위에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;li&gt;stretch: 여러 줄들을 컨테이너에 맞도록 늘립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Html셀렉터, CSS 한눈에 훑어보기   ]]></title><description><![CDATA[Html엘리먼트 셀렉터에 대한 간단한 설명과 Html에 따라다니는 CSS를 키워드 계층도로 정리했습니다.  ]]></description><link>https://rumbarum.github.io//posts/Onepage_HtmlAndCss/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/Onepage_HtmlAndCss/</guid><pubDate>Mon, 29 Jul 2019 02:23:45 GMT</pubDate><content:encoded>&lt;h1 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; aria-label=&quot;html permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Html&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HyperTextMarkupLanguage : 웹에 표현되는 정보들을 태그라는 표시를 통해 구분해서 보여지도록 하는 언어문법이다. 왜? 구분이 안되면, 정렬이 안되고 제대로 보기가 어렵다.  Html은 element로 구성되어 진다. 그리고 각각의 element 들은 아래 그림처럼 구성되어 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/7659/anatomy-of-an-html-element.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flukeout.github.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://flukeout.github.io/&lt;/a&gt; 에서 게임으로 배워볼수 있으며  아래에 정리해 놓았다. &lt;/li&gt;
&lt;li&gt;셀렉터 : 구현된 element 들을 골라서 가지고 있는 정보의 수정,삭제등을 할 수 있다. 수많은 element들을 원하는대로 빨리 골라낼수 있도록 다양한 셀렉방식을 지원하다. &lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://www.w3schools.com/js/pic_navigate.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;element들의 상관관계, 최상위에는 Root element 가 있으며 (&lt;html&gt;태그가 달린다.) 하위 element들을 child라고 한다. 같은 단계의 child 끼리는 sibling 이라고 불리며, 첫째부터 막내까지 작성한 순서대로 순서가 정해진다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;셀렉터 적용 방법들 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A B  - A에 속한 B 엘리먼트&lt;/li&gt;
&lt;li&gt;A + B - A의 바로 다음 형제B&lt;/li&gt;
&lt;li&gt;*모든 엘리먼트&lt;/li&gt;
&lt;li&gt;A * -  A 에 속한 모든 엘리먼트&lt;/li&gt;
&lt;li&gt;A ~B  - A를 따르는 모든 B&lt;/li&gt;
&lt;li&gt;A &gt; B - A의 직속자녀인 B&lt;/li&gt;
&lt;li&gt;A:first-child : 첫번째 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A:only-child 혼자있는 A 엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :last-child 마지막 A 엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :nth-child(m) :m번째 , A 엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :nth-last-child(m) : 뒤에서 m 번째 A엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :first-of-type -첫번째 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A: nth-of-type(odd / even) - 홀/짝 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A: nth-of-type( Xn+B) - B순서부터 매 X번째 엘리먼트, B 포함됨&lt;/li&gt;
&lt;li&gt;A:only-of-type A 종류의 엘리먼트만 선택&lt;/li&gt;
&lt;li&gt;A:last-of-type : 마지막 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A:empty 비어있는 모든 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A:not(X) - X가 포함되어 있지 않은 모든 A , X는 id, class, tag 복수조건 가능하다.&lt;/li&gt;
&lt;li&gt;[attribute] attribute가진 엘리먼트&lt;/li&gt;
&lt;li&gt;A[attribute] attribute를 가진 A&lt;/li&gt;
&lt;li&gt;[attribute=“value”] - attribute===value&lt;/li&gt;
&lt;li&gt;[attribute^=“value”] - attibute가 value로 시작&lt;/li&gt;
&lt;li&gt;[attribute$=“value”] - attibute가 value로 종료&lt;/li&gt;
&lt;li&gt;[attribute*=“value”] -attibute가 value를 포함하고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; aria-label=&quot;css permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://www.nextree.co.kr/content/images/2016/09/yrkim-140327-selector-04.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&quot;css-적용하기&quot;&gt;&lt;a href=&quot;#css-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;css 적용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;css 적용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&quot;css-셀렉터&quot;&gt;&lt;a href=&quot;#css-%EC%85%80%EB%A0%89%ED%84%B0&quot; aria-label=&quot;css 셀렉터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;css 셀렉터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;셀렉터 구분&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클래스와 ID들은 대소문자를 구분하며 문자로 시작해야 하며 영어, 숫자와 언더바(_), 대쉬(-)를 포함할 수 있다.&lt;/li&gt;
&lt;li&gt;클래스는 어떠한 수의 요소에도 적용할 수 있다.&lt;/li&gt;
&lt;li&gt;ID는 하나의 요소에만 적용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;셀렉터 적용 순서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline styling &gt;&gt;&gt; &gt;id&gt;&gt;&gt;, class &gt; , tag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;상속과-그룹&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D%EA%B3%BC-%EA%B7%B8%EB%A3%B9&quot; aria-label=&quot;상속과 그룹 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상속과 그룹&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;묶어서 적용하기, 골라서 적용하기,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- p.pp  - p태그 이면서 pp클래스
- p .pp - p태그 아래의  pp클래스
- p#pp - p태그 이면서 pp아이디
- p #pp- - p태그 이면서 pp아이디
- p p p .pp #pp- p태그의 p태그의 p태그의 pp클래스의 pp 아이디&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;태그 속성 셀렉팅’tag::attribute { }’&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동작 셀렉팅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;마우스 변경 button:hover {cursor : pointer }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;선언 (declaration) - 속성과 속성값을 지정한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;폰트 조절 속성들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;폰트의 적용&lt;/li&gt;
&lt;li&gt;family -폰트 종류&lt;/li&gt;
&lt;li&gt;size -크기&lt;/li&gt;
&lt;li&gt;weight 굵기 일반 400, bold 700&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문구 스타일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가, 왼, 오 정렬 =&gt; text-align : center, left, right&lt;/li&gt;
&lt;li&gt;  스페이스 삽입&lt;/li&gt;
&lt;li&gt;”&lt;blockquote&gt;” 인용문 삽입 태그&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마진, 보더, 패딩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;보더 : 선굵기, 스타일(solid, dot, dash…), 색상&lt;/li&gt;
&lt;li&gt;보더의 길이가 각기 다르게 설정가능하다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;박스사이징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element 영역을 보더로 통일&lt;/li&gt;
&lt;li&gt;{box-sizing: border-box;} &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;적용순서 - 위 오 아 왼 시계방향&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;margin, padding, border: 0px = 0px 0px 0px 0px&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;margin, padding, border: 0px 5 px = 0px 5px 0px 5px&lt;/li&gt;
&lt;li&gt;margin: ???px auto ; 로 좌우 같게 자동으로 할 수있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹페이지 이미지 삽입하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img 태그 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;css로도 삽입이 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가로 화면 크기&lt;/li&gt;
&lt;li&gt;세로 div의 내용 만큼 사이즈&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;img 처럼 height,width 로 조정이 안될 수있다. 영역만 조정. 조정하려면 일치시켜야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;background-size : ~%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;css- backgroundimage 와 img 의 차이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backgroundimage는 % 사이즈 조절이 가능함, 100보다 작으면 다중이미지, 크면 부분적이미지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;레이아웃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;block vs inline&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p, div, li, table ==(display : inline-block)==&gt;인라인&lt;/li&gt;
&lt;li&gt;span, img, a =(float: left || right , display: block )=&gt; 블록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가운데 정렬 위아래패딩 auto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트 스타일 dot, number, none&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;table&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테이블 구성요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;table, th (tr, td )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;셀병합 ( 태그에 속성 삽입)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;가로 병합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;colspan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세로병합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rowspan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;number&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;” - ” 삽입 불가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;value 미리 설정해놓은값&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;place holder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;셀렉트 ‘input::placeholder { }’&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;textarea input type=“text” 보다 긴 데이터 입력시 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Position&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;relative 부모&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;absolute 자식 relative 부모가 없으면 작동이 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fixed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;절대 고정, 위아래로 움직이거나 말거나 상관없음 (부모안에서)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;레이아웃.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;semantic element - 담고있는 콘텐츠를 예상 할 수 있게 해주는 태그들&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경험이 재산이다 .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;header, asider, nav, footer, section, article, figure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;float&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;레이아웃 구조짤때 활용하기 좋음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mediaquery&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 환경변화에 따라 동적인 변화가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추가 템플릿과 유사하게 작용하는 태그들은 기본 포맷이 적용되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FLEX - &lt;a href=&quot;https://flexboxfroggy.com/#ko&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://flexboxfroggy.com/#ko&lt;/a&gt; 플렉스 배우기 게임&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[바름이는 어쩌다가 개발자가 되기로 했을까? ]]></title><description><![CDATA[코딩 부트캠프... 어떡하다가??]]></description><link>https://rumbarum.github.io//posts/WebDevStart/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/WebDevStart/</guid><pubDate>Sun, 28 Jul 2019 01:23:45 GMT</pubDate><content:encoded>&lt;!-- 
![ㅇㅇㅇ](/media/rumbarum.png) --&gt;
&lt;h2 id=&quot;첫-헛발질&quot;&gt;&lt;a href=&quot;#%EC%B2%AB-%ED%97%9B%EB%B0%9C%EC%A7%88&quot; aria-label=&quot;첫 헛발질 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;첫 헛발질&lt;/h2&gt;
&lt;p&gt;내 생에 개발자를 한번 해볼까 제일 먼저  생각을 했던 때는 2009년이다. 당시 모토로라의 첫 안드로이드 폰(Droid )의 국내 출시와 연이은 아이폰의 3gs 출시로 모바일 앱 시장이 불타올랐다. 단순한 포켓볼게임 출시로 몇십만 달러를 버는 개발자가 나오고, 초등학생의 낱말퍼즐 앱이 100만 달러 넘게 벌여들인다는 기사가 나왔다. 그래서 나도 아이디어를 내어 뭔가 만들면 돈 좀 벌어 볼 수 있을까 싶었다. 그러나 무엇을, 어떻게, 어디서 배워야 할지 몰라 마음만 앞섰다. 그 마음은 금방 흐지부지 되고 말았다. 그 뒤로는 내 길이 아닌 가보다 하고 손 놓고 멀어졌다. &lt;/p&gt;
&lt;h2 id=&quot;두번째로-헛발질&quot;&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8%EB%A1%9C-%ED%97%9B%EB%B0%9C%EC%A7%88&quot; aria-label=&quot;두번째로 헛발질 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;두번째로 헛발질?&lt;/h2&gt;
&lt;p&gt;시간이 흐르고 흘러 나는 O2O(online to offline)서비스를 제공하는 스타트업에 취업을 했다. IT 부서는 당연히 아니고 운영쪽 인력으로 투입되었다. 실물을 취급해서 온라인으로 파는 회사였는데 실물 장사는 많이 어렵다는 것을 배웠다. 그 회사 다음 다음 으로 새 일을 구하고 있을때 대표가 software 엔지니어를 추천했다. 내가 가끔씩 틀리는 사람인데 개발은 틀리면 기계가 틀리는 걸 잡아준다고 했다. 그리고 C.S.( Computer Science) 쪽은 계속해서 성장하는 시장이라고도 했다. 다른 스타트업들 일자리를 알아봤는데 운영은 발전 방향이 안보였고, 디자인은 내 재능 밖의 일이고, 개발자가 적성에 맞지 않을까 싶었다. 찾아보니 단기간에 개발자로 전향하게 도와주는 교육 회사와 프로그램들이 많았다. &lt;/p&gt;
&lt;h2 id=&quot;개발질ing&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%A7%88ing&quot; aria-label=&quot;개발질ing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발질ing.&lt;/h2&gt;
&lt;p&gt;그 중에 위코드를 고른 이유는 어떡하다보니… 원래 가려고 생각하던 곳을 못가게 되면서 다른데를 알아보다가 대표님과 상담하고 괜찮다고 느꼈다. 개발뽐뿌가 퐉퐉퐉 그리고 나서 다음날 바로 등록하기로 결정. 코스 시작전에 사전 안내된 강의들을 들으면서 들어갈 준비 하고
7.29 wecode 3기 시작!
​&lt;/p&gt;
&lt;h2 id=&quot;그-끝에는&quot;&gt;&lt;a href=&quot;#%EA%B7%B8-%EB%81%9D%EC%97%90%EB%8A%94&quot; aria-label=&quot;그 끝에는 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그 끝에는?&lt;/h2&gt;
&lt;p&gt;대학 다니면서, 졸업하고 내가 제일 아쉬웠던건 건축학과를 들어가보지 못한 거였다. 내가 갖고 있는 재능이 건축쪽 요구되는 재능(공간지각력)과 상통한다고 느꼈었기 때문이다. 그러면서도 나의 부족함 (꼼꼼하지 못함)이 실수들을 만들어 낼 것 같은 두려움에 용기를 내어 뛰어들지 못했다. 생각해보니 개발을 한다는 것도 건축과 비슷하겠다는 생각을 하게 되었다. 재료와 결과만 다르지, 과정은 동일하지 않을까. 유능한 Web Product Builder 가 되면 좋겠다.&lt;/p&gt;</content:encoded></item></channel></rss>