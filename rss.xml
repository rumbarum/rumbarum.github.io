<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[ 개발세발개발]]></title><description><![CDATA[개발자 성장일기]]></description><link>https://rumbarum.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 16 Feb 2020 10:14:10 GMT</lastBuildDate><item><title><![CDATA[TIL&TEL 20.02.03 ~ 20.02.09]]></title><description><![CDATA[  20.02.03 ~ 20.02.09  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2020-02-08/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2020-02-08/</guid><pubDate>Sun, 09 Feb 2020 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-03 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프론트 페이지 다듬고 중간 점검 받음&lt;/li&gt;
&lt;li&gt;파이썬 스터디&lt;/li&gt;
&lt;li&gt;sequence에 대한 미약한 이해도 상승&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-04 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django Dynamic Formset만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-05 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;채널 생성기와 수정기 다시 짜기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-06 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;작업 수정&lt;/li&gt;
&lt;li&gt;작업 코드 병합&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-07 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;작업 전체 팀 앞에서 발표하기&lt;/li&gt;
&lt;li&gt;Django, Python 멘토링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-08 토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그 작성&lt;/li&gt;
&lt;li&gt;TIL TEL 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-09 일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그 디자인 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-03&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;queryset.update( ) 는 queryset에만 적용, &lt;/li&gt;
&lt;li&gt;instance.update( )는 없는 method이다. &lt;/li&gt;
&lt;li&gt;instance.save(update_fileds=[ field1, field2, … field n ] ) 으로 특정 필드만 업데이트 되도록 할 수있다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-04&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git push 할때 requirements.txt 업데이트 놓침&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-06&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if 뒤에 : 콜론!!&lt;/li&gt;
&lt;li&gt;SyntaxError: positional argument follows keyword argument&lt;/li&gt;
&lt;li&gt;kwargs 는 늘 뒤에!&lt;/li&gt;
&lt;li&gt;함수 열심히 수정하고 url 연결을 안함!&lt;/li&gt;
&lt;li&gt;dict 선언과, 수정은 다르다 dic = {‘aa’: ‘aa’ } vs  dic[ ‘aa’] = ‘aa’&lt;/li&gt;
&lt;li&gt;처음에 정해진 값을 넣는다면 선언으로 값을 집어 넣을 수 있지만 일단 선언이 된 뒤에는 추가할 수만 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-07&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dict key 에 공백이 들어갈 수는 없다!! 그럼 KeyError를 내뱉는다.&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;div에 이벤트를 걸경우 하위에 인풋이 있으면 인풋도 같이 적용된다. &lt;/li&gt;
&lt;li&gt;단일 class 에만 이벤트를 주는 편이 좋을 것 같다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-09&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git add . vs git add -A&lt;/li&gt;
&lt;li&gt;add . 현재 디렉토리상에서 변경된 git update!! Root folder 라면 모든 변경사항이 stage된다. 그렇지 않다면, 현재 폴더 내용만 stage 된다. &lt;/li&gt;
&lt;li&gt;add -A 모든 변경사항을 올린다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Django QuerySet 에  정렬과 필터를 다이나믹하게(정해진 갯수없이) 거는 방법]]></title><description><![CDATA[Order, Filter 프론트에서 요청하는대로 알아서  처리하게 할수 있을까요?]]></description><link>https://rumbarum.github.io//posts/django_dynamic_sort&amp;filter/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/django_dynamic_sort&amp;filter/</guid><pubDate>Fri, 07 Feb 2020 01:23:45 GMT</pubDate><content:encoded>&lt;p&gt;Django QuerySet 에  정렬과 필터를 다이나믹하게(정해진 갯수없이) 거는 방법&lt;/p&gt;
&lt;p&gt;Order, Filter 프론트에서 요청하는대로 알아서  처리하게 할수 있을까요?
네 가능합니다.&lt;/p&gt;
&lt;p&gt;다음 과 같은 Post 모델이 있다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
 	title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#제목&lt;/span&gt;
	content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TextFiled&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#내용&lt;/span&gt;
  author &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#저자&lt;/span&gt;
	timestamp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DateTimeField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;timezone&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;now&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#만들어진 시간&lt;/span&gt;
	like_count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#좋아요 눌린 횟수&lt;/span&gt;
  view_count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#뷰 횟수&lt;/span&gt;
  hate_count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegerField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#싫어요 횟수&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;dynamic-sorting&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dynamic-sorting&quot; aria-label=&quot;dynamic sorting permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dynamic sorting&lt;/h3&gt;
&lt;p&gt;1개의 Order를 거는 방법은 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#좋아요 오름차순 정렬 &lt;/span&gt;
posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;-view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#좋아요 내림차순 정렬 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;N개의 order를 거는 방법은&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;like_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#조회수, 좋아요 오름차순 정렬, &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Order 는 Chainning 이 가능하다.  위의 방법을 Chainnig으로 표현하면, 아래처럼도 작성이 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#조회수 오름차순 정렬&lt;/span&gt;
posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;like_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#조회수 오름차순 정렬 한것중 좋아요 오름차순 정렬&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Order 갯수가 정해져 있지 않고, 1개 또는 그 이상의  Order를 QuerySet에 거는 방법은 크게 두가지 이다. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Order 를 List로 만들고  그 리스트를 통해 Order 입력&lt;/li&gt;
&lt;li&gt;Order 값의 연속 Chainning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1번 방법의 정석은 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# request URL : url/order1=view_count,order2=like_count,order3=-hate_count....order[n]=&apos;value&apos; 최대 n개의 Order 정렬 요청을 받는다. &lt;/span&gt;

order_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GET&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;order&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-timestamp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#받은 요청들을 리스트에 담는다. &apos;-timestamp&apos;를 넣지 않을 경우, 값이 없거나, 잘못되었을 경우 에러가 난다. 에러방지용. &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;like_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-hate_count&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

ordered_post1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;order_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#order_list에 담긴 값으로 Order를 해준다! &lt;/span&gt;

ordered_post2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;like_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-hate_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# ordered_post1과 ordered_post2의 정렬된 내용은 같다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;좀더 편리하게 처리하자면 이렇게도 해볼수 있을 것 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# request URL : url/order=like_count,view_count,-hate_count 기한 없이 Order 정렬 요청을 받는다.쿼리스트링이 조금더 간결해졌다. &lt;/span&gt;

order_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GET&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;order&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-timestamp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#받은 요청들을 리스트에 담는다. &apos;-timestamp&apos;를 넣지 않을 경우, 값이 없거나, 잘못되었을 경우 에러가 난다.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;like_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-hate_count&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

ordered_post1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;order_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#order_list에 담긴 값으로 Order를 해준다! &lt;/span&gt;

ordered_post2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;view_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;like_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-hate_count&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# ordered_post1과 ordered_post2의 정렬된 내용은 같다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2번 방법은 다음과 같다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#다중 Order body로 받을시,&lt;/span&gt;
data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&quot;order_by&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  	&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;view_count&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;asc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;like_count&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  		&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;	
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objcects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;order_by&apos;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;#정렬값이 request에 있다면, &lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; order &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;order_by&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;#그 값들을 찾아서&lt;/span&gt;
		field &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;field&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;						&lt;span class=&quot;token comment&quot;&gt;#연속 channing으로 Order를 건다. &lt;/span&gt;
		asc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-&apos;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;asc&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
		posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;asc&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;field&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;필터의-동적-적용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%84%ED%84%B0%EC%9D%98-%EB%8F%99%EC%A0%81-%EC%A0%81%EC%9A%A9&quot; aria-label=&quot;필터의 동적 적용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;필터의 동적 적용!&lt;/h3&gt;
&lt;p&gt;위와 비슷하지만 살짝 다른 방법으로 filter도 동적으로 걸 수 있다. 필터는 List 가 아닌 Dict를 활용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# request URL : url/title=wecode최고,content__contain=developer,author=바름  &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#Dict로 받기 때문에 사전에 정해진 필터값들만 받을 수 있다. &lt;/span&gt;

filter_dic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GET
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    filter_dic&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content__contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    filter_dic&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content__contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content__contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;author&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    filter_dic&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;author&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;author&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; ValueError&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SyntaxError&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;token comment&quot;&gt;#각각의 필터마다 받는 값이 정해져 있기 때문에 이에 대해서는 미리 validation 처리를 해놓아야 한다. e.g id에 str인 경우.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filter_dic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;wecode&apos;&lt;/span&gt;최고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content__contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;developer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;author&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;바름&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

filtereded_post1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;filter_dic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#filter_dic에 담긴 값으로 filter를 해준다! &lt;/span&gt;

filtered_post2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;wecode최고&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;content__contain&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;developer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;author&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;바름&apos;&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# ordered_post1과 ordered_post2의 filter된 내용은 같다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 방법은 손이 가는 부분이 많다.  post를 통해 request body로 받으면 더 쉬워진다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# request URL : url/&lt;/span&gt;

data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  filter_data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  	&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;wecode&apos;&lt;/span&gt;최고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content__contain&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;developer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;author&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;바름&apos;&lt;/span&gt;
  	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;filter_data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  	posts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;filter_data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; ValueError&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SyntaxError&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filter_dic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;wecode&apos;&lt;/span&gt;최고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;content__contain&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;develope&lt;span class=&quot;token string&quot;&gt;r&apos;,&apos;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;author&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;바름&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

filtereded_post1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;filter_dic&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#filter_dic에 담긴 값으로 filter를 해준다! &lt;/span&gt;

filtered_post2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;order_by&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;wecode최고&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;content__contain&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;developer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;author&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;바름&apos;&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# ordered_post1과 ordered_post2의 filter된 내용은 같다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;filter 도 Chainning은  가능하나  Sorting처럼  다이나믹하게 활용하기 어렵다. 키워드가 정해져 있기 때문에 filter 키워드를 동적으로 처리하지 못한다.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;posts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;search&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#Search는 Post에 없는 Field다. Post가 가지고 있는 filed가 아니면 정의부터 error를 터뜨린다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL&TEL 20.01.27 ~ 20.02.02]]></title><description><![CDATA[  20.01.27 ~ 20.02.02  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2020-02-08/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2020-02-08/</guid><pubDate>Mon, 03 Feb 2020 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-27 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;템플릿 페이지 열심히 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-28 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프론트 페이지 디테일 보고 수정할 부분 찾아보기&lt;/li&gt;
&lt;li&gt;템플릿 구조 잡기&lt;/li&gt;
&lt;li&gt;api 통신이 필요한부분&lt;/li&gt;
&lt;li&gt;필요하지 않은 부분 분리&lt;/li&gt;
&lt;li&gt;템플릿내 ajax 구현?&lt;/li&gt;
&lt;li&gt;form, template 적용하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-29 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모달 달기 &lt;/li&gt;
&lt;li&gt;프론트 페이지 점검하기&lt;/li&gt;
&lt;li&gt;16:00 데이터 플랫폼 중간점검&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-30 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주간회의&lt;/li&gt;
&lt;li&gt;장고 앱 구조 변경하기&lt;/li&gt;
&lt;li&gt;url 구조 변경하기&lt;/li&gt;
&lt;li&gt;프론트 HTML 구조 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-31 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 기능들 추가 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-01 토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본형 완성 &lt;/li&gt;
&lt;li&gt;추가기능 달기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-02 일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;콜렉터 생성 api 수정이 필요하다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-27&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql json python save&lt;/li&gt;
&lt;li&gt;json 저장시 json으로 만들 필요는 없다. python dict, list 호환 되어서 저장이 된다.&lt;/li&gt;
&lt;li&gt;json.dumps &amp;#x3C;= json.dump&lt;/li&gt;
&lt;li&gt;dumps 틀림&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-28&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;( ) takes 1 positional argument but 2 were given&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;class view 에 as_view 안붙`&lt;/li&gt;
&lt;li&gt;NoReverseMatch template&lt;/li&gt;
&lt;li&gt;경로 이름 잘못함 &lt;/li&gt;
&lt;li&gt;path ( ‘url/&amp;#x3C;int:pk&gt;’, ~~) 일경우 &lt;/li&gt;
&lt;li&gt;{% url “url name splace”, pk = ~~~ %} 가 들어가야 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-29&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uncaught TypeError: Cannot read property ‘fn’ of undefined&lt;/li&gt;
&lt;li&gt;script load 순서 이상하게 짜면 이렇게 됨. jquery 호출이 먼저 되지 않아서 이랬다.&lt;/li&gt;
&lt;li&gt;template path 미설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-30&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘Specifying a namespace in include() without providing an app_name ’&lt;/li&gt;
&lt;li&gt;이는 include함수의 인자 문제로 혹시라도 사이트의 urls.py에 &lt;strong&gt;url(~~, include(r’^sample/’, include(‘sample.urls’, namespace=‘sample’))&lt;/strong&gt; 과 같이 include 함수에 namepspace가 지정되는 경우, Django 2.0 이후에서는 컴파일 에러가 발생하게 된다.
` Project 말고 Application의 urls.py에 app_name = ‘blogs’같이 namespace 의 이름을 직접 지정해 주는 방법도 있다.&lt;/li&gt;
&lt;li&gt;TemplateDoesNotExist&lt;/li&gt;
&lt;li&gt;경로에서 이상이 생기면 다른 프로그램으로 경로를 돌려서 잘 들어가 있는지 확인을 하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-31&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;collectorreport &amp;#x3C;= collector_report&lt;/li&gt;
&lt;li&gt;django generic view, 자동으로 object 특정하는 이름을 모델명 소문자로 한다. (context라고 한다.  class 내에 get_context라는 method가 있다.&lt;/li&gt;
&lt;li&gt;그걸 모르고 2시간 헤맸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-01&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;둘을 잘 구분해야 한다.&lt;/li&gt;
&lt;li&gt;{{ contextdata }}&lt;/li&gt;
&lt;li&gt;{% template tag %}&lt;/li&gt;
&lt;li&gt;view import 안하고 저장 안해서 동작이 안하고 있었다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-02-02&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;선언하고 변수 할당을 안함.&lt;/li&gt;
&lt;li&gt;request .method == “POST” &amp;#x3C;== request .method = “POST” &lt;/li&gt;
&lt;li&gt;generic.view를 활용하면, POST 일때 GET 일때 별도 method가 동작한다.&lt;/li&gt;
&lt;li&gt;내가 커스텀 하려면, 둘을 구분해줘야 한다.&lt;/li&gt;
&lt;li&gt;Html A tag 연결 링크 href &amp;#x3C;= src로 하고 있었다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;django template에서 헤맨 1주일이었다. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[TIL&TEL 20.01.20 ~ 20.01.26]]></title><description><![CDATA[  20.01.20 ~ 20.01.26  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-27/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-27/</guid><pubDate>Mon, 27 Jan 2020 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-20 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB 샘플 데이터 채우기&lt;/li&gt;
&lt;li&gt;프론트 페이지 재구성하기&lt;/li&gt;
&lt;li&gt;17:00 2팀 회의&lt;/li&gt;
&lt;li&gt;가안에 대해서 피드백 받음 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-21 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프론트 페이지 추가&lt;/li&gt;
&lt;li&gt;DB 수정하기&lt;/li&gt;
&lt;li&gt;프로젝트 세팅 협의&lt;/li&gt;
&lt;li&gt;api 명세서 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-22 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장고 프로젝트 앱구조 세팅&lt;/li&gt;
&lt;li&gt;환경 변수 설정&lt;/li&gt;
&lt;li&gt;DB 이식&lt;/li&gt;
&lt;li&gt;DB 만들기&lt;/li&gt;
&lt;li&gt;django 이식&lt;/li&gt;
&lt;li&gt;requiremenents.txt 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-23 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model 작동 테스트&lt;/li&gt;
&lt;li&gt;DB 기본 데이터 입력하기&lt;/li&gt;
&lt;li&gt;작동확인&lt;/li&gt;
&lt;li&gt;readme.md 작성&lt;/li&gt;
&lt;li&gt;테스트 코드 작성 확인&lt;/li&gt;
&lt;li&gt;푸쉬하기전 확인&lt;/li&gt;
&lt;li&gt;깃 서버 등록하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-24 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pytest + model_mommy 적용하기&lt;/li&gt;
&lt;li&gt;API 주소 통합하기&lt;/li&gt;
&lt;li&gt;API views 생성하기&lt;/li&gt;
&lt;li&gt;Test 생성하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-25 토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설연휴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-26 일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;설연휴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-22&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;등록된 app, 쉼표 빼먹어서 에러&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-24&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forbidden (CSRF cookie not set.): /api/channel/&lt;/li&gt;
&lt;li&gt;csrf Middleware 해제 &lt;/li&gt;
&lt;li&gt;장고로 만든 페이지에서 request 한것만  자동으로 걸러줌.&lt;/li&gt;
&lt;li&gt;그러지 않을 경우는 해제해야한다.&lt;/li&gt;
&lt;li&gt;django model field&lt;/li&gt;
&lt;li&gt;AutoField (자동으로 증가하는 값)&lt;/li&gt;
&lt;li&gt;BigAutoField(자동으로 증가하는 Big Integer) &lt;/li&gt;
&lt;li&gt;Id는 명시하지 않으면 자동으로 AutoField 생기고 적용이 된다. &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;:&lt;/code&gt; &amp;#x3C;=&lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;model to python serializing 헷갈림&lt;/li&gt;
&lt;li&gt;instance save 빼먹음&lt;/li&gt;
&lt;li&gt;text로 보내는 거랑 json으로 보내는거랑 다르다.&lt;/li&gt;
&lt;li&gt;news &amp;#x3C;= (‘news’,)&lt;/li&gt;
&lt;li&gt;리스트 형이 아닌 자료에 값을 입력할때 뒤에&lt;code class=&quot;language-text&quot;&gt;,&lt;/code&gt; 붙이니 이상하게 입력하고 있었다.&lt;/li&gt;
&lt;li&gt;‘In order to allow non-dict objects to be serialized set the ’&lt;/li&gt;
&lt;li&gt;TypeError: In order to allow non-dict objects to be serialized set the safe parameter to False.&lt;/li&gt;
&lt;li&gt;Json response, dict형이 아니면 safe=false 해줘야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL&TEL 20.01.13 ~ 20.01.19]]></title><description><![CDATA[  20.01.13 ~ 20.01.19  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-19/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-19/</guid><pubDate>Sun, 19 Jan 2020 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-13 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;백엔드 설정점들 확인하기- 프로젝트 세팅 정리하기&lt;/li&gt;
&lt;li&gt;TWC&lt;/li&gt;
&lt;li&gt;프로젝트 논의 할것 정리&lt;/li&gt;
&lt;li&gt;페이지 내용 바꾼거 함께 검토하기&lt;/li&gt;
&lt;li&gt;모델링 개선 &lt;/li&gt;
&lt;li&gt;위코드 파이썬 스터디&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;내장 자료형 상속&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오버라이드, 오버라이트?&lt;/li&gt;
&lt;li&gt;2개는 완전 다르다. &lt;/li&gt;
&lt;li&gt;오버라이드 메소드를 상속받아 고쳐쓴다.&lt;/li&gt;
&lt;li&gt;오버라이트 저장장치 파일 덮어쓰기&lt;/li&gt;
&lt;li&gt;오버 로딩 vs 오버라이드&lt;/li&gt;
&lt;li&gt;오버로딩: 동일이름 가진 메소드 여러개 만들고 파라미터 개수를 바꾸어서 처리를 가능하게 한다 (자바에서 많이 사용하는 개념)&lt;/li&gt;
&lt;li&gt;오버라이드: 메소드를 상속받아 고쳐쓴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다중상속&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MRO method Resolution order&lt;/li&gt;
&lt;li&gt;상속순서 결정 메서드가 있다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;__mro__&lt;/code&gt; 에 접근하여 수정이 가능하다.&lt;/li&gt;
&lt;li&gt;Mixin&lt;/li&gt;
&lt;li&gt;django 에서 많이 쓰이는 것 다형 상속에서 유용하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-14 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아이디어 회의 &lt;/li&gt;
&lt;li&gt;중요한것, 해야할 것을 명확히 하는것, 시야를 제한하지 않는 것이 아이디어 회의에 많은 도움이 되는 듯.&lt;/li&gt;
&lt;li&gt;프론트 페이지 구성 고치기&lt;/li&gt;
&lt;li&gt;어제 반영 사항 반영&lt;/li&gt;
&lt;li&gt;백엔드 테이블 구조 단순화 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-15 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;백 구조 수정, 로직 관리&lt;/li&gt;
&lt;li&gt;실제 프로세스 과정 시뮬레이션 하기&lt;/li&gt;
&lt;li&gt;시뮬레이션 완성후 보여질 프론트 페이지 수정&lt;/li&gt;
&lt;li&gt;WBS 작성하기&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dynalist.io/d/k7WVIa0evZmsPBKRQCqPxSmz#z=p8YAlDP3hf-8oSfYPr_AQ4DA&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;WBS 작성하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;파이썬 환경설정논의하기&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;재정 확인 및 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-16 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;회사 프로덕트 백엔드 구조 파악하기&lt;/li&gt;
&lt;li&gt;계층구조 이해&lt;/li&gt;
&lt;li&gt;연결관계&lt;/li&gt;
&lt;li&gt;칼럼 표현 확인&lt;/li&gt;
&lt;li&gt;기존 DB 작업 리뉴얼하기&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;주간회의 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-17 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존 DB schema 또 다시 그리기. 건물 짓기에 비유하자면 터를 닦는 작업이다 보니 잘 해놔야 나중이 편하지 &lt;/li&gt;
&lt;li&gt;14:00 다시 정리 회의&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-18 토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키보드 키캡 교환, 풋레스트 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-19 일&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장비 소개 블로그 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-13&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기획을 완성한 다음 상상으로 실제에 가깝게 시운전을 해 볼 것&lt;/li&gt;
&lt;li&gt;기획에서와는 다른 점들을 마주하게 된다&lt;/li&gt;
&lt;li&gt;테스트 케이스 만들기를 가능한 모든 곳에서 시도할것&lt;/li&gt;
&lt;li&gt;True&lt;/li&gt;
&lt;li&gt;False&lt;/li&gt;
&lt;li&gt;Strange&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-15&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;대충하지 말것, 샘플이라도. 아예 보이지 않을 부분이 아니라면 모를까 보여지는 부분이 있다면 허투루 하지 말것. &lt;/li&gt;
&lt;li&gt;DB table 샘플로 그려서 column type 안정했는데 지적받음. 앞으로 관리 잘하렴.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL&TEL 20.01.06 ~ 20.01.12]]></title><description><![CDATA[  20.01.06 ~ 20.01.12  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-12/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-12/</guid><pubDate>Sun, 12 Jan 2020 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-06 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQLAlchemy 사용해서 수집한 자료 DB 저장에 성공&lt;/li&gt;
&lt;li&gt;데이터팀 회의&lt;/li&gt;
&lt;li&gt;지난번 회의로 원하는 방향이 잡혔다고 생각하고 했는데 그게 또 아니었다. 그래서 다시 수정하기로 함.&lt;/li&gt;
&lt;li&gt;20:00 위코드 백엔드 스터디&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ABC class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract Basemenet Class &lt;/li&gt;
&lt;li&gt;하위 클래스들이 특정 메소드들을 상속받도록 강제한다.&lt;/li&gt;
&lt;li&gt;@데코레이터를 사용하여 메서드에 ABC 속성을 부여한다.&lt;/li&gt;
&lt;li&gt;상속을 받지 않으면 선언은 가능하지만 실제 class 호출시 에러가 난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구스타이핑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동일한 메소드를 가진 클래스로 만들어 같은 ABC 시험을 통과하도록 만든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가상서브클래스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;혼동의 우려가 있어서 부모클래스는 하나 이상 잘 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;부모클래스를 수정할 수없으니, 새로운 서브클래스로 상속 받은 것 처럼 작동할 수 있도록 지원한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-07 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;크롤링을 구동하기 위해 설정해야 하는 값들을 지정했다. &lt;/li&gt;
&lt;li&gt;실제 구동 화면 그려보기 - 카카오 오븐 목업 사용&lt;/li&gt;
&lt;li&gt;심플하게 화면 그려보기 편한 서비스다. 이런 것도 만들었네 카카오 감사&lt;/li&gt;
&lt;li&gt;더 잘 그리려면 acture 를 사용해야할듯&lt;/li&gt;
&lt;li&gt;자료 테이블 그려봄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-08 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내가 생각하는 워크플로우 다이어그램으로 그려보기&lt;/li&gt;
&lt;li&gt;팀장님과 얘기하면서 빼 놓은 기능 추가함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-09 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;화면 다시 구성&lt;/li&gt;
&lt;li&gt;DB 짜기 필요한 정보들 다시 접근함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-10 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 추상화, 디테일 살려보기&lt;/li&gt;
&lt;li&gt;세부적으로 다시 작성을 해보다 보니 놓친 부분들을 찾을 수 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-12 일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;노션을 이용한 기록 아카이브 편집&lt;/li&gt;
&lt;li&gt;TILTEL 2주치 작성&lt;/li&gt;
&lt;li&gt;다이널리스트 쌓인 기록들 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;20.01.06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;self.naver&lt;em&gt;pub&lt;/em&gt;date = naver&lt;em&gt;pub&lt;/em&gt;date &amp;#x3C;== self.naver&lt;em&gt;pubdate = naver&lt;/em&gt;pub_date&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt; 빼먹어서 오류 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL&TEL 19.12.30 ~ 20.01.05]]></title><description><![CDATA[  19.12.30 ~ 20.01.05  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-06/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2020-01-06/</guid><pubDate>Mon, 06 Jan 2020 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-30 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;채널별특징 세분화&lt;/li&gt;
&lt;li&gt;서로 다른 채널에서 고정되지 않은 데이터 처리 반영을 고민하였다.&lt;/li&gt;
&lt;li&gt;팀회의 &lt;/li&gt;
&lt;li&gt;회의를 통해서 가는 방향이 좀더 구체화 되었다. 나는 좀더 뒤의 것을 생각하고 있었다. 필요한 것은 앞부분이었다.&lt;/li&gt;
&lt;li&gt;20:20 위코드 백엔드 스터디&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터페이스 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java에서 사용하는건데, 공통적으로 가지게 되는 클래스의 공통부분 같은 느낌이었다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로토콜, 프로토콜 버퍼에 대해 들었다. 뭔지 다시 봐야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-31 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;크롤링 대상을 어떻게 수집할것인가에 대해 고민해보기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-01 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수집한 것 어떻게 저장할지 고민함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DB 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDB &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSV 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로딩 및 저장 매우 불편함&lt;/li&gt;
&lt;li&gt;계속적인 데이터의 처리 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pickle 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;계속해서 커지기 때문에(뉴스데이터가 계속 증가한다.) 파이썬이 감당 할수 없는 사이즈로 커질 수있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위 선택지중 단발성이라면 csv나, pickle이 될 수 있지만 계속해서 저장하고 불러온다면 결국은 DB다.   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-02 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB에 어떻게 저장을 할까 고민함&lt;/li&gt;
&lt;li&gt;SQL alchemy ORM&lt;/li&gt;
&lt;li&gt;PyMySQL로  Query 문 작성하기&lt;/li&gt;
&lt;li&gt;flask - SQL alchemy ORM 사용하기&lt;/li&gt;
&lt;li&gt;Django 내 ORM 사용하기&lt;/li&gt;
&lt;li&gt;내가 할 크롤러가 웹서버 역할을 기대하지는 않으니, 웹서버 프레임웤은 배제, PyMySQL이나 SQL alchemy 둘 중 하나였는데 쿼리문 일일이 작성하는 것도 일이라 생각되어 배제 &lt;/li&gt;
&lt;li&gt;성능 이슈가 되는 부분이 있어서 PyMySQL도 사용하기는 해야한다고 한다&lt;/li&gt;
&lt;li&gt;위코드 4기 후배님들에게 취업선배로서 팁을 전수하는 시간을 가졌다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-03 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL로 DB 생성 오랜만에 해보고,&lt;/li&gt;
&lt;li&gt;SQL alchemy 작동 코드 쳐서 ORM 연결&lt;/li&gt;
&lt;li&gt;19:00 위코드 33기 송년회 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20-01-04 토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운동&lt;/li&gt;
&lt;li&gt;빔위키 다시 도전해보기 했는데 개인 wiki로 Dynalist를 잘 쓰고 있어서 필요성에 의문을…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;20.01.02&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iterm 폰트 사이즈 조절 이상한데서 헤매다가 profile 에서 조절이 가능함을 알게되었다.&lt;/li&gt;
&lt;li&gt;그 전에는 Advanced에 들어가서 조절해야 하는 줄 알고 헤매다가 못찾았다. 거기서는 틀적인 부분을 조절하고, 비주얼 부분은 profiles에서 조절한다.&lt;/li&gt;
&lt;li&gt;Preferences &gt; Profiles &gt; Text &gt; Font  사이즈 조절 &lt;/li&gt;
&lt;li&gt;print != return &lt;/li&gt;
&lt;li&gt;지난번에도 한번 헷갈렸는데 프린트는 나만 보는 부분이다. 프로그램이 인식하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL&TEL 19.12.23 ~ 19.12.29]]></title><description><![CDATA[  19.12.23 ~ 19.12.29  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2019-12-29/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2019-12-29/</guid><pubDate>Sun, 29 Dec 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-23 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 처리 방법 기획&lt;/li&gt;
&lt;li&gt;i.e. &amp;#x26; e.g.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;”i.e.”는 “id est”를 줄인 겁니다. ”Id est”는 영어로 풀어보면 “that is”입니다. 한국어로 옮기면 “즉”이나 “바로”라는 뜻&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예문: I’m going to my favorite place, i.e., Starbucks!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“e.g.”는 라틴어로 “exempli gratia”이고 영어로 풀면 “for the sake of example”이에요. 이것을 한국어로 번역하면 “예를 들면”이나 “예를 들어서”가 제일 비슷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예문: I like chocolaty foods, e.g., cake, candy bars, more cake. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;위코드스터디&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시퀀스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트 처럼 작동하는 클래스 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;슬라이싱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트 슬라이싱 기능 가진 클래스 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;문의하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-24 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부분형 관계모델 스키마 짜기&lt;/li&gt;
&lt;li&gt;수집데이터 저장모델링&lt;/li&gt;
&lt;li&gt;NoSQL (Only SQL) 정리함&lt;/li&gt;
&lt;li&gt;카를로 스트로찌(Carlo Strozzi)는 1998년 표준 SQL 인터페이스를 채용하지 않은 자신의 경량 오픈 소스 관계형 데이터베이스를 &lt;em&gt;NoSQL&lt;/em&gt;이라고 명명&lt;/li&gt;
&lt;li&gt;장점 및 단점, 언제 사용하는게 좋은지 찾아봄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-25 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그 건드리기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-26 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 스트럭처 정리&lt;/li&gt;
&lt;li&gt;개발팀 주간회의 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-27 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL stream set 조사&lt;/li&gt;
&lt;li&gt;고객 수집데이터 히스토리 추적방안 기획&lt;/li&gt;
&lt;li&gt;NoSQL 의 빅데이터 처리 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-28 토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그정리&lt;/li&gt;
&lt;li&gt;운동&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-29 일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;독서&lt;/li&gt;
&lt;li&gt;기획서 다시 검토&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.12.24&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 관련&lt;/li&gt;
&lt;li&gt;내 멋대로 이것 하면 프로젝트에 좋지 않을까 하고 열심히 조사. 상급자분과 얘기해보니 전혀 생각지 않는 옵션. 공부해서 나쁜건 아니었지만, 미리얘기했으면 더 좋았겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.12.25&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git push error&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;	&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push origin develop
git@github.com: Permission denied &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;publickey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.
fatal: Could not &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; from remote repository.

Please &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; sure you have the correct access rights
and the repository exists.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ssh-add ~/.ssh/rumba_private&lt;/code&gt; 로 해결&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ssh agent가 날아가서 그런듯하다고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.12.29&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git merge error&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문제상황&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;current branch를 master branch merge 하는 도중, merge가 안됨. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;merge하는 과정중, master에 있는 파일을 지웠고, 머지가 완료되지 않음.&lt;/li&gt;
&lt;li&gt;merge는 target branch에 current branch를 합치는 작업&lt;/li&gt;
&lt;li&gt;target branch에서 작업이 가능한 부분은 컨플릭트가 나는 부분들이지, 그외 부분은 아니다. 그런데 파일을 통째로 지워버렸으니 에러가 나는게 당연지사&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해결책&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master 에서 파일을 지우고 commit 까지 완료후, current branch로 이동하여 merge 하도록 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[TIL&TEL 19.12.16 ~ 19.12.22]]></title><description><![CDATA[  19.12.16 ~ 19.12.22  배운것, 씨름한것들]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2019-12-22/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2019-12-22/</guid><pubDate>Sun, 22 Dec 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-16 월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 자료정리&lt;/li&gt;
&lt;li&gt;샘플링 데이터 NLP 토크나이저 분리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-17 화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;토크나이저 세트 적용하기 &lt;/li&gt;
&lt;li&gt;라이브러리 오류 리포트 픽스 코드 적용시켜 보기&lt;/li&gt;
&lt;li&gt;sql 세팅 &lt;/li&gt;
&lt;li&gt;MySQL 5.7 &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$brew&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; mysql@5.7 
&lt;span class=&quot;token variable&quot;&gt;$echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;export PATH=&quot;/usr/local/opt/mysql@5.7/bin:&lt;span class=&quot;token environment constant&quot;&gt;$PATH&lt;/span&gt;&quot;&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ~/.zshrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;WorkBench Install&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-18 수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클로바, 카카오 API 서비스 조사&lt;/li&gt;
&lt;li&gt;Microsoft 형태소 분석 서비스 조사&lt;/li&gt;
&lt;li&gt;성수 훅클라이밍 실내암벽 스타트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-19 목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NLP API 서비스들 조사 및 정리&lt;/li&gt;
&lt;li&gt;개발부 주간 회의 및 내년 계획 공유시간&lt;/li&gt;
&lt;li&gt;NLP 관련 조사한 내용 공유하는 시간&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-20 금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구글 NLP 처리 API 시도&lt;/li&gt;
&lt;li&gt;구글은 API 서비스도 key: value 형식으로 처리하지 않고 Oauth 처럼 활용함. &lt;/li&gt;
&lt;li&gt;API 를 활용 함에도 SDK를 깔아야함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-21 토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;훅클라이밍&lt;/li&gt;
&lt;li&gt;블로그 쓰기&lt;/li&gt;
&lt;li&gt;일기 쓰기&lt;/li&gt;
&lt;li&gt;폰트에 따라 상단바 색상 변경 적용 맥쓰는 한국인이라면 매우 유용함&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://johngrib.github.io/wiki/hammerspoon-inputsource-aurora/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://johngrib.github.io/wiki/hammerspoon-inputsource-aurora/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-12-22 일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;책좀 읽다가 끝났다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.12.16&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;따옴표 위치 잘못찍어서 텍스트가 이상하게 인식 되고 있음을 늦게 인지&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;data_file = open(&amp;#39;cafe_full&amp;#39;, mode=&amp;#39;r&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;)&lt;/code&gt; &amp;#x3C;= &lt;code class=&quot;language-text&quot;&gt;data_file = open(&amp;#39;cafe_full, mode=&amp;#39;r&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.12.18&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;httpie url query&lt;/li&gt;
&lt;li&gt;query=={query string}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.12.20&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCP cloud 설정&lt;/li&gt;
&lt;li&gt;설명 3번이 아주 짧게 되어 있어 별거 아니라고 무시하고 진행해서 다른대서 헤매다가 원상 복귀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[위코더들을 위한 개발면접 뽀시기]]></title><description><![CDATA[위코더님들의 취뽀를 빌면서 써봅니다.]]></description><link>https://rumbarum.github.io//posts/Interview_tip_for_wecoder/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/Interview_tip_for_wecoder/</guid><pubDate>Sun, 10 Nov 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt; 나 개발 잘해요!!! &lt;/h2&gt;
&lt;p&gt;저 개발 자신 있어요! &lt;/p&gt;
&lt;p&gt;??? : 정말? 어떻게 증명할건데?&lt;/p&gt;
&lt;p&gt;프로젝트 보세요!!! &lt;/p&gt;
&lt;p&gt;??? : 너가 뭘 한건데?&lt;/p&gt;
&lt;p&gt;이력서 써 놨어요!!!&lt;/p&gt;
&lt;p&gt;??? : 정말 너가 한거 맞어? &lt;/p&gt;
&lt;p&gt;네 맞아요!!! &lt;/p&gt;
&lt;p&gt;??? : 오케이 검증 들어간다. 함마 가져와! &lt;/p&gt;
&lt;h3 id=&quot;이상과-현실&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%83%81%EA%B3%BC-%ED%98%84%EC%8B%A4&quot; aria-label=&quot;이상과 현실 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이상과 현실&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;개발팀에서 우리에게 기대하는 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;무엇을 해야하는 앎&lt;/li&gt;
&lt;li&gt;왜 해야하는 지 앎&lt;/li&gt;
&lt;li&gt;어떻게 해야하는지 앎&lt;/li&gt;
&lt;li&gt;언제 해야하는 지 앎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 우리의 현실&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;무엇을 해야하는지 물어보면서 알거나 막힘&lt;/li&gt;
&lt;li&gt;왜 해야하는지 들어야 알거나 막힘&lt;/li&gt;
&lt;li&gt;어떻게 해야하는지 찾아가면서 하거나 막힘&lt;/li&gt;
&lt;li&gt;언제 해야하는지 부딪히면서 알거나 막힘&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전 3년차 같은 주니어입니다! 라고 말할 수는 없다… 그래도 우리가 내세울 수 있는 포인트들은 있다. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;면접에서-어필할-수-있는-위코더의-강점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%B4%EC%A0%91%EC%97%90%EC%84%9C-%EC%96%B4%ED%95%84%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%9C%84%EC%BD%94%EB%8D%94%EC%9D%98-%EA%B0%95%EC%A0%90&quot; aria-label=&quot;면접에서 어필할 수 있는 위코더의 강점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;면접에서 어필할 수 있는 위코더의 강점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&quot;웹개발-기본기가-탄탄하다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EB%B3%B8%EA%B8%B0%EA%B0%80-%ED%83%84%ED%83%84%ED%95%98%EB%8B%A4&quot; aria-label=&quot;웹개발 기본기가 탄탄하다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹개발 기본기가 탄탄하다.&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;언어 또는 프레임워크에서 사용하는 개념들을 확실히 이해하고 설명이 가능하다.&lt;/li&gt;
&lt;li&gt;REST api? HTTP 통신? SPA? 클라이언트 사이드 렌더링? (이 정도는 다 하실 줄 믿습니다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;h4 id=&quot;실무에서-바로-사용-할-수-있는-기술이-있다-이력서에-적어놓은-항목들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EB%B0%94%EB%A1%9C-%EC%82%AC%EC%9A%A9-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B8%B0%EC%88%A0%EC%9D%B4-%EC%9E%88%EB%8B%A4-%EC%9D%B4%EB%A0%A5%EC%84%9C%EC%97%90-%EC%A0%81%EC%96%B4%EB%86%93%EC%9D%80-%ED%95%AD%EB%AA%A9%EB%93%A4&quot; aria-label=&quot;실무에서 바로 사용 할 수 있는 기술이 있다 이력서에 적어놓은 항목들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실무에서 바로 사용 할 수 있는 기술이 있다. (이력서에 적어놓은 항목들)&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;프로젝트에서 사용한 기술(라이브러리, 모듈 등의 활용)에 대해 아래 내용을 자연스럽게 대답할 수 있으면 완벽하다. &lt;/li&gt;
&lt;li&gt;기술 등장 배경&lt;/li&gt;
&lt;li&gt;동작 원리 &lt;/li&gt;
&lt;li&gt;사용한 것 외의 다른 대안들&lt;/li&gt;
&lt;li&gt;취약점 혹은 부족한점&lt;/li&gt;
&lt;li&gt;대처 방안&lt;/li&gt;
&lt;li&gt;예제)&lt;/li&gt;
&lt;li&gt;프론트) react에서의 콤포넌트 구성, 초기환경 세팅 등&lt;/li&gt;
&lt;li&gt;백) 장고 DB 모델링, bcrypt , jwt 등&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;3-빠른-성장이-가능하다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%B9%A0%EB%A5%B8-%EC%84%B1%EC%9E%A5%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4&quot; aria-label=&quot;3 빠른 성장이 가능하다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 빠른 성장이 가능하다.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;3개월간 내가 만들어낸 것에 자부심을 가지자.&lt;/li&gt;
&lt;li&gt;3개월동안 프로젝트 3개를 해낸것이 아님&lt;/li&gt;
&lt;li&gt;1개월의 교육만으로 2개월 동안 3개의 프로젝트 진행 (기업 협업을 포함해서)&lt;/li&gt;
&lt;li&gt;프로젝트를 할당받은 대로 만든 것이 아닌 기획 부분을 제외하곤 주도적으로 만듦&lt;/li&gt;
&lt;li&gt;개발에 대한 열정/관심을 보여주자.&lt;/li&gt;
&lt;li&gt;2번 연계됨 단순 개념 너머, 기술들에 대해 단편적인 지식이 아닌 맥락적인 이해가 필요&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;어떤 개발자가 되고 싶은지, 또는 어떤 걸 하는 개발자가 되고 싶은지 미리 생각해두면 좋다!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;백엔드 개발자 =&gt; 전세계 사람들이 들어와도 터지지 않는 서버를 만드는 서버개발자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서비스에 대한 열정/관심을 나타내자.&lt;/li&gt;
&lt;li&gt;서비스 분야에 대한 관심이 있으면 내가 질문할 거리가 늘어남. (반짝반짝 빛나는 눈으로 이걸 어떻게 만드셨나요 라고 물어볼때 대답하는 사람도 신난다.) &lt;/li&gt;
&lt;li&gt;자신의 커리어 방향과 회사 스킬셋에서 공통점을 찾고 자신의 성장 = 회사의 성장으로 연결 시킬 수 있는 사람.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[JWT를 알아보자]]></title><description><![CDATA[유저인증을 위한 방법의 하나인 JWT]]></description><link>https://rumbarum.github.io//posts/knowing-JWT/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/knowing-JWT/</guid><pubDate>Tue, 05 Nov 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;JYP 비슷한 엔터테인먼트 회사???&lt;/h2&gt;
&lt;p&gt;는 절대 아닙니다. &lt;/p&gt;
&lt;p&gt;JWT 는 (JSON Web Tokken)의 줄임말이다. &lt;/p&gt;
&lt;p&gt;HTTP 통신은 스테이트리스(stateless) 통신을 한다. 클라이언트의 상태(state)를 서버에 저장하지 않는다(less)라는 말이다. 서버 부담도 없어지고 좋은거 아니야? 라고 볼 수도 있지만 클라이언트가 로그인한 상태인지, 권한이 있는 유저인지 확인을 매 요청 시마다 확인을 해야 한다는 말이다. 이전의 인증 방식은 세션을 사용했다. &lt;/p&gt;
&lt;h3 id=&quot;서버기반-인증세션-old-way&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B2%84%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D%EC%84%B8%EC%85%98-old-way&quot; aria-label=&quot;서버기반 인증세션 old way permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서버기반 인증(세션, Old Way)&lt;/h3&gt;
&lt;p&gt;유저가 로그인을 하게 되면, 서버측에서 유저가 현재 로그인 중이라는 인증정보를 기억하고 있어야 합니다. 그리고 이 정보를 &lt;strong&gt;세션&lt;/strong&gt; 이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;세션을 유지하기 위해서는 여러가지 방법이 사용되는데, 메모리, 디스크, 데이터베이스 시스템에 이를 담곤 합니다. 하지만 이 시스템엔 몇가지 문제점이 있는데, 이 문제점들은 큰 규모의 어플리케이션을 개발하는 것에 있어서 걸림돌이 되곤 했습니다.&lt;/p&gt;
&lt;h3 id=&quot;서버-기반-인증의-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B2%84-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;서버 기반 인증의 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서버 기반 인증의 문제점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;세션을 유지하게 될 때, 로그인중인 유저의 수가 많아진다면 &lt;strong&gt;성능에 무리&lt;/strong&gt;가 가게 됩니다. 이 정보를 메모리에 넣게 된다면 램이 과부화가 되고, 데이터베이스에 넣게 된다면 데이터베이스의 성능에 무리가 가게 됩니다.&lt;/li&gt;
&lt;li&gt;, &lt;strong&gt;서버 확장이 어려워진다&lt;/strong&gt;는 점입니다. 여기서 서버 확장은, 단순히 서버의 사양을 업그레이드 하는 것 말고, 더 많은 트래픽을 감당하기 위하여 여러 프로세스를 돌리거나, 여러 서버 컴퓨터를 추가하여 로드밸런싱을 할때를 의미합니다. 세션을 사용하면서 분산된 시스템을 설계하는건, 세션의 정보가 분산된 프로세스간에 동기화가 되야하므로, 과정이 매우 복잡합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그래서 클라이언트가 어느 상태에 있는지 증명하는 표식(Tokken)을 통해 증명한다. JSON(JavaScrpit Object Notation) 은 정보를 저장하는 포맷을 말한다. JWT는 Claim 기반이라는 방식을 사용하는데, Claim이라는 사용자에 대한 프로퍼티나 속성을 이야기 한다. 토큰자체가 정보를 가지고 있는 방식인데, JWT는 이 Claim을 JSON을 이용해서 정의한다.&lt;/p&gt;
&lt;p&gt;Claim 기반의 토큰은 토큰 자체가 정보를 담음으로써, 토큰을 가지고 서비스나 API 접근을 제어할 때 별도의 작업이 서버에서 필요하지 않으며, 토큰 자체를 서버에서 관리할 필요가 없기 때문에 구현이 상대적으로 단순해진다.&lt;/p&gt;
&lt;p&gt;JSON은 “\n”등 개행문자가 있기 때문에, REST API 호출시 HTTP Header등에 넣기가 매우 불편하다. 그래서, JWT에서는 이 Claim JSON 문자열을 BASE64 인코딩을 통해서 하나의 문자열로 변환한다.&lt;/p&gt;
&lt;h3 id=&quot;토큰-기반-시스템이-제공해주는것은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%86%A0%ED%81%B0-%EA%B8%B0%EB%B0%98-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%B4-%EC%A0%9C%EA%B3%B5%ED%95%B4%EC%A3%BC%EB%8A%94%EA%B2%83%EC%9D%80&quot; aria-label=&quot;토큰 기반 시스템이 제공해주는것은 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;토큰 기반 시스템이 제공해주는것은?&lt;/h3&gt;
&lt;p&gt;토큰 기반 시스템은 stateless 합니다. 이 용어의 의미는 ‘무상태’ 라는 뜻 인데요. 서버시스템측에서 더 이상 유저의 정보를 유지하지 않고, 유저가 회원 인증을 하게 될 때 &lt;strong&gt;토큰&lt;/strong&gt; 을 발급해줌으로서 유저가 자기 자신임을 인증 할 수 있게 해줍니다. 발급이 된 토큰은, 토큰의 유효기간, 그리고 정보를 담고 있으며, 해싱 알고리즘을 통해 인증이 되어있어서 서버에서 검증을 통하여 처음 서버가 발급해주었던 정보가 변조되지 않았음을 보장 해 줄 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;토큰을 사용함으로서, &lt;strong&gt;서버를 확장하게 될 때에 매우 용이해지게 됩니다&lt;/strong&gt;. 서버 시스템이 분산이 되어있어도, 유저는 같은 토큰으로 서버에 요청을 하면 되고, 서버는 그저 그 토큰이 위조되지 않았는지만 검증을 하고 데이터베이스 조회도 할 필요 없이 바로 유저임을 신뢰하고 처리를 하면 되기 때문이죠.&lt;/li&gt;
&lt;li&gt;추가적으로, 토큰을 사용하면 &lt;strong&gt;플랫폼간 권한을 공유&lt;/strong&gt; 할 수 있습니다. 페이스북 / 구글 계정을 통한 소셜 로그인을 구현을 하는데, 이게 가능한 이유도 구글과 페이스북에서 토큰기반인증 시스템을 사용하기 때문입니다. 소셜 로그인 과정에서, 구글/페이스북 플랫폼에서 로그인을 하고, 해당 플랫폼이 토큰을 발급을 해주면 우리의 백엔드 서버에서 이를 통하여 회원정보를 가져오고 우리의 서비스에 계정 생성을 하게 됩니다.&lt;/li&gt;
&lt;li&gt;마지막으로, 토큰 기반 시스템은 &lt;strong&gt;모바일 어플리케이션에서 사용하기에 편해집니다&lt;/strong&gt;. 만약에 세션 기반 인증을 사용한다면, 쿠키를 사용해야 하기 때문에, 쿠키 매니저를 따로 관리해줘야 하지만, 토큰을 사용한다면 웹 요청 API 에 헤더에 넣어서 사용해주면 되기때문에 더이상 쿠키 매니저를 사용 할 필요가 없어집니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;jwt-를-통해-발급된-토큰&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwt-%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%9C%EA%B8%89%EB%90%9C-%ED%86%A0%ED%81%B0&quot; aria-label=&quot;jwt 를 통해 발급된 토큰 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT 를 통해 발급된 토큰&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;header, payload, signature로 구성 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;header &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alg : 사용한 알고리즘(암호화 하지 않았다면 none) &lt;/li&gt;
&lt;li&gt;typ : 어떤 타입인지? &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;payload ( claim 내용 )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;담을 값, 표현이 정해져 있는 값들이 있다.&lt;/li&gt;
&lt;li&gt;iss, sub, aud, exp, nbf, iat, jti&lt;/li&gt;
&lt;li&gt;그 외에 필요한 값들을 넣을 수 있다. &lt;/li&gt;
&lt;li&gt;주의사항&lt;/li&gt;
&lt;li&gt;페이로드정보는 secret key가 없어도 디코드가 가능하다. &lt;/li&gt;
&lt;li&gt;페이로드에 개별 식별 정보를 담을 수 있지만 영향력이 큰 정보는 담지 않는 편이 좋다. (특정 권한등의 표시 )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;signature&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유효한 Token 인지 검증하는 부분이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;jwt의-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jwt%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;jwt의 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT의 문제점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;길이&lt;/li&gt;
&lt;li&gt;Claim에 넣는 데이터와 JWT 토큰의 길이는 비례한다. 클라이언트가 요청할 때마다 헤더에 토큰이 붙어 전송되므로, 네트워크 대역폭 낭비가 심하다.&lt;/li&gt;
&lt;li&gt;한번 발급된 토큰 값의 수정 및 폐기 불가능&lt;/li&gt;
&lt;li&gt;JWT는 토큰 내에 모든 정보를 가지고 있어 한번 발급된 토큰을 서버가 변경할 수 없다. 그렇기 때문에 Reserved Claims에 expiration time을 꼭 지정해주고, refresh token 등을 통해 토큰을 재발급해주어야 한다.&lt;/li&gt;
&lt;li&gt;보안&lt;/li&gt;
&lt;li&gt;기본적으로 Claim을 암호화 하지 않고 단순히 base64 인코딩만을 하기 때문에 토큰이 타인에게 노출되면 사용자 정보가 유출될 수 있다.&lt;/li&gt;
&lt;li&gt;Payload에 권한과 관련된 Claim을 넣어 그 값으로만 사용자를 식별한다면 토큰 값 조작으로 인가되지 않은 접근 권한을 획득할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;보안-고려사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%95%88-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD&quot; aria-label=&quot;보안 고려사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보안 고려사항&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Signature Stripping&lt;/li&gt;
&lt;li&gt;JWT 공격 방법 중 signature를 제거하는 것이 흔하다. 잘못된 검증으로 unsigned 상태인 토큰을 유효한 토큰으로 인식할 수 있으므로 애플리케이션에서 unsigned 토큰을 유효하지 않은 토큰으로 인식하도록 하면 된다.&lt;/li&gt;
&lt;li&gt;CSRF(Cross-Site Request Forgery)&lt;/li&gt;
&lt;li&gt;토큰이 쿠키에 저장되는 경우, short-lived JWT를 이용하거나, origin 검증을 통해 CSRF 공격을 방어할 수 있다. 토큰이 쿠키에 저장되어있지 않으면 CSRF 공격은 불가능하다.&lt;/li&gt;
&lt;li&gt;XSS(Cross-Site Scripting)&lt;/li&gt;
&lt;li&gt;액세스 토큰이 만료되기 전에 유출되면, 리소스에 접근하는 용도로 사용될 수 있다. 클라이언트에서 보낸 데이터를 반드시 sanitize 하고, 쿠키에 대해선 HttpOnly flag를 설정해 스크립트 코드로 접근하는 것을 막아야 한다.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.10.28 ~ 19.11.03 ]]></title><description><![CDATA[ 19.10.28 ~ 19.11.03 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2019-11-04/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2019-11-04/</guid><pubDate>Mon, 04 Nov 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-28월&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim python compile 하기 - 몇몇 플러그인이 컴파일을 요구해서 헤매다가 완료했는데 vim compile이 문제가 아니었다. nvim의 버전이 문제였다.&lt;/li&gt;
&lt;li&gt;@ 15:00 개발자 면접&lt;/li&gt;
&lt;li&gt;인프라에 관련한 질문들을 받았다. &lt;/li&gt;
&lt;li&gt;알고리즘 답변이 있었는데 너무 쉽게 대답했다. 고민의 흔적이 안담김.&lt;/li&gt;
&lt;li&gt;@ 19:30 백엔드 스터디&lt;/li&gt;
&lt;li&gt;일급 객체(로써의) 함수&lt;/li&gt;
&lt;li&gt;고위함수&lt;/li&gt;
&lt;li&gt;ruduce functool로 분리 sum 이 더 낫다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python lamda 다른 언어들에 비해 잘 안쓰게 되는 익명함수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;익명인데 람다라고 이름을 붙여야한다. ?&lt;/li&gt;
&lt;li&gt;다른 곳에서는 익명함수 많이 쓰인다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;콜러블. ( ) 를 붙일 수 있는가.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;def f (a, * , b)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return a,b &lt;/li&gt;
&lt;li&gt;f (1, b=2) b를 kw arg 강제할수 있다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;annotation 주석 느낌, 에러 잡기 위해서는 Lint를 사용했을 때 warning 정도만 가능하다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;operator module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;methodcaller( ) &lt;/li&gt;
&lt;li&gt;class 내장 method 수정 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;functool&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;partial()&lt;/li&gt;
&lt;li&gt;내가 못 고치는 함수를 부분적으로 고칠 수 있다.&lt;/li&gt;
&lt;li&gt;함수형프로그래밍에 유용.&lt;/li&gt;
&lt;li&gt;partialmethod() &lt;/li&gt;
&lt;li&gt;partial과 동일하지만 method에 작동하도록 &lt;/li&gt;
&lt;li&gt;lru_cache( )  속도가 중요한 시스템. 메모리. 잘쓰면 싱글이 멀티보다 빠르다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-29화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@ 11:00 면접 &lt;/li&gt;
&lt;li&gt;어떤 회사인지에 대한 이야기를 많이 들음. 회사 이해가 되어서 좋았음&lt;/li&gt;
&lt;li&gt;파이썬 보다는 어떤 개발자가 되고 싶은지에 대해서 얘기를 많이함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-30수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@ 17:00 면접&lt;/li&gt;
&lt;li&gt;이전의 면접 경험을 바탕으로 잘 하겠거니 하고 갔음&lt;/li&gt;
&lt;li&gt;생각지도 않은 부분에 대해서 질문을 받고 어버버하다가 그 뒤의 것도 내가 얼어서 해결을 제대로 하지 못했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-31목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@ 10:00 온라인 코딩테스트&lt;/li&gt;
&lt;li&gt;테스트 케이스를 너무 단순화 시켜서 해결책을 단순하게 생각함.&lt;/li&gt;
&lt;li&gt;뭔가 찜찜하긴 했는데 검증 안하고 그냥 빨리 제출함.&lt;/li&gt;
&lt;li&gt;제출 해놓고 통과 안되는 테스트 케이스가 생각남.&lt;/li&gt;
&lt;li&gt;끝까지 최선을 다하지 않은게 아쉬움.&lt;/li&gt;
&lt;li&gt;블로그&lt;/li&gt;
&lt;li&gt;지금까지 경험한 면접에 대해서 정리 아웃라인 잡아봄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-11-01금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;작성한 코드를 설명하는 시간이 있어서 소개할 코드 로직은 고치지 않고 스타일 통일함.&lt;/li&gt;
&lt;li&gt;@ 16:00 면접&lt;/li&gt;
&lt;li&gt;대답 못한 부분들이 있었으나 알지 못하는 부분이라 어쩔 수 없었던 부분이었다.&lt;/li&gt;
&lt;li&gt;그 외에는 내가 말 할 수 있는 것들은 다 말했다. &lt;/li&gt;
&lt;li&gt;알고리즘도 이전 면접에서 한번 절은 경험을 바탕으로 안 절고 잘 해결&lt;/li&gt;
&lt;li&gt;면접에 들어온 개발자들과 계속해서 긍정 소통을 이어 나가서 내가 느끼기엔 만족할 면접이었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-11-02토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;면접경험 총 정리하는 블로그 작성 &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.naver.com/skbalm/221695335862&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://blog.naver.com/skbalm/221695335862&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;면접에서 들었던 것 정리 &lt;/li&gt;
&lt;li&gt;jwt의 보안 취약점&lt;/li&gt;
&lt;li&gt;다른 알고리즘 풀이&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-11-03일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;면접 특강을 해볼까 싶은 마음이 들어 개요 짬&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-30&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list.append(ele) &amp;#x3C;= list.add.(ele)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.10.21 ~ 19.10.27 ]]></title><description><![CDATA[ 19.10.21 ~ 19.10.27 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-27/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-27/</guid><pubDate>Sun, 27 Oct 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;19-10-21월&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;면접준비&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이력서 컬러인쇄하기  &lt;/li&gt;
&lt;li&gt;깃헙 코드 복습 &lt;/li&gt;
&lt;li&gt;개발자 첫 면접&lt;/li&gt;
&lt;li&gt;카카오맵에 등록된 주소와 실제 주소가 다를 수 있다는 것을 배웠다. (15분의 지각을 수업료로 지불하고)&lt;/li&gt;
&lt;li&gt;1달에 1권 개발자책읽기라는 모임에 참여&lt;/li&gt;
&lt;li&gt;프로개발자의 규범을 갖춰나가는 것은 헤쳐나가야할 것이 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-22화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django Admin 공식문서 읽어봄 - 기능이 많아서 익히는데 또 한세월. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-23수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오전 11시 면접 - 2번째라 덜 긴장 편안한 분위기에서 진행했던 프로젝트들에 대한 이야기가 오고 가고 회사가 꿈꾸는 미래에 대한 이야기를 들었다. 꿈꾸는 사람은 멋있다.  &lt;/li&gt;
&lt;li&gt;오후 2시 면접 - 기존 진행한 프로젝트 얘기 외에 좀더 발전된 질문들을 들었다. 그리고 대답을 잘 못하긴 했는데 그래도 생각할 거리들을 배웠다.&lt;/li&gt;
&lt;li&gt;오후 5시 면접 - 전화로 진행했는데 이것 저것 많이 물어보셨다. 모르는건 모른다고 대답하고 아는 건 잘 설명했다 . 한 시간뒤에 1차에 합격했다는 메일을 받았다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-24목&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어드민 페이지 만들기를 하는데 주소는 맞게 넣은 것 같은데 안되어서 또 헤맴&lt;/li&gt;
&lt;li&gt;오후 4시 면접 - 코딩에 대해서는 기본적인 부분만 물어보고 대표님이랑 1:1 면접을 진행 했다. 따가운 질문을 들어서 정신이 번쩍. &lt;/li&gt;
&lt;li&gt;동기들이 기업협업 나가서 진행한 프로젝트에 대한 이야기를 들었다. 많은 것들을 진행들을 하셨더라.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-25금&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Admin page 접속성공.&lt;/li&gt;
&lt;li&gt;짐싸고 마무리 하고 티릴리 사무실 나옴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-26토&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그들 작성&lt;/li&gt;
&lt;li&gt;기업협업 마무리&lt;/li&gt;
&lt;li&gt;TIL&amp;#x26;TEL 작성하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-27일&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플라스크 프로젝트 시작&lt;/li&gt;
&lt;li&gt;은우님 책 클론 코딩시작하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-21&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫 면접을 치뤘는데 스스로를 너무 과소평가했다. 끝나고 나니 뒤늦게 하고 싶은 말이 쏟아진다. 비전공자 개발자라서 더 잘 할 수있다고 말하자. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-23&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버 돌리기만 했지 동시 접속 이슈에 대해서는 생각을 해보지 못했다. 생활코딩에서 이고잉님이 말하던 극단의 상황들이 떠오른다. 그런 것도 염두에 두는 개발자가 되어야지. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-24&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기업의 서비스 분야에 관심이 있냐는 질문을 받았다. 대답은 No, 면접 결과도 No였다. 관심사 분야로 가는게 좋겠다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-25&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;admin 서브 도메인으로 바꿨을 경우에는 localhost:8000/admin 이 아닌 admin.localhost:8000/으로 접속해야 한다. &lt;/li&gt;
&lt;li&gt;Django 에서 기본적으로 가지고 있는 Html 폼이 돌아가려면 &lt;code class=&quot;language-text&quot;&gt;python manage.py colletstatic&lt;/code&gt; 을 해줘야 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.10.14 ~ 19.10.20 ]]></title><description><![CDATA[ 19.10.14 ~ 19.10.20 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-21/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-21/</guid><pubDate>Mon, 21 Oct 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19-10-14월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트 코드 작성 - 테스트에 들어갈 인스턴스 자료 입력하는 것 꽤나 귀찮다. &lt;/li&gt;
&lt;li&gt;DATE Mocking - 지난번에 답을 못찾아서 한참 하다가 못했는데 이번엔 바로 검색해서 찾았다. &lt;/li&gt;
&lt;li&gt;S3복습하기 - 알려주는대로 따라하기만 해서 다시 복습&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-15화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트 이미지 설정. &lt;/li&gt;
&lt;li&gt;가짜 이미지 만들기&lt;/li&gt;
&lt;li&gt;storage mocking   &lt;/li&gt;
&lt;li&gt;image partial update 어떻게 되는지 확인 해보기&lt;/li&gt;
&lt;li&gt;인스턴스 복사로직 찾아보기&lt;/li&gt;
&lt;li&gt;pk 값 받으면 그것 가지고 인스턴스 소환, &lt;/li&gt;
&lt;li&gt;값들 불러서 그것 가지고 pk를 지우고 그대로 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-16수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모의 이미지 생성 완료&lt;/li&gt;
&lt;li&gt;s3 storage upload를 mocking 하여 local storage로 전환.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-17목&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s3botostorage local strorage 전환이 아닌 진짜 mocking&lt;/li&gt;
&lt;li&gt;오브젝트 복사 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-18금&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;추가 작업분 테스트에 추가함&lt;/li&gt;
&lt;li&gt;API 추가정리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-19토&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;취업 코딩 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-20일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;면접 대비 공부&lt;/li&gt;
&lt;li&gt;파이썬 기본개념 다시보기&lt;/li&gt;
&lt;li&gt;Django 프로젝트 코드 다시보기 &lt;/li&gt;
&lt;li&gt;DRF 코드 작성한거  다시 보기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.10.14&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 재부팅을 하면 DB도 꺼져서 다시 on을 시켜줘야한다. &lt;/li&gt;
&lt;li&gt;db user에게 db 생성 권한이 없으면 test 못돌림&lt;/li&gt;
&lt;li&gt;마이그레이션 안하고 서버 돌리고 있었음&lt;/li&gt;
&lt;li&gt;fk 걸린 값을 없는 값으로 입력할 시에는 500 error가 나버린다. &lt;/li&gt;
&lt;li&gt;serializer.is&lt;em&gt;valid(raise&lt;/em&gt;exception=True) 를 하면 된다.&lt;/li&gt;
&lt;li&gt;끝에 &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt; 안붙여서 301 에러남&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.10.15&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이미지 tempfile로 만들어서 올렸으나 빈값으로 보내면 에러로 잡음&lt;/li&gt;
&lt;li&gt;세팅을 deburg true시 변경하려고 했으나 그러면 또 세팅에 손이가야해서 안됨&lt;/li&gt;
&lt;li&gt;JsonResponse 안써서 까먹고 있었음 &lt;/li&gt;
&lt;li&gt;JsonResponse에서 dict data가 아닌 list data 전달시에는 safe=False 켜야 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.10.16&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일 가져와서 업로드 할  필요 없음 그냥 파일 만들면 됨 &lt;/li&gt;
&lt;li&gt;이미지 uuid가 파일명 뒤에 붙는것 막을려고 기를 썻는데 그럴 필요가 없음. 특정값에 대해서만 불러와서 비교하면 된다. &lt;/li&gt;
&lt;li&gt;변수 선언 동일하게 처리 안해놔서 결과단에러 발생 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.10.17&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;출력되는 데이터는 serializer에 정의된 대로 나온다.&lt;/li&gt;
&lt;li&gt;asssertEqual 은 순서대로 값이 들어와야 한다.&lt;/li&gt;
&lt;li&gt;주소뒤에 &lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt; 까먹으면 에러가 나온다. &lt;/li&gt;
&lt;li&gt;“sales&lt;em&gt;type”:  2   &amp;#x3C;=  “sales&lt;/em&gt;type:”:  2,&lt;/li&gt;
&lt;li&gt;data type 잘 확인하기.&lt;/li&gt;
&lt;li&gt;update 시 http method = patch &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.10.18&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TypeError: list indices must be integers or slices, not str &lt;/li&gt;
&lt;li&gt;list인덱싱 자리에 정수가 아닌, 다른 숫자가 들어갔을 경우! &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.10.07 ~ 19.10.13]]></title><description><![CDATA[ 19.10.07 ~ 19.10.13 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-14/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-14/</guid><pubDate>Mon, 14 Oct 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-07&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRF 기존 작성된 코드들 읽어보면서 틀잡기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-08&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;읽어도 이해 안가는 부분들 많아서 DRF 공식문서 읽음&lt;/li&gt;
&lt;li&gt;serializer 만세&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-09&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRF 공식 문서 계속 읽음. &lt;/li&gt;
&lt;li&gt;기존 작성된 코드를 보면서 하니 이렇게 써먹는군 하게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-10&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL 설치 - MySQL 쓰다가 쓰려니 적응병이…&lt;/li&gt;
&lt;li&gt;드디어 DRF를 사용해서 제대로 된 코드 작성 시작 &lt;/li&gt;
&lt;li&gt;serializer, viewset 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-11&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;permisson, filtersetclass 작성&lt;/li&gt;
&lt;li&gt;s3 이미지 업로드 도입 &lt;/li&gt;
&lt;li&gt;기본적인 crud 완성 및 PR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-12&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫 PR의 흥겨움에 취해 몰랐던것 다시 되돌아봄. &lt;/li&gt;
&lt;li&gt;파이썬 몰랐던거 찾아봄. &lt;/li&gt;
&lt;li&gt;컴퓨터지식 몰랐던거 찾아봄.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19-10-13&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;왜 자바 말고 파이썬?이라는 질문을 던져봤는데 와닿는 답은 못찾음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.10.07&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그 날짜양식이 2019 인데 내맘대로 19라고 적어 놨다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.10.08&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRF serializer  model필드명 모든필드 ’&lt;em&gt;all&lt;/em&gt;’  &lt;/li&gt;
&lt;li&gt;DRF ‘127.0.0.1 ’  &amp;#x3C;== localhost 지칭할때  not ‘localhost’ &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.10.10&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Httpie formdata 전송에서 에러에러 나서 헤맸는데 JSON 으로 써놓고 있었다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Json&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http -v URL  data:=’{ “name”:“name”, “age”:“age”}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formdata&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http -f URL name=‘name’ age=‘age’&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.09.30 ~ 19.10.06 ]]></title><description><![CDATA[ 19.09.30 ~ 19.10.06 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-07&apos;/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_2019-10-07&apos;/</guid><pubDate>Mon, 07 Oct 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19-09-30월&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어드민 활용&lt;/li&gt;
&lt;li&gt;fomat으로 어드민 뿌려주기&lt;/li&gt;
&lt;li&gt;이미지 변환필터 &lt;/li&gt;
&lt;li&gt;property 활용해서 모델에 없던 값 추가하기&lt;/li&gt;
&lt;li&gt;파일 네임 체인저/파일 타입, 사이즈 체커 &lt;/li&gt;
&lt;li&gt;content_type&lt;/li&gt;
&lt;li&gt;get&lt;em&gt;field&lt;/em&gt;display( ) 세팅한 언어값으로 프린트&lt;/li&gt;
&lt;li&gt;apps config &lt;/li&gt;
&lt;li&gt;프로젝트 모델 추상화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-01화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모델 코드 입력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-02수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRF CRUD 도전 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-03목&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;postgre 실습&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-04금&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기능 정의서 보면서 프로젝트 모델 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-05토&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그&lt;/li&gt;
&lt;li&gt;adwards API docu 수정&lt;/li&gt;
&lt;li&gt;화면 정의서 보면서 프로젝트 모델 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19-10-06일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그&lt;/li&gt;
&lt;li&gt;vim&lt;/li&gt;
&lt;li&gt;~~Ctags 다시깔기 ~~&lt;/li&gt;
&lt;li&gt;프로젝트 모델 1차 완료&lt;/li&gt;
&lt;li&gt;query =&gt; ERD 이식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.10.02&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ImageField에는 max length가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.10.04&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DecimalField &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DecimalField는 import를 해야한다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from decimalfield import DecimalField&lt;/li&gt;
&lt;li&gt;[field] = models.DecimalField(max&lt;em&gt;digits=10, decimal&lt;/em&gt;places=4, defalult =Decimal(‘0.0000’) )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*이번 주에는 모델 설계를 하고, 짝코딩을 하면서 navigator를 하다보니 많이 코딩을 못쳤다라는 변명을 적고보니 비겁한 변명으로 보인다. 그럼에도 배울 점들은 많았는데 게으름에 굴복하지 말자.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.09.23 ~ 19.09.29 ]]></title><description><![CDATA[ 19.09.23 ~ 19.09.29 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-29/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-29/</guid><pubDate>Sun, 29 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.23&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모델수정은 끝날때 까지 끝나지 않는다.&lt;/li&gt;
&lt;li&gt;모델 로직 수정 계속&lt;/li&gt;
&lt;li&gt;유닛 테스트 동작…을 위한 오타 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.24&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;디에러 성공&lt;/li&gt;
&lt;li&gt;One page 이력서 작성&lt;/li&gt;
&lt;li&gt;2번째 PR 피드백 팍팍팍 받음 나름 칭찬을 기대했었는데 아직 멀었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.25&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;피드백 받은 코드 수정 &lt;/li&gt;
&lt;li&gt;유닛 테스트 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.26&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git rebase - 불필요한 커밋은 쪼갤 필요가 없다.&lt;/li&gt;
&lt;li&gt;Docker 실제로 만들어보기! 굳굳&lt;/li&gt;
&lt;li&gt;R.U.D. 코드짜고 유닛 테스트 작성, date test 알아내기 힘드네&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.27&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발자 부트캠프 선택 기준 작성 &lt;/li&gt;
&lt;li&gt;Back Front Integration &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.28&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 문서 수정, 원래 이걸 잘 써놓고 만들려고 했는데 하다보니 문서화는 뒷전이 되기 쉽상이다.&lt;/li&gt;
&lt;li&gt;로켓펀치, 원티드 탐색해봄&lt;/li&gt;
&lt;li&gt;vim에 ctags 장착! 와후! &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.29&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;대한민국 부트캠프비교 글 게시&lt;/li&gt;
&lt;li&gt;wework 짐빼기 쌓아논 짐 많네. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.23&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python list sort&lt;/li&gt;
&lt;li&gt;list.sort( key = key&lt;em&gt;val, reverse=Boolean&lt;/em&gt;val) &lt;/li&gt;
&lt;li&gt;same as sorted(list, key=keyvalue, reverser=Boolean_val) &lt;/li&gt;
&lt;li&gt;** &lt;strong&gt;It does not returrn any value!!&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;and make change on original list! (Mutable)!! &lt;/li&gt;
&lt;li&gt;django&lt;/li&gt;
&lt;li&gt;queryset.delete( ) 에러 발생 -만들지도 않은 모델 삭제해서 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.24&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python error &lt;/li&gt;
&lt;li&gt;or 와 and를 잘못 써 부렀다. 허허&lt;/li&gt;
&lt;li&gt;category&lt;em&gt;id = int(request.GET[‘category&lt;/em&gt;id’]) if ‘category_id’ in request.GET else None &lt;/li&gt;
&lt;li&gt;if 를 뒤에 써서 앞의 값을 특정지어 줄수 있다. 신기방기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.25&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exists( ) &amp;#x3C;== exists 괄호 빼먹으니 에러 계속 터짐.. 괄호없다고는 말 안해준다.&lt;/li&gt;
&lt;li&gt;TypeError: unsupported operand type(s) for ** or pow(): ‘str’ and ‘dict’ &lt;/li&gt;
&lt;li&gt;테스트 posting 값에 True or False 입력시 헷갈려서 틀림 잘 모르겠음 json.dumps로 아예 만들어서 집어 넣는 것도 괜찮다.&lt;/li&gt;
&lt;li&gt;Query Set 처음값이 안나오길래 뭔가 했더니 offset limit 안걸려 있음 &lt;/li&gt;
&lt;li&gt;JsonResponse 리턴을 안하고 있었다. Http response 없다고 뜨는 거였음&lt;/li&gt;
&lt;li&gt;QueryString &lt;/li&gt;
&lt;li&gt;여러개 변수 묶음 ”&amp;#x26;” 로 하는 거 깜빡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.26&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수에 변화를 준다음 변한 변수에 새로 할당을 안함 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;advertisements = advertisements.order_by(‘value’)&lt;/p&gt;
&lt;p&gt;&amp;#x3C;== advertisements.order_by( ‘value’) xxx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;이걸 몰라서 4시간이나 고생고생&lt;/li&gt;
&lt;li&gt;Model.objects 의 값은 마음대로 변경이 가능하다. &lt;/li&gt;
&lt;li&gt;&lt;u&gt;단 저장을 할때 유효한 양식인지 확인을 진행한다. 이때 유효하지 않으면 ValidationError를 내뱉는다.&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.27&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트라이문안에 들어있는 것에서 변수를 할당했는데 다음 코드에서 변수를 못받는 경우가 생긴다. 라고 쓰려고 했는데 내가 다른데서 실수 한것 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.09.16 ~ 19.09.22 ]]></title><description><![CDATA[ 19.09.16 ~ 19.09.22 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-23/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-23/</guid><pubDate>Mon, 23 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.16&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Query 복습 &lt;/li&gt;
&lt;li&gt;DB 설계 계속 수정 수정 수정 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.17&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unittest 세션, Git FLow, Git Rebase 세션 by 은우님 - 테스트 생활화, 한시간이면 될거 미뤄서 일주일 혹은 더나아가 프로젝트 날려먹을 수 도 있으니 테스트를 늘 염두에 두고 있을것&lt;/li&gt;
&lt;li&gt;VIM 유용한 플러그인들 설치, easy-align AWOSOME! &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.18&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1차 프로젝트 정리&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.naver.com/skbalm/221651542337&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://blog.naver.com/skbalm/221651542337&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;자료구조 세션 by 은우님 - 앞서서 고생하신 선배 개발자들의 도움으로 우리가 쉽게 편하게 다양하게 빠르게 서비스를 만들어 나갈 수 있다. ㅎㅎ 10년안에 또 어떻게 바뀌려나 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.19&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1차 프로젝트 코드리뷰! by 은우님 - 나름대로 코드 줄이려고 생각하고 짠건데 고수님 앞에선 아직 멀었다! &lt;/li&gt;
&lt;li&gt;프로젝트 signup view를 하고 있는데 입력하는 정보가 많아지니 디버깅도 어렵다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.20&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른팀 코드 리뷰 by 은우님. - 어제 많이 해주셔서 오늘은 쉽게 쉽게 리뷰 &lt;/li&gt;
&lt;li&gt;계속해서 signup view 디버깅 해결&lt;/li&gt;
&lt;li&gt;API 문서 만들기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.21&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어제이어 API 문서 작성 &lt;/li&gt;
&lt;li&gt;콘텐츠 등록 view 만들기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.22&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어제이어 콘텐츠 등록 view 만들고 테스트 &amp;#x26; 디버깅 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.17&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python list index 범위를 초과할 경우&lt;/li&gt;
&lt;li&gt;IndexError: list index out of range&lt;/li&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;foreign key 참조 최소한만 만들면 된다. &lt;/li&gt;
&lt;li&gt;id 로 걸지 말고, 그냥 인스턴스로 거는편이 좋다. (Id가 꼬이는 경우도 있다.) &lt;/li&gt;
&lt;li&gt;django test 에서 Client, testcase import&lt;/li&gt;
&lt;li&gt;Client like Browser &lt;/li&gt;
&lt;li&gt;url을 통해 view 접근 한다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;참고글&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://koreanblacklee.github.io/posts/python/Django/test2&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://koreanblacklee.github.io/posts/python/Django/test2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.18&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&quot;&quot;.join(list) &amp;#x3C;== arrary.join(&quot;&quot;) 파이썬과 JS의 양식 차이 &lt;/li&gt;
&lt;li&gt;unittest &lt;/li&gt;
&lt;li&gt;setUp 에서 참조하는 모델들은 id 값으로 참조하지 않고 instance를 만들어서 걸어야한다 &lt;/li&gt;
&lt;li&gt;test 함수에서는 그럴 필요 없이 만들어논 인스턴스 id 값만 받으면 된다.&lt;/li&gt;
&lt;li&gt;발생하는 모든 에러를 잡으려면 except Exception as  e 하고 e 확인 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.19&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NoneType’ object has no attribute ‘strip’&lt;/li&gt;
&lt;li&gt;유니크 걸어준 거에 중복값 집어 넣을시 발생하는 에러이기도 하고 &lt;/li&gt;
&lt;li&gt;넣는 정보의 오탈자에서 발생하기도 한다.  &lt;/li&gt;
&lt;li&gt;return no httpresponse&lt;/li&gt;
&lt;li&gt;object 생성 오탈자로 인해 발생 분기점이 깊이 들어가 있어서 유닛 테스트로는 디버깅을 못함. 분리시켜서 꺼내서 디버깅 성공 &lt;/li&gt;
&lt;li&gt;test &amp;#x3C;== tset&lt;/li&gt;
&lt;li&gt;django manytomany 모델 classname_classname으로 생기는줄알았는데 아니었다.&lt;/li&gt;
&lt;li&gt;fiedlname_fieldname으로 생긴다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;↑↑↑ 도 아니다. 그냥 생기지 않는다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그래서 thorough model을 만들어야 하는 것이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.20&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttributeError: ‘NoneType’ object has no attribute ‘strip’ &lt;/li&gt;
&lt;li&gt;update에서 중복값 건드리면 이런 에러가. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.22&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;decimal field(max&lt;em&gt;digit= ?, decimal&lt;/em&gt;places =?)&lt;/li&gt;
&lt;li&gt;max digit은 decimal&lt;em&gt;place 포함이다. 100.22 일경우 max&lt;/em&gt;digit=5, decimal_places=2 이다. &lt;/li&gt;
&lt;li&gt;Get 에 json.loads(request.body)하면 에러가 난다.&lt;/li&gt;
&lt;li&gt;바디 자체가 없으므로.&lt;/li&gt;
&lt;li&gt;‘Model’ object is not subscriptable”&lt;/li&gt;
&lt;li&gt;모델 objects에 objects[“field”] 안먹힌다 안먹혀&lt;/li&gt;
&lt;li&gt;TypeError: int() argument must be a string, a bytes-like object or a number, not ‘NoneType’&lt;/li&gt;
&lt;li&gt;category&lt;em&gt;id = int(request.GET.get(‘category&lt;/em&gt;id’, None)) &lt;/li&gt;
&lt;li&gt;int 로 해놓은 자리에 none을 넣으면 안된다 . 0 도 안된다, ‘0’은 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.09.09 ~ 19.09.15 ]]></title><description><![CDATA[ 19.09.09 ~ 19.09.15 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-15/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-15/</guid><pubDate>Sun, 15 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.09&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1차 프로젝트 페이지 인증 권한 수정함&lt;/li&gt;
&lt;li&gt;2차 프로젝트 기능 설정 및 스키마 그리기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.10&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python keygen &lt;/li&gt;
&lt;li&gt;2차 프로젝트 테이블 그려봄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.11&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTPie 학습&lt;/li&gt;
&lt;li&gt;Django as_view 학습&lt;/li&gt;
&lt;li&gt;Django extension 학습&lt;/li&gt;
&lt;li&gt;2차 프로젝트 모델 만들기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.12&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결제 API 모듈 찾아봄  - 아임포트가 심플하게 사용가능, 결제업체 가입없이 테스트 가능 &lt;/li&gt;
&lt;li&gt;AWS EC2, RDS 개설 복습 &lt;/li&gt;
&lt;li&gt;Neo Vim custom &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.13&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;카톡 API 찾아봄 - 개인적으로 메시지 보내기 활용해보려고 한참을 찾아봤는데 안되는 기능이었다. &lt;/li&gt;
&lt;li&gt;백엔드 프로세스 블로그 읽어봄 (PlanB님 블로그 )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.14&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django class 추상화 연습 - 무턱대고 시도해봤는데 약간의 진전만 있을뿐 코드가 효율적이라고 말하기 어렵다. 그리고 다른곳으로 응용이 가능한지도 의문. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.15&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1차 프로젝트 API document 정리 - 만들면서 같이 깔끔하게 만들어가는게 서로 좋을듯  &lt;/li&gt;
&lt;li&gt;Django Raw Query 학습 - 그냥 ORM 쓰는것 대비 효용을 아직 잘 모르겠다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&quot;190909&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#190909&quot; aria-label=&quot;190909 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;19.09.09&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;[ : ]  &lt;/li&gt;
&lt;li&gt;[ : ] 처음부터 끝까지 &lt;/li&gt;
&lt;li&gt;[ point : ] point부터 끝까지 &lt;/li&gt;
&lt;li&gt;[ : point] 처음부터 point 까지 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;- 가 붙으면 상대 좌표가 끝에서 부터 시작 한다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list indexing 에도 사용이 가능하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB &lt;/li&gt;
&lt;li&gt;테이블 이름 소문자&lt;/li&gt;
&lt;li&gt;DB 접속 암호화 유지&lt;/li&gt;
&lt;li&gt;데이터  &lt;/li&gt;
&lt;li&gt;프론트가 놓칠수 있는 부분 백도 체크해야 한다. 아이디, 이름 공란으로 치면 처리 해야함 &lt;/li&gt;
&lt;li&gt;서버 &lt;/li&gt;
&lt;li&gt;서버 컴퓨터에서 변동 사항 있으면 적용하고 재시작 해야 변경사항 적용됨&lt;/li&gt;
&lt;li&gt;float(‘inf’) = 무한대, 작은값 비교할때 initail value 사용하기 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&quot;190910&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#190910&quot; aria-label=&quot;190910 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;19.09.10&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;python &lt;/li&gt;
&lt;li&gt;print( ‘str’, variable) &amp;#x3C;== print( ‘str’ + variable) JS 에서는 오른쪽이 작동 했는데 python에서는 안된다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;import module vs from module import property&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용할 때에 module.property // property&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&quot;190911&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#190911&quot; aria-label=&quot;190911 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;19.09.11&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;migration 순서가 중요하다. installed app list 에서도 선후 관계가 중요한 역할을 한다. (한번에 여러개의 앱을 동시에 올릴경우) &lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;class-추상화-시도들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#class-%EC%B6%94%EC%83%81%ED%99%94-%EC%8B%9C%EB%8F%84%EB%93%A4&quot; aria-label=&quot;class 추상화 시도들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;class 추상화 시도들&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동일클래스 내에서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수를 self 로 엮는다.&lt;/li&gt;
&lt;li&gt;실패, 메소드에 들어오는 인자를 엮을 수가 없다. &lt;/li&gt;
&lt;li&gt;변수를 선언하는 함수를 선언한다.( 인자 없음, self 안붙임 ) &lt;/li&gt;
&lt;li&gt;실패, 함수가 변수를 선언해도 함수 밖에 있는 메소드가 저장된 변수를 불러오질 못한다. &lt;/li&gt;
&lt;li&gt;변수를 선언하는 함수를 선언한다.( 인자 있음, self 붙임 ) &lt;/li&gt;
&lt;li&gt;실패, 클래스내에 정의된 함수를 동일레벨 함수가 불러오지 못함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클래스 밖에서 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;함수를 선언한다. (메소드 인자 받음, self 붙임 )&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;그나마 작동&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상속내려주는 클래스에서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정의해도 아래로 내려가질 않는다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6 id=&quot;190915&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#190915&quot; aria-label=&quot;190915 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;19.09.15&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;django.db.models.query_utils.InvalidQuery: Raw query must include the primary key&lt;/li&gt;
&lt;li&gt;Model.objects.raw( ) 로 raw Query를 날릴 수 있다. 단 불러온 Query Set 에 ROW의 PK 값이 들어가야지 불러온다. 안그러면 위와 같은 Error 가 난다. 라고 &lt;strong&gt;장고공식문서&lt;/strong&gt;에 써있다.&lt;/li&gt;
&lt;li&gt;There is only one field that you can’t leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An InvalidQuery exception will be raised if you forget to include the primary key.&lt;/li&gt;
&lt;li&gt;Model.objects.raw( ‘SELECT id, something FROM TABLE_NAME WHERE value = somevalue’)&lt;/li&gt;
&lt;li&gt;위의 조건을 통해 나오는 결과는 &lt;/li&gt;
&lt;li&gt;&amp;#x3C;RawQuerySet: SELECT id, something FROM TABLE_NAME WHERE value = somevalue&gt; 이다.&lt;/li&gt;
&lt;li&gt;위에 [0] 을 붙이면 나오는건 Models object (1) 이 나오고, 여기에 .attribute를 하면 다 붙어 나온다. &lt;/li&gt;
&lt;li&gt;그럼? django 처럼 instance 다 붙어 나온거 아니냐고 볼 수 있지만. &lt;/li&gt;
&lt;li&gt;id와 something은 처음 Query 를 통해 붙어 나오고, 다른 attribute들은 추가적인 query를 통해나오게 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;</content:encoded></item><item><title><![CDATA[SSH 키를 알아보자]]></title><description><![CDATA[계정인증을 위한 또하나의 방법]]></description><link>https://rumbarum.github.io//posts/briefViewofSSHkey/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/briefViewofSSHkey/</guid><pubDate>Thu, 12 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;ID, PW가 귀찮은 당신에게&lt;/h2&gt;
다만 컴퓨터는 들고 다니는 당신에게! 
언제어디서나 접속할일이 있는 경우는 ID/PW 쓰시고요, 
필요한 사람만 지정된 장치로 접근해야할 경우는 SSH 쓰시면 됩니다. 
&lt;h3 id=&quot;ssh는-무엇인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ssh%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;ssh는 무엇인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SSH는 무엇인가?&lt;/h3&gt;
&lt;p&gt;SSH 는 Secure Shell의 약자 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;보통 서버 접속 - ID/PW를 사용하여 등록된 유저인지를 판단하고 접속을 시킴 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ID/PW 노출시 누구나 접속이 가능함. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSH - SSH 키를 가지고 있는 (저장소에 저장된 파일) 유저만 접속이 가능함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장치를 가진 사람만 접근이 가능함 &lt;/li&gt;
&lt;li&gt;일반적인 웹 서비스 상황은 ID/ PW 가 유리함 &lt;/li&gt;
&lt;li&gt;개발자가 서버에 자신의 개발 환경으로만 안전하게 접근 가능하는 상황에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ssh-키-어떻게-만드나&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ssh-%ED%82%A4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%8C%EB%93%9C%EB%82%98&quot; aria-label=&quot;ssh 키 어떻게 만드나 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SSH 키 어떻게 만드나?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하나의 쌍을 이루는 2개의 대칭 키 private key 와 public key를 만듦 ( 스트링배열 ) &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Private Key&lt;/li&gt;
&lt;li&gt;비밀키, 노출 되거나 공유하면 안된다. 생성자만 소유&lt;/li&gt;
&lt;li&gt;Public Key&lt;/li&gt;
&lt;li&gt;공용키, 자신의 장치와 접속하고자 하는 서버에 공유해야함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;요기로 가면 더 자세히 나와있다. &lt;a href=&quot;https://opentutorials.org/module/432/3742&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://opentutorials.org/module/432/3742&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ssh-키-어떻게-인가가-작동하는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ssh-%ED%82%A4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9D%B8%EA%B0%80%EA%B0%80-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80&quot; aria-label=&quot;ssh 키 어떻게 인가가 작동하는가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SSH 키 어떻게 인가가 작동하는가?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;SSH 키 생성 (private key, public key가 생김 )&lt;/li&gt;
&lt;li&gt;public key 접속할 서버에 등록 &lt;/li&gt;
&lt;li&gt;서버 접속시 로컬에 저장된 public key서버로 전송  &lt;/li&gt;
&lt;li&gt;서버에 등록된 public 키인지 아닌지 판단하고 등록된 키라면 public key를 통해 암호화한 값을 유저에게 전달&lt;/li&gt;
&lt;li&gt;private key로 전달받은 암호값을 복호화한후 다시 서버에 전송 &lt;/li&gt;
&lt;li&gt;public key가 암호처리한 값과 복호처리한 값이 같으면 유저의 접속을 허용 &lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Query 알아보기]]></title><description><![CDATA[장고는 ORM으로 Query를 몰라도 사용이 가능하게 해준다. 그러면 Query를 알수가 없잖아. 그러니까 Query 도전]]></description><link>https://rumbarum.github.io//posts/briefview_Query/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/briefview_Query/</guid><pubDate>Wed, 11 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt; query ? &lt;/h2&gt;
장고는 QUERY를 몰라도 사용이 가능하도록 ORM (Object Relation Mapping) 을 통해 데이터 베이스를 선택한다. 
&lt;p&gt;왜? DB 에서 사용하는 언어와, 객체지향 프로그래밍의 언어가 서로 다르기 때문에 ORM이 이를 중간에서 매개하는 역할을 한다. &lt;/p&gt;
&lt;p&gt;그래서 개발자는 Query 처리를 위해 Query문법을 배울 필요없이 기존 사용하던 언어로 Query를 사용 할 수 있다. &lt;/p&gt;
&lt;h4 id=&quot;직접-쿼리를-입력하는것-장고를-이용하는것을-비교해보자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%81%EC%A0%91-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EC%9E%85%EB%A0%A5%ED%95%98%EB%8A%94%EA%B2%83-%EC%9E%A5%EA%B3%A0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%8A%94%EA%B2%83%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;직접 쿼리를 입력하는것 장고를 이용하는것을 비교해보자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;직접 쿼리를 입력하는것, 장고를 이용하는것을 비교해보자.&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;email&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;contact&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;한바름&lt;/td&gt;
&lt;td&gt;barum@mail.com&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;010-1234-1234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위 와 같은 데이터를 가진 User 라는 DB table 있다. 기본 데이터 처리 C.R.U.D. (Create, Read, Update, Delete) 를 해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&quot;새로운-user-정보-입력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%88%EB%A1%9C%EC%9A%B4-user-%EC%A0%95%EB%B3%B4-%EC%9E%85%EB%A0%A5&quot; aria-label=&quot;새로운 user 정보 입력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;새로운 User 정보 입력&lt;/strong&gt;&lt;/h6&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;#Query
INSERT INTO User 
VALUES(&amp;#39;한바름2&amp;#39;,&amp;#39;barum2@mail.com&amp;#39;,&amp;#39;22&amp;#39;,&amp;#39;010-2234-2234&amp;#39;); 
#Query문은 &amp;quot;;&amp;quot;으로 마무리를 꼭 해줘야 작동한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#Django&lt;/span&gt;
User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;create&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;한바름2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;barum2@mail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
										age&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;22&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; contact&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;010-2234-2234&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
또는

User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;한바름2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;barum2@mail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;32&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
     	contact&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;010-2234-2234&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&quot;id2-의-name-불러오기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#id2-%EC%9D%98-name-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;id2 의 name 불러오기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;id=2 의 name 불러오기&lt;/h6&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;#Query 
SELECT name FROM USER WHERE id = 2;
==&amp;gt; 한바름2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#Django&lt;/span&gt;
User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 한바름&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&quot;한바름2--한바름3-으로-바꾸기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%9C%EB%B0%94%EB%A6%842--%ED%95%9C%EB%B0%94%EB%A6%843-%EC%9C%BC%EB%A1%9C-%EB%B0%94%EA%BE%B8%EA%B8%B0&quot; aria-label=&quot;한바름2  한바름3 으로 바꾸기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;한바름2 ==&gt; 한바름3 으로 바꾸기&lt;/h6&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;#Query
UPDATE User SET name=한바름3 WHERE id=2;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#Django&lt;/span&gt;
user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;한바름3&apos;&lt;/span&gt;
user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6 id=&quot;한바름3이-들어간-row-지우기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%9C%EB%B0%94%EB%A6%843%EC%9D%B4-%EB%93%A4%EC%96%B4%EA%B0%84-row-%EC%A7%80%EC%9A%B0%EA%B8%B0&quot; aria-label=&quot;한바름3이 들어간 row 지우기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;한바름3이 들어간 row 지우기&lt;/h6&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;#Query
DELETE FROM User WHERE id = 3;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#Django&lt;/span&gt;
User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;delete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;기본 처리는 어렵지 않으나 DB가 가지고 있는 표현이나 계산들을 사용하기 위해서는 별도의 문법을 공부해야만 한다. &lt;/p&gt;
&lt;h4 id=&quot;테이블에서-중복되는-값을-가져올-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90%EC%84%9C-%EC%A4%91%EB%B3%B5%EB%90%98%EB%8A%94-%EA%B0%92%EC%9D%84-%EA%B0%80%EC%A0%B8%EC%98%AC-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;테이블에서 중복되는 값을 가져올 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테이블에서 중복되는 값을 가져올 경우&lt;/h4&gt;
&lt;p&gt;UserHomepage 테이블에서 User의 name을 불러오기 &lt;/p&gt;
&lt;p&gt;User&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;email&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;th&gt;contact&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;한바름&lt;/td&gt;
&lt;td&gt;barum@mail.com&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;010-1234-1234&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;한바름3&lt;/td&gt;
&lt;td&gt;barum2@mail.com&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;010-2234-2234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;UserHomepage&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;user_id&lt;/th&gt;
&lt;th&gt;homepage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Barum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Barum3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;mysql&quot;&gt;&lt;pre class=&quot;language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;#Query
SELECT name
FROM UserHomepage
LEFT JOIN User
ON UserHomepage.user_id = User.id
WHERE User.id = 1;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#Django&lt;/span&gt;
UserHomepage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;select_related&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;user&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[HTTPie 뽀개기]]></title><description><![CDATA[터미널로 서버통신 해보기 어떻게? HTTPie로!]]></description><link>https://rumbarum.github.io//posts/httpieintro/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/httpieintro/</guid><pubDate>Tue, 10 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;터미널로 통신 하는게 중요해?&lt;/h2&gt;
그렇다! 그래서 HTTPie가 있다. 
&lt;p&gt;왜? gui를 지원하지 않는 환경에서는 cli로 작업을 해야하거든! 서버 컴퓨터에서는 우리가 눈으로 보는것 같은 그래픽기반( 눈에 보이는 아이콘, 누를 수 있는 버튼의 존재 )이 아니다. 그래서 오로지 텍스트를 보내고 텍스트를 받을 뿐이다. 그런 텍스트도 잘 맞춘 양식에 맞춰 보여준다면 (텍스트 컬러, 텍스트 배치 등을 통해) 작업의 효율이 증대한다!  &lt;/p&gt;
&lt;p&gt;그래픽 기반의 HTTP 통신 테스트 해볼 수 있는 프로그램으로는 POST MAN 이 있다. (프론트엔드 유저분들 참고 )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTPie 설치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&quot;macos&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#macos&quot; aria-label=&quot;macos permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;macOS&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$brew&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; httpie

&lt;span class=&quot;token variable&quot;&gt;$pip&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --upgrade https://github.com/jakubroztocil/httpie/archive/master.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTPie 사용 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다양한 기능을 제공하는데 지금 까지 많이 사용 하는건 아래 4가지 정도이다. 그 외 다른 사용법은 홈페이지를 참조하면 된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;아이템 타입&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTTP Headers &lt;code class=&quot;language-text&quot;&gt;Name:Value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;헤더 값 입력 &lt;code class=&quot;language-text&quot;&gt;X-API-Token:123&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL parameters &lt;code class=&quot;language-text&quot;&gt;name==value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;URL query string 값 입력    &lt;code class=&quot;language-text&quot;&gt;offset=0 limit =10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Fields &lt;code class=&quot;language-text&quot;&gt;field=value&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;field=@file.txt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Json 형태의 값으로 자동 입력(default). &lt;code class=&quot;language-text&quot;&gt;user_id=ThisisID user_pw=Thisispassword&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Raw JSON fields &lt;code class=&quot;language-text&quot;&gt;field:=json&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;field:=@file.json&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Json 이 아닌 다른  형식( &lt;code class=&quot;language-text&quot;&gt;Boolean&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Number&lt;/code&gt;, nested &lt;code class=&quot;language-text&quot;&gt;Object&lt;/code&gt;, or an &lt;code class=&quot;language-text&quot;&gt;Array&lt;/code&gt;)을 Json으로 보낼때 사용  &lt;code class=&quot;language-text&quot;&gt;number:=100&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;bool:=&amp;quot;true&amp;quot;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;array:=&amp;#39;[&amp;quot;ham&amp;quot;,&amp;quot;spam&amp;quot;]&amp;#39;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;pies:=[1,2,3]&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;argument:=&amp;#39;{&amp;quot;aaa&amp;quot;:&amp;quot;a1&amp;quot;, &amp;quot;bbb&amp;quot;:&amp;quot;b1&amp;quot;}&amp;#39;&lt;/code&gt;  (따옴표 주의 ).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nested object&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reference &lt;a href=&quot;https://httpie.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://httpie.org/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.09.05~ 19.09.08 ]]></title><description><![CDATA[ 19.09.05~ 19.09.08 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19.09.08/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19.09.08/</guid><pubDate>Sun, 08 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.05&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장고 로직 안되는것 수정&lt;/li&gt;
&lt;li&gt;아마존 EC2 강의 및 생성 실습 by 지훈님 - 배경지식을 후루루룩 훑으시면서 가시는데 재밌음  &lt;/li&gt;
&lt;li&gt;프로젝트 자료 채울 사이트 크롤링 - 이 됐다고 안심하고 있었으나…&lt;/li&gt;
&lt;li&gt;DB 입력하는데 에러 나서 고생고생 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.06&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;또 코드수정&lt;/li&gt;
&lt;li&gt;AWS RDS 개통&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.07&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PEP 8 학습&lt;/li&gt;
&lt;li&gt;프로젝트 머지시키기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.08&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB 초기화 및 RDS 연결 &lt;/li&gt;
&lt;li&gt;EC2에 작업물올리기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.05&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;405 메쏘드 에러 -HTTPie는 바디에 정보가 실리면 post 로 인식 &lt;/li&gt;
&lt;li&gt;필드명 변경한뒤에 는 .save( )를 잊으면 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.06&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB에 list를 넣고 싶다면 json 형태의 텍스트로 만들어서 넣어주어야 합니다!!!! 안그럼 에러가 납니다.&lt;/li&gt;
&lt;li&gt;json.dumps(list)로 입력가능&lt;/li&gt;
&lt;li&gt;참고 - &lt;a href=&quot;https://www.experts-exchange.com/questions/28722160/Problem-inserting-PYTHON-list-into-mysql-table.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.experts-exchange.com/questions/28722160/Problem-inserting-PYTHON-list-into-mysql-table.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DB에 텍스트로 입력해서 리스트로 불러오는 걸 만들려고 했는데 안됨.. 텍스트를 불러와서 리스트로 만드는게 더 남.&lt;/li&gt;
&lt;li&gt;char(34) double quote mark on google spreadsheet &lt;/li&gt;
&lt;li&gt;따옴표를 넣어서 편집할때 유용&lt;/li&gt;
&lt;li&gt;values =&gt; queryset에 적용, object는 적용 불가.&lt;/li&gt;
&lt;li&gt;스위치구문은 딕셔너리를 활용해서 처리, elif 사용은 최소화 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.07&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열 순서에 빈값이 생기면, 빈값 자리는 남겨놔야지 받는 사람의 오류가 없다. &lt;/li&gt;
&lt;li&gt;그리고 빈값으로 해놓더라도 잘 들어가는게 맞는지 확인이 필요합니다 .&lt;/li&gt;
&lt;li&gt;A bare except: clause will catch SystemExit and KeyboardInterrupt exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems. If you want to catch all exceptions that signal program errors, useexcept Exception: (bare except is equivalent to except BaseException:).&lt;/li&gt;
&lt;li&gt;Don’t compare boolean values to True or False using ==.&lt;/li&gt;
&lt;li&gt;Yes: if greeting:
No: if greeting == True:
Worse: if greeting is True:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.08&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sql &amp;#x3C;== spl 로 입력함 &lt;/li&gt;
&lt;li&gt;교집합을 잘 생각하자. filter로 나오는 값이 하나인가 여러개인가 &lt;/li&gt;
&lt;li&gt;여러개의 값을 걸고 있는 건 아닌지 잘 봐야 한다. &lt;/li&gt;
&lt;li&gt;get으로 구하는 값이 한개인가 여러개인가 &lt;/li&gt;
&lt;li&gt;SET foreign&lt;em&gt;key&lt;/em&gt;checks = 0; DB에서 foreignkey가 걸려있어 테이블 내역 삭제가 안될경우 관계를 일시적으로 정지시킨다. checks를 check로 적고 왜안되나 하고 있었다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.09.02~ 19.09.04 ]]></title><description><![CDATA[ 19.09.02~ 19.09.04 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-04/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-04/</guid><pubDate>Wed, 04 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.02&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;코드카타 &lt;/li&gt;
&lt;li&gt;1차 프로젝트 중간발표 &lt;/li&gt;
&lt;li&gt;좋아요 기능 구현 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.03&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중복해서 쓸것 같은거 모듈화 시키려고 코드를 짜고 안되서 디버깅을 한참 하다가 전제를 잘못 깔고 시작함을 알게됨&lt;/li&gt;
&lt;li&gt;Model.objects.filter(field=variable) field 값을 바꿀수 있을 줄 알았는데 내 능력으로 바꾸질 못하네.&lt;/li&gt;
&lt;li&gt;바른 전제(= 내가 될거라 생각하고 있는 것이 정말로 되는지 시작부터 확인하고 진행)이 시간을 절약하게 만든다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.04&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;크롤링할 사이트 게시물URL이 일정치 않아 전체적으로 훑어서 게시글 주소를 뽑아오는 크롤링 &lt;/li&gt;
&lt;li&gt;코멘트 기능 로직만들고 뷰 만들기  	&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.02&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;숫자 타입 함수변환해서 나오는건 문자다! &lt;/li&gt;
&lt;li&gt;2진법 전환 , bin(529) = ‘0b1000010001’ &lt;/li&gt;
&lt;li&gt;0b는 어떤 진법을 사용한 키인지 설명해주는 키, 그뒤 의 숫자가 2진번 전환키&lt;/li&gt;
&lt;li&gt;8진법의 경우 oct(529) = ‘0o1021’ 0o 는 8진법 숫자임을 표시&lt;/li&gt;
&lt;li&gt;string.strip ( char ) string 앞뒤로 char 하나씩 지운다. 없으면 안지움. 텍스트 양식 통일시킬때 매우유용함.&lt;/li&gt;
&lt;li&gt;‘someemos’.strip(‘s’) =&gt; omeemo&lt;/li&gt;
&lt;li&gt;‘someemos’.strip(‘st’) =&gt; omeemo ; t가 앞뒤로 없기때문에 omeemo 나옴&lt;/li&gt;
&lt;li&gt;char 가 비어있을 경우 스페이스 삭제 함&lt;/li&gt;
&lt;li&gt;indent 잘못해서 작동안함&lt;/li&gt;
&lt;li&gt;Model.objects. + get vs filter &lt;/li&gt;
&lt;li&gt;get 은 특정 오브젝트를 지정한다.  하나이상, 또는 결과가 없으면 에러 코드 발생, 무조건 하나가 특정이 될때 사용해야 한다. 그리고 에러가 나기 때문에 에러핸들링이 필요하다. &lt;/li&gt;
&lt;li&gt;filter는 오브젝트 모음을 부르기때문에, 결과가 없으면 빈 쿼리 모음이 나온다. exists()와 결합해서 IF 조건문을 활용할 수 있다 .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.03&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try 구문을 쓰고 except를 안걸어주면 에러가 발생한다! 반대로 except 를 걸고 try 가 없어도 에러가 난다. &lt;/li&gt;
&lt;li&gt;cors미들웨어 등록 해논줄 알고 있었는데 까먹음&lt;/li&gt;
&lt;li&gt;TypeError: init () takes 1 positional argument but 2 were given&lt;/li&gt;
&lt;li&gt;클래스뷰에 as_view() 를 빼먹으면 위의 에러가 발생합니다.&lt;/li&gt;
&lt;li&gt;TypeError: ’&gt;=’ not supported between instances of ‘str’ and ‘int’&lt;/li&gt;
&lt;li&gt;pagination 자리 ( Model.objects.all() [?? :?? ] ) ?? 에는 숫자값만이 들어가야하기 때문에 변수로 넣을 경우 int ( ) 싸줘야 정상 작동을 한다. &lt;/li&gt;
&lt;li&gt;query string으로 들어오는 값은 다 str 으로 들어오기 때문에 숫자를 쓸경우 무조건 int() 를 써줘야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.04&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exists( ) &amp;#x3C;== exist() &lt;/li&gt;
&lt;li&gt;JsonResponse 로 결과값 전달시, 데이터는 f “{data}” 하면 안된다. 그냥 그자체로 던져줘야한다. &lt;/li&gt;
&lt;li&gt;↑↑↑ 텍스트로 던져줘도 되는데 그럼 프론트에서 파싱을 또 해야한다. 귀찮아 지는 거지 안되는건 아님. &lt;/li&gt;
&lt;li&gt;테스트서버를 대상폴더가 아닌 데서 켜서 url 설정을 한참 헤맸다. 안되면 처음부터 확인하기 &lt;/li&gt;
&lt;li&gt;django.boolean field는 그 자체로 false/ true 값을 가진다.  Model.objects.Booleanfiedl = True/False &lt;/li&gt;
&lt;li&gt;if 문에 그필드값을 그냥 올리면 된다는 말씀!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.08.29~ 19.09.01 ]]></title><description><![CDATA[ 19.08.29~ 19.09.01 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-01/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19-09-01/</guid><pubDate>Sun, 01 Sep 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;19.08.29&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;인증,인가 세션 by 은우님 - 앞선 선배님들의 수고로 인해 인증과 인가도 쉬워졌다. 소셜 서비스를 통한 로그인도 엄청 어렵지는 않다. &lt;/li&gt;
&lt;li&gt;장고를 통해서 모델 만들기가 아직은 살짝 벅차다. 여러 관계를 얽히는게 복잡하다. 관계형 DB를 구축한다고 해서 모든 Table이 관계형일 필요는 없다. 그렇지 않아도 된다. ManyToMany 모델에 대해 조금 이해가 갔다. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.30&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;머리속으로 그리기만 하다가 오늘은 실제로 만들기를 했다. 만들어보니 또 생각만 하던거랑 다른 부분들이 튀어나온다. 어쨋거나 코딩은 실전이니까. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.31&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;기본 유저 모델을 다시 만드는데 한번 해본거라고 쉽게 생각하고 다시 만들다가 예기치 못한 부분들의 오류로 시간이 꽤 걸렸다. &lt;/li&gt;
&lt;li&gt;첫 PR을 날리고 생각없이 브랜치를 바꿨다가 .gitignore에 작성된 파일이 날라갔다. 하하. 백업의 중요성. 아직도 모르겠는 너란 git&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.09.01&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;장고 다시 만들고 또 만들고 다시 만듦&lt;/li&gt;
&lt;li&gt;워크벤치 사용하는 것 배움 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.08.29&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list의 길이가 변동적이 되면 list[index] 가 에러를 토한다. list index out of range&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;counter
  
&lt;span class=&quot;token comment&quot;&gt;# error    &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
		nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;counter    
  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.08.30&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getattr(url, ‘namespace’, None) is not None&lt;/li&gt;
&lt;li&gt;RecursionError: maximum recursion depth exceeded while calling a Python object&lt;/li&gt;
&lt;li&gt;django urls 가 서로를 참조하면 무한 루프에 갇힌다! &lt;/li&gt;
&lt;li&gt;모델 만들고 migration 안하고 데이터 집어넣음. 당근 에러 &lt;/li&gt;
&lt;li&gt;파이썬 등호 관계 == 기본이다 기본. &lt;/li&gt;
&lt;li&gt;참조하는 table에서 여러개의 값을 가져올 때 여러개의 값을 걸어줄 필요가 없다. 왜냐면 관계를 이미 만들어 놔서, 관계를이용해 여러번 부르면 된다. &lt;/li&gt;
&lt;li&gt;다른앱에 있는 모델을 쓰는데 참조를 안걸었다.&lt;/li&gt;
&lt;li&gt;models.SET_NULL: 외래키가 참조하고 있는 레코드가 삭제되면, 외래키 필드의 값이 null 이 된다. 외래키 필드에 null=True 옵션이 있을 때만 가능함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.08.31&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;raise ValueError(‘Related model %r cannot be resolved’ % self.remote_field.model)&lt;/li&gt;
&lt;li&gt;만들어지지 않은 모델을 참고 하고 있을때 나오는 에러 메시지&lt;/li&gt;
&lt;li&gt;include( “someapp.urls” ) &amp;#x3C;== include ( someapp.urls)&lt;/li&gt;
&lt;li&gt;settings.SECRET_KEY 는 문자열이므로 그냥 써버리면 안된다. f”{ }“으로 싸줘야한다.&lt;/li&gt;
&lt;li&gt;capture url은 view class 내 함수의 인자로 넣어줘야 하는데 안 넣어줬다.&lt;/li&gt;
&lt;li&gt;TypeError: ‘ArticleModel’ object is not subscriptable &lt;/li&gt;
&lt;li&gt;list( model.objects.all( ) )[0] 은 오브젝트 쿼리 하나. 여기서 [‘some’] 아니고 .some 을 써야 some을 부른다.&lt;/li&gt;
&lt;li&gt;역참조 매니저의 이름은 모델이름을 다 소문자로써야한다. &lt;/li&gt;
&lt;li&gt;articlemodel&lt;em&gt;set &amp;#x3C;== articleModel&lt;/em&gt;set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.09.01&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참조 잘못 걸면 머리가 아프다. &lt;/li&gt;
&lt;li&gt;git 에서 같이 안올리려고 파일을 깃 밖으로 복사 했더니, 그 파일이 깃에 실려 있다. &lt;/li&gt;
&lt;li&gt;git에 PR을 요청하고 마스터에서 다른 작업을 하려고 하는데 전파일이 필요하다면? 좋은 방법이 있을 것만 같은데 진행이 안된다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.08.26~19.08.28 ]]></title><description><![CDATA[ 19.08.26~ 19.08.28 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19-08-28/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19-08-28/</guid><pubDate>Wed, 28 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;19.08.26&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Scrapy를 이용한 웹사이트 크롤링 - 하나의 정보만 긁어 오자면 1시간도 안걸려서 긁어 올 수 있다. 사이트 정보의 정리가 잘 되어 있을 경우에는 금방 긁어 올 수 있다. 여러개의 정보를 선택적으로 가져오려면 머리를 좀 써야 한다. &lt;/li&gt;
&lt;li&gt;프로젝트 소스기본환경 설정 - 어려운건 아닌데 꼼꼼하게 해야한다. 그래야 동료들이 중복되는 일을 하는걸 막아 시간낭비를 줄인다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.27&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;데이터베이스에 대한 이해 - 기존에 접해 보지 못했던 분야라 이해가 알듯 말듯 아리송하다. &lt;/li&gt;
&lt;li&gt;크롤링 세션 by 지훈님 - html이란 구조로 이루어져 있는 것이 웹이다 보니, 구조를 통해 정보를 빼오는 것도 쉽다. 모든 데이터가 웹으로 올라오는 순간 모든이에게 열리는 것인데 꼭 좋은건가. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.28&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;DB 세션 by 은우님 - 제대로 다루려면 적응하는데 상당한 시간이 들어갈 것 같다.&lt;/li&gt;
&lt;li&gt;django 를 통한 데이터베이스만들기에 대한 이해 - SQL을 통해 DB 모델을 만드는 것과, 그것을 편하게 만들기 위해 만들어진 django는 또 다르다. 어떻게 보면 사용자 편의성을 증대하는 것이고, 다른 면에서는 성장을 막는것 같기도 하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;19.08.26&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;python index( ) &amp;#x3C;== index[ ]  index( element) 를 사용하면 원하는 element 를 찾을 수 있다. 메소드다 . &lt;/li&gt;
&lt;li&gt;python str slice = str[startposition:endposition] (endposition str is Not included)  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.27&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;module import from 을 안써주었다. from을 안써도 되는게 있긴 있다. 헷갈리진 말자&lt;/li&gt;
&lt;li&gt;max&lt;em&gt;length Max&lt;/em&gt;length로 잘못침 &lt;/li&gt;
&lt;li&gt;django settings language setting &lt;code class=&quot;language-text&quot;&gt;ko-KR&lt;/code&gt; &amp;#x3C;== ko_KR&lt;/li&gt;
&lt;li&gt;python ’ ’ 안에는 ” ” , ” ” 안에는 ’ ’ 로 따옴표 표시한다. &lt;/li&gt;
&lt;li&gt;python shell 에서 django orm 부르기 from app이름.models import 모델 클래스&lt;/li&gt;
&lt;li&gt;scrapy.py는 반응형으로 튀어나온 html을 잡지 못한다. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.28&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;django class 다음  &lt;code class=&quot;language-text&quot;&gt;:&lt;/code&gt; 빼먹음  은근히 자꾸 까먹는다. &lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[관계형 DB 알아보자 ]]></title><description><![CDATA[관계형 DB라는건 뭘까? ]]></description><link>https://rumbarum.github.io//posts/understaidingRDB/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understaidingRDB/</guid><pubDate>Wed, 28 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt; DB 안쓰면 안돼? 응 안돼 &lt;/h2&gt;
- ### **저장 공간 왜 필요할까?**
&lt;ul&gt;
&lt;li&gt;application 종료시 휘발하는 데이터를 영구 보존하기 위해서 저장을 해야한다. &lt;/li&gt;
&lt;li&gt;일반 서식 file (hwp, img, avi ) 물리적인(HDD, SDD, USB, CD  ) 저장 방식&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;그럼-왜-굳이-db&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%BC-%EC%99%9C-%EA%B5%B3%EC%9D%B4-db&quot; aria-label=&quot;그럼 왜 굳이 db permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그럼 왜 굳이? DB&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;접근성 (협업성) &lt;/li&gt;
&lt;li&gt;파일은 data 모델링이 힘들다&lt;/li&gt;
&lt;li&gt;보안성 - DB 유저별 권한 관리가 가능하다. &lt;/li&gt;
&lt;li&gt;공간 효율성 - 중복을 줄여 낭비를 막는다.&lt;/li&gt;
&lt;li&gt;데이터의 탐색 / 업데이트 어려움 &lt;/li&gt;
&lt;li&gt;확장성 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;db-는-api-server와-개념적으로-동일하다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#db-%EB%8A%94-api-server%EC%99%80-%EA%B0%9C%EB%85%90%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9D%BC%ED%95%98%EB%8B%A4&quot; aria-label=&quot;db 는 api server와 개념적으로 동일하다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DB 는 API server와 개념적으로 동일하다&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;앤드포인트가 하나인 api&lt;/li&gt;
&lt;li&gt;SQL (Stcuctured Query Language) DB를 조작하는 언어 &lt;/li&gt;
&lt;li&gt;mySQL - 프로토콜 ( 주고받는 규약, http처럼 다른 관계형 postGre, mariaDB 등도 프로토콜이다.)&lt;/li&gt;
&lt;li&gt;DB 주소 알아야 접근할 수 있다. (통상 쓰는 port 가 있다.)&lt;/li&gt;
&lt;li&gt;FE &amp;#x3C;-&gt; BE &amp;#x3C;-&gt; DB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;db는-어떻게-구성-되는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#db%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%EC%84%B1-%EB%90%98%EB%8A%94%EA%B0%80&quot; aria-label=&quot;db는 어떻게 구성 되는가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DB는 어떻게 구성 되는가?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&quot;table&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#table&quot; aria-label=&quot;table permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Table&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;column 데이터 정보 구획&lt;/li&gt;
&lt;li&gt;row 데이터를 채우는 자료들 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;관계형-db&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EA%B3%84%ED%98%95-db&quot; aria-label=&quot;관계형 db permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관계형 DB&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터의 완전성&lt;/li&gt;
&lt;li&gt;정해진 데이터만 들어갈 수 있도록 한다. &lt;/li&gt;
&lt;li&gt;foreign key 외부에 걸린키 외부 테이블에 있는 데이터만 들어간다. &lt;/li&gt;
&lt;li&gt;대량 변동 가능성을 줄여준다.&lt;/li&gt;
&lt;li&gt;중복을 줄여준다.&lt;/li&gt;
&lt;li&gt;디스크의 효율성 &lt;/li&gt;
&lt;li&gt;ID를 쓰는 이유  &lt;/li&gt;
&lt;li&gt;ID는 변동이 안생긴다. &lt;/li&gt;
&lt;li&gt;ID의 값은 변동 가능하다 &lt;/li&gt;
&lt;li&gt;context 프리, 의미가 없는 값이기 때문에 다른 데이터의 영향을 안받고 독립해 있다.&lt;/li&gt;
&lt;li&gt;소프트 딜릿, 하드딜릿&lt;/li&gt;
&lt;li&gt;하드딜릿 DB에서 실제 삭제 &lt;/li&gt;
&lt;li&gt;소프트딜릿 삭제한것처럼 db에 체크 &lt;/li&gt;
&lt;li&gt;대부분은 소프트로, 하드딜릿 하면 문제가 생김(관계가 맺어져 있기때문이다. )&lt;/li&gt;
&lt;li&gt;법적으로 정해진 사항이 아니면 대부분 소프트 딜릿을 한다. &lt;/li&gt;
&lt;li&gt;Table 간의 관계 표현 &lt;/li&gt;
&lt;li&gt;1 to 1  - 하나의 로우에 다른 테이블의 로우가 1:1로 매칭된다. &lt;/li&gt;
&lt;li&gt;1 to many 하나의 로우에 다른테이블의 여러로우가 매칭된다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;many to many &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러개의 로우가 여러개의 로우들과 관계를 맺고 있다.&lt;/li&gt;
&lt;li&gt;주어진 테이블 만으로는 관계 표현이 불가능하다. &lt;/li&gt;
&lt;li&gt;join 테이블이 필요하다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;트랜잭션&lt;/li&gt;
&lt;li&gt;여러개의 오퍼레이션을 하나의 과정으로 묶는다. &lt;/li&gt;
&lt;li&gt;하나라도 실패하면 실패,&lt;/li&gt;
&lt;li&gt;성공하거나, 실행하기전 상태로 돌아간다. ( commit or rollback)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user - user profile &lt;/li&gt;
&lt;li&gt;delete &amp;#x26; insert 할경우 , delete 만 하고 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;비관계형-db&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EA%B4%80%EA%B3%84%ED%98%95-db&quot; aria-label=&quot;비관계형 db permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;비관계형&lt;/strong&gt; DB&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;저장이 유연하다.&lt;/li&gt;
&lt;li&gt;완전성이 떨어진다. &lt;/li&gt;
&lt;li&gt;데이터 정의(데이터 스키마) 하기 어려운경우에 쓰인다. - 로우데이타, 로그  &lt;/li&gt;
&lt;li&gt;스케일링업 하기 좋다. &lt;/li&gt;
&lt;li&gt;대부분은 정형 데이터이기 때문에 관계형을 많이 쓴다. &lt;/li&gt;
&lt;li&gt;DB의 확장 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;관계형 - 스케일 업 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버 성능 강화 - cpu 성능강화 - 서버를 멈추고 장비를 강화하고 다시 켜야한다. &lt;/li&gt;
&lt;li&gt;훨씬 어렵다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비관계형 - 스케일 아웃 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버 수 10대에서 100대로 늘린다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;궁극적으로 관계형만은 사용할 수 없다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[스크럼을 알아보자 ]]></title><description><![CDATA[소프트웨어 산업 작업 방식인 스크럼을 알아보자 그리고 위코드에서 실습을 해보자. ]]></description><link>https://rumbarum.github.io//posts/understandScrum/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understandScrum/</guid><pubDate>Mon, 26 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;소프트웨어 똑똑한놈 혼자(리눅스? 잡스? 빌게이츠?)만드는거 아니뇨? &lt;/h2&gt;
그렇게 생각하고 있다면 그것은 경기도 오산! 
&lt;ul&gt;
&lt;li&gt;
&lt;h2 id=&quot;스크럼&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%81%AC%EB%9F%BC&quot; aria-label=&quot;스크럼 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스크럼&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;개발 68%는 실패 한다! &lt;/li&gt;
&lt;li&gt;실패의 정의&lt;/li&gt;
&lt;li&gt;목표기능 미달 및 불량&lt;/li&gt;
&lt;li&gt;일정과 비용초과 &lt;/li&gt;
&lt;li&gt;프로젝트 완전 폐기 &lt;/li&gt;
&lt;li&gt;about&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;나무그네 (1960년대) 만화 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최종 프로덕트의 모습은 가변적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;개발 프로젝트 운영은 어렵다&lt;/li&gt;
&lt;li&gt;단순히 시간을 많이 쓴다고 해서 잘 되는게 아니다. &lt;/li&gt;
&lt;li&gt;인류에게 새로운 분야 짧은 역사 - 우리나라 20년, 미국 60년&lt;/li&gt;
&lt;li&gt;관리자들이 적합하지 않지만, 익숙한 방법으로 운영한다.&lt;/li&gt;
&lt;li&gt;미국 가장 효과가 입증되고 널리 쓰이는게 scrum &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1986년 도요타에서 먼저 발명&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 개발 프로젝트운영에 적용됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;기본-철학&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%EC%B2%A0%ED%95%99&quot; aria-label=&quot;기본 철학 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본 철학&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발의 어려움&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발 소요시간 진행 과정 예상 어려움 &lt;/li&gt;
&lt;li&gt;1시간이 1달로 늘어날수도 있다. &lt;/li&gt;
&lt;li&gt;초보부터 시니어도 어려운 개발 일정 계산 &lt;/li&gt;
&lt;li&gt;단순하고 긍정적으로 생각해서 예상하는게 사람들의 특성 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;문제를 없애는게 아니라 문제에서 나오는 피해를 최소화 한다. &lt;/li&gt;
&lt;li&gt;단기간 할수 있는 일을 결정하는건 비교적 예상이 가능하다 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;계획을 짤때 단기적인 계획을 단계를 거쳐 짜는 것이 중요함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이러한 단기 기간을 sprint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sprint 진행방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;planning =&gt; daily standup =&gt; 프로젝트 완료까지 계속&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;진행상황 파악이 쉬워짐 문제나 차질이 있을 때 미리 대처할 수 있음 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;waterfall vs agile &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존 제조업에 쓰이던 waterfall방식에 비해 상황에 유동적으로 접근이 가능하다 (투입된 자원이 많지 않기 때문에) &lt;/li&gt;
&lt;li&gt;MVP를 만들면 된다. 거기서 기능들 더 추가해 나감  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Product Backlog - 이거 다하면 프로젝트 끝남요&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;=&gt; 이번주에 할것 플래닝 미팅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;=&gt; 매일 하는 데일리 스탠딩미팅&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;code-of-conduct-위코드-스크럼-기본-규율&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#code-of-conduct-%EC%9C%84%EC%BD%94%EB%93%9C-%EC%8A%A4%ED%81%AC%EB%9F%BC-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%9C%A8&quot; aria-label=&quot;code of conduct 위코드 스크럼 기본 규율 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code of conduct 위코드 스크럼 기본 규율&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&quot;시간엄수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EA%B0%84%EC%97%84%EC%88%98&quot; aria-label=&quot;시간엄수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시간엄수&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;미팅시간&lt;/li&gt;
&lt;li&gt;맡은일 제시간에 완성&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&quot;책임감&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B1%85%EC%9E%84%EA%B0%90&quot; aria-label=&quot;책임감 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;책임감&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;혼자 할 수 있어빌리티&lt;/li&gt;
&lt;li&gt;자기와 팀 책임감을 진다.&lt;/li&gt;
&lt;li&gt;의존하거나 떠넘기지 말자&lt;/li&gt;
&lt;li&gt;하지 않아도 되는 일도 트라이 그래야 실력이 늘어난다.&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&quot;팀워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%80%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;팀워크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;팀워크&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;모두 성인이니까 기분대로 하지 말자&lt;/li&gt;
&lt;li&gt;서로를 배려하자 팀 분위기를 좋게 하자&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&quot;도전정신&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%A0%84%EC%A0%95%EC%8B%A0&quot; aria-label=&quot;도전정신 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도전정신&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;쉬운것말 할려고 하지말자, 쉬운것만 하면 발전이 없다. 어려운걸해라&lt;/li&gt;
&lt;li&gt;두려워하지 말라. 모르고 어려운건 당연한거다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;프로젝트-프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;프로젝트 프로세스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 프로세스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;플래닝 미팅 - 이번 주간에 처리할 목록 정리 &lt;/li&gt;
&lt;li&gt;kanban board- 처리할 일들의 진행상황을 한눈에 알아보게 정리한 보드 물리적인 포스트잇이나, 트렐로 등의 도구 사용&lt;/li&gt;
&lt;li&gt;Daily Standup Meeting - 짧고 굵게 후딱! 미팅에 시간 오래 쓰지 말자 &lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;어제한거&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;오늘할거&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;딴사람에 의해서 막혀 있는거&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Github - PR &amp;#x26; Code Review =&gt; L G T M!&lt;/li&gt;
&lt;li&gt;브랜치 따고 &lt;/li&gt;
&lt;li&gt;개발 테스트완료&lt;/li&gt;
&lt;li&gt;컨펌!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.08.22~ 19.08.25 ]]></title><description><![CDATA[ 19.08.22~ 19.08.25 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19-08-25/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19-08-25/</guid><pubDate>Sun, 25 Aug 2019 02:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;19.08.22&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;코드카타 - 문제가 못풀때는 갑갑하지만 잘 풀리면 신남&lt;/li&gt;
&lt;li&gt;Git &amp;#x26; Github 세션 by 은우님 - git이 개발자들 일을 얼마나 편하게 만들어준걸까&lt;/li&gt;
&lt;li&gt;위워크제공 프로필 사진 찍기 by anotherSIM studio - 기대중&lt;/li&gt;
&lt;li&gt;팀프로젝트 회의 - 호다닥 진행&lt;/li&gt;
&lt;li&gt;django 복습 - 한번 했던 거 다시 복습하는데 잘 안된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.23&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;코드카타(javascript) - 쉬웠음&lt;/li&gt;
&lt;li&gt;프로젝트 클론대상 분석 - 이뻐보이는데 컨텐츠 위주라 백이 어떻게 해야할지 고민된다.&lt;/li&gt;
&lt;li&gt;django app 수정 - IDE 에디터 없이 vim으로 하려니 오타나고 어디서 틀린지 잡아내는게 일이다.&lt;/li&gt;
&lt;li&gt;django project 다시 수정수정 - 계속 수정하고 있다. &lt;/li&gt;
&lt;li&gt;2기분들 수료식 - 3달동안 고생 많으셨습니다. 저도 계속 고생하겠습니다. &lt;/li&gt;
&lt;li&gt;django 암호화 package argon2 써봄 - 내가 할 일 하나를 누가 또 덜어주셨구나.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.24&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;django Argon2 암호화 패키지  이용해서 비밀번호암호화 작동 테스트 &lt;/li&gt;
&lt;li&gt;django PyJwt 사용자 인증 토큰 발행 패키지 연습 - 사용자 인증도 쉽게 해결&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;19.08.25&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;django - url capture - django 공식문서를 읽는데 번역해서 읽고, 원문읽고 다시 읽고 하니 반쯤 이해가 간다. 편의성이 좋지만, 배워야 할게 그만큼 많다는것이 어렵네&lt;/li&gt;
&lt;li&gt;django - jwt 인증토큰 습득- 다 됐다고 생각하고 테스트해보고 있었는데 안되서 나와의 싸움을 한참하다가 토큰 인증기간이 만료되기도 함을 배웠다. &lt;/li&gt;
&lt;li&gt;HTTPie - 메뉴얼 복습, postman이 좋아보였는데 내가 아직 너를 잘 몰랐구나. 내가 할건 이걸로 다 되는 듯 &lt;/li&gt;
&lt;li&gt;django - Login Decorator 습득 - 블로그에 설명 다해논글이 있어서 금방 배우겠거니 했는데 보면서 진도를 하나씩 나가는데 막히면 어디서 막히는 건지 왜막히는 건지 또 속에서 열불내면서 2기분께 물어가며 또 배웠다. 하하. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.08.22&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array sort시에 배열 기준을 어레이의 n번째 인자로도 sort 할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Array.prototype.sort()&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;mutable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
array&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.08.23&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Js 절대값 Math.abs ()&lt;/li&gt;
&lt;li&gt;Math.max 는 ( .[value1[, value2[, …]]]) 를 인자로 받는다. 원래 array 용으로 나온게 아니다. array에 적용이 되긴 하지만 element가 늘어날 경우 처리가 힘들어질 수 있다. 그럴 경우는 리듀스를 활용하여 최대값을 구하는게 좋을 수도 있다. &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;파일명 오류 urls include() 내에 파일명을 잘못 입력하였다.&lt;/li&gt;
&lt;li&gt;django.db =&gt; django.models로 입력 &lt;/li&gt;
&lt;li&gt;git branch 와 master 의 관계 명확히 하기&lt;/li&gt;
&lt;li&gt;check out mode와 상관없이 진행되는 branch push - push origin master는 마스터로, push origin branch 는 브런치로 간다. master mode 에서 브랜치 push 도 가능하다.&lt;/li&gt;
&lt;li&gt;function 다음에 return 을 까먹었다. &lt;/li&gt;
&lt;li&gt;JsonResponse =&gt; JseonResponse로 입력 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.08.24&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반 코드 뒤에는 : 안 붙인다. 함수, 조건문, 반복문에 붙인다.&lt;/li&gt;
&lt;li&gt;Models.objects.get(something=“something”) 에서 데이터가 없을 경우의 에러는 Index Error 일줄 알았는데 아니다. Models.DoesNotExist 가 맞다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;19.08.25&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;post =&gt; get 사용 -입력되는 request.body가 비어있으면 자동으로 get 으로 간다. &lt;/li&gt;
&lt;li&gt;urls 설정 안해놈 - view 를 수정해도 urls를 설정 안하면 무소용. &lt;/li&gt;
&lt;li&gt;바뀐주소 안침 -으하하하 &lt;/li&gt;
&lt;li&gt;jwt import 안함, 쓰려면 무조건 import&lt;/li&gt;
&lt;li&gt;f” { } ” 따옴표 안에 컬리브라켓 까먹음. 오늘 한 5번 틀린듯 &lt;/li&gt;
&lt;li&gt;jwt로 인코딩한 토큰 뒤에 .decode(‘utf-8’)을 붙여줘야 한다.&lt;/li&gt;
&lt;li&gt;기본 토큰은 b’ ~~~ ’ 으로 나오는데, b’ ’ 은 이게 byte string 이라는것을 알려주는 표시계지, 토큰이 아니다. &lt;/li&gt;
&lt;li&gt;headers =&gt; header로 입력 - request.headers 입니다.&lt;/li&gt;
&lt;li&gt;토큰 유효기간 지나면 디코딩이 안된다!! 그것도 모르고 뭐가 틀렸는지 모니터만 쳐다보고 있었네.&lt;/li&gt;
&lt;li&gt;.. 로 시작하는 상대참조는 같은 앱 안에서만 가능하다. 다른 앱은 절대 경로(앱이름으로 시작)에서 불러와야 한다…&lt;/li&gt;
&lt;li&gt;데코레이터 내부에서 꾸밈받는 함수의 인자에 값을 더하거나 붙일 수 있다!!! &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Argon2를 이용한 유저 PW 암호화 ]]></title><description><![CDATA[암호화 생각보다 어렵지 않아요.]]></description><link>https://rumbarum.github.io//posts/makeUserPasswordEncrypted/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/makeUserPasswordEncrypted/</guid><pubDate>Sat, 24 Aug 2019 02:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt; 유저 PW 암호화 해야되? &lt;/h2&gt;
### **네 해야합니다.**
&lt;ol&gt;
&lt;li&gt;내부 이용자들의 접근방지 (유저의 정보 악용 방지)&lt;/li&gt;
&lt;li&gt;서버 해킹시 비밀번호 유출 방지 (해킹해도 PW가 암호화 되어 있어 알수가 없다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;어려운거-아니야&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EB%A0%A4%EC%9A%B4%EA%B1%B0-%EC%95%84%EB%8B%88%EC%95%BC&quot; aria-label=&quot;어려운거 아니야 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;어려운거 아니야?&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 내가 만들려고 하면 어려울 수도 있습니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 	2. 하지만 남이 만들어 놓은걸 가져다 쓸 수도 있죠!&lt;/p&gt;
&lt;h4 id=&quot;argon2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#argon2&quot; aria-label=&quot;argon2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Argon2&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;기존에 사용하던 암호화가 고오급 기술들의 등장으로 보안 취약점이 드러나며 탄생&lt;/li&gt;
&lt;li&gt;2015년 7월 Password Hassing Competition에서 우승함&lt;/li&gt;
&lt;li&gt;어떤 원리로 작동하는지 자세한 설명은… 생략한다… &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;설치&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;가상환경에 설치를 원하면 가상환경을 키고, 아니라면 그냥 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;m pip install argon2_cffi&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;혹시 문제가 발생한다면, &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://argon2-cffi.readthedocs.io/en/stable/installation.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://argon2-cffi.readthedocs.io/en/stable/installation.html&lt;/a&gt; 를 참고.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;실제 코드 적용하기&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#userdatamanage/views.py  &amp;lt;== 유저 정보 관리 &lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;#user_id = UserA, user_pw = 1234567890 로 회원가입 가정 &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; argon2 &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; PasswordHasher
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; UserdataModel
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;views &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; View
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; JsonResponse 
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; json

ph &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; PasswordHasher&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Signup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;View&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#회원가입 에러는 없는걸로 가정&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
        data&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loads&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token builtin&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ph&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_pw&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#user_pw 암호화&lt;/span&gt;
        user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UserdataModel&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; user_pw&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#암호화된 pw를 db에 저장&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Signup Success&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;View&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loads&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  
            user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UserdataModel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            ph&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;verify&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_pw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_pw&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#db에 저장된 암호와 로그인 입력된 암호 검증&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Login Success&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        exception Userdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DoesNotExist&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;#user_id 가 탐색이 안되는 경우&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Check ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;402&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
         
        exception VerifyMismatchError  &lt;span class=&quot;token comment&quot;&gt;#저장된 pw가 일치하지 않는 경우 &lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Check PW&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;402&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;      &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;작동확인&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; userdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; UserdataModel
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Userdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ger&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user_id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;UserA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;user_pw
&lt;span class=&quot;token string&quot;&gt;&apos;$argon2id$v=19$m=102400,t=2,p=8$7I9cn0C1AgOwz3y+Ezl7hQ$AWYpL4yxd5UDAaXn5T8HMQ&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 되어 있고, 이를 원상복귀(1234567890) 할 수  없다. &lt;/p&gt;
&lt;p&gt;확인하기 위해 입력한 암호에 대해서  true OR exception을 출력할 뿐이다.  &lt;/p&gt;
&lt;p&gt;참조 사이트 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://argon2-cffi.readthedocs.io/en/stable/api.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://argon2-cffi.readthedocs.io/en/stable/api.html&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[백엔드는 왜 나오게 되었을까?]]></title><description><![CDATA[웹개발의 흐름을 보면 백엔드가 어떻게 나왔는지 알 수 있다. ]]></description><link>https://rumbarum.github.io//posts/whatMakesBackend/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/whatMakesBackend/</guid><pubDate>Sat, 24 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt; 프론트앤드는 안보셔도 됩니다. (라고 썼다고 진짜로 가시면 안되요...) &lt;/h2&gt;
### **웹사이트의 발전과정**
&lt;p&gt;&lt;strong&gt;1세대 웹사이트&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;화면에  HTML만 가득하다. HTML을 이쁘게 보이게 하기위한 여러가지 데코(CSS)가 듬뿍. 오로지 보여주기만 한다. &lt;/p&gt;
&lt;p&gt;서버는 저장된 HTML문서(HTML 양식 + 정보) 를 브라우저에서 볼수 있게 전송해준다. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2세대 웹사이트&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML만 보여주던 웹에서, DOM 을 통해 HTML을 조종하며 정지되어 있는 화면이 아니라 사용자의 입력에 따라 다양한 반응을 보여준다.&lt;/p&gt;
&lt;p&gt;서버는 HTML과 HTML을 다루는 스크립트언어(JS), HTML에 담길 데이터를 함께 전송해준다. 화면에 보여지는 부분과 보여지는 부분을 다루기 위한 데이터가 섞여있어 코드가 복잡해진다. 페이지가 바뀔 때 마다 페이지 구성요소를 전부 받아야한다. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3세대 웹사이트(~현재)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;화면에 보여지는 부분의 로직을 처리하는 부분(프론트엔드)과 로직에 필요한 데이터를 전송하는 역할로(백엔드) 분리시켜 처리한다. 보여지는 부분의 로직을 처리하는(프론트엔드) 정보(JS, CSS)를 한번에 불러오고, 로직이 요청하는 정보(JSON)만을 받아와서 처리해서 화면에 보여준다. &lt;/p&gt;
&lt;p&gt;프론트 서버는 프론트 구동을 위한 데이터를 한번만 보내고, 백 서버는 프론트에서 요청하는 정보만을 요청할때에만 보낸다. &lt;/p&gt;
&lt;p&gt;이렇게 함으로 유저는 페이지 이동시마다 전체 페이지 로딩을 기다리는 시간이 줄어들고, 서버에서도 모든 데이터를 다 보낼 필요가 없어져서 효율성이 올라간다. &lt;/p&gt;
&lt;h3 id=&quot;백엔드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C&quot; aria-label=&quot;백엔드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드&lt;/h3&gt;
&lt;p&gt;백엔드라는 존재가 없다가 갑툭튀 는 아니고. 프론트와 백을 같이 다루던 웹 개발에서 전문분야로 특화 되었다고 보면 될것 같다.   &lt;/p&gt;
&lt;p&gt;백엔드는 프론트의 요청에 따라 전송될 데이터 구조, 전송 속도, 안정성 등의 분야를 다루게 되고, 프론트는 불러온 데이터를 바탕을 유저에게 보여지는 면을 다루게 된다. 그러다보니 다루고 배워야 할 것들이 많이 다르다. 그래서 위코드는 풀스택보다는 한쪽을 지향 하는 것을 추천한다. &lt;/p&gt;
&lt;p&gt;참고)  위코드 2기 승재님 블로그&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://koreanblacklee.github.io/posts/webpage&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://koreanblacklee.github.io/posts/webpage&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ Git 간단하게  돌아보기]]></title><description><![CDATA[요즘 개발자라면 빼먹을 수 없는 Git 초스피드 훑어보기 ]]></description><link>https://rumbarum.github.io//posts/roughunderstandingGit/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/roughunderstandingGit/</guid><pubDate>Thu, 22 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt; 모든 버전의 수정내역을 기록한다. &lt;/h2&gt;
- ### Git
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&quot;version-control-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#version-control-system&quot; aria-label=&quot;version control system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;version control system&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;만약 한개의 파일을 수정하고 수정하고 수정한다면, 저장하기로 덮어쓴다.(수정내역은 알수 없고 최종파일만 존재한다. ) 또는 버전별 파일들을 계속 해서 최종의 최종의 최종의 파일까지 만들어 내기도 한다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;한개의 파일이 아니라 다수의 파일을 수정하고, 각각의 수정내역을 필요에 따라 볼수 있게 만들려면? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각각의 버전별 파일을 만들고 수정내역을 스프레드 시트 파일 하나를 만들어서 일일이 저장해놔야할 것이다. &lt;/li&gt;
&lt;li&gt;이 스프레드 시트 파일 역할을 Git이 한다고 한다.(수정날짜, 수정자, 수정한 파일, 수정한코드 등을 자동으로 기록한다. 그리고 어떤 내역들을 변경했는지 commit으로 적어준다. )&lt;/li&gt;
&lt;li&gt;참고로 Git은 리눅스 만든 리눅스토발즈 아저씨가 만들었다. 개발자들 최고 많이 쓰는 2개를 만듦.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;코드 버전별 세이브 포인트를 만들어 놓는셈이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git은 기존의 버전관리 시스템 대비 협업이 쉽다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;모든 파일을 다 다운 받기 때문에 서버 문제가 있어도 기존에 받아놓은 파일로 복구 또는 다른 서버를 통해 관리가 가능하다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;행여나git hub 서버 다운시 다운 받아논 걸로 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;git-hub&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git-hub&quot; aria-label=&quot;git hub permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git hub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Git을 관리하는 서버&lt;/li&gt;
&lt;li&gt;독자시스템 구축 대비 저렴한 비용&lt;/li&gt;
&lt;li&gt;파일 공유 및 코드 리뷰가 쉽다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;git-진행-단계-stage&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git-%EC%A7%84%ED%96%89-%EB%8B%A8%EA%B3%84-stage&quot; aria-label=&quot;git 진행 단계 stage permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GIT 진행 단계 stage&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;local &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; file &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; modified &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Staged &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Committed
&lt;span class=&quot;token parameter&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Github&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;파일을 원하는 대로 modify 하고 Stage 단계로 넘긴다. &lt;/li&gt;
&lt;li&gt;stage 중간단계 commit을 준비한다.  &lt;/li&gt;
&lt;li&gt;commit 하면 수정하기 어렵다.  되도록이면 Stage 전단계에서 끝내는 걸로. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;branch--merge&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#branch--merge&quot; aria-label=&quot;branch  merge permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Branch &amp;#x26; Merge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Branch는 줄기인 Master에서 뻗어나온 가지이다. Master를 베이스로 가지로 나누어 개발자들 끼리 역할을 분담해서 진행한다. 보통 기능 단위로 Branch 따와서 작업을 한다. &lt;/li&gt;
&lt;li&gt;Merge는 처리한 가지를 다시 Master에 합치는 것이다 . &lt;/li&gt;
&lt;li&gt;여러 가지로 뻗어 나간 가지에서 상이한 개발자가 동일한 부분을 수정하게 되면 Merge 과정에서 conflict가 나타나게 된다. 이는 프로그램 버그 발생의 큰 요인이다. &lt;/li&gt;
&lt;li&gt;내가 A 파일 첫 줄에 A++ 라고 쓰고 다른 개발자가 A파일 첫 줄에 A—라고 쓰면 컴퓨터는 A++ 와 A— 둘중에 어느것이 맞는지 판단을  할 수가 없고 개발자에게 이를 수정할 것을 요구한다. 앞선 개발과 에러테스트에 힘을 쏟은 개발자는 여기서 대충 넘어가게 되는 경우가 종종 생긴다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;commit&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#commit&quot; aria-label=&quot;commit permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;commit 메시지 상세하게 남기는게 정석 - django git에서 퍼온 commit 예 &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Fixed #29979, Refs #17337 -- Extracted AutoField field logic into a mixin and refactored AutoFields.

This reduces duplication by allowing AutoField, BigAutoField and
SmallAutoField to inherit from IntegerField, BigIntegerField and
SmallIntegerField respectively. Doing so also allows for enabling the
max_length warning check and minimum/maximum value validation for auto
fields, as well as providing a mixin that can be used for other possible
future auto field types such as a theoretical UUIDAutoField.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;commit 수정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push 하기 전에는 가능하다. &lt;/li&gt;
&lt;li&gt;만약 commit 한 버전이 공유가 되면 바꾸지 말아야한다. 다른 개발자가 내가 공유한 것을 바탕으로 빌드하던건이 망가지게 될 가능성이 생긴다. &lt;/li&gt;
&lt;li&gt;history&lt;/li&gt;
&lt;li&gt;push 됬을때 commit 시간이 마스터 파일에 박힌다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;유용한-git-tool&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%EC%9A%A9%ED%95%9C-git-tool&quot; aria-label=&quot;유용한 git tool permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유용한 Git Tool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&quot;tig-text-mode-interface-for-git&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tig-text-mode-interface-for-git&quot; aria-label=&quot;tig text mode interface for git permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tig: text-mode interface for Git&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;Git 기록들을 보기 쉽게 만들어준다. (git log 들)&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;diff-so-fancy&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#diff-so-fancy&quot; aria-label=&quot;diff so fancy permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;diff-so-fancy&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;diff는 파일이나 폴더들의 수정사항들을 저장해놓는 것&lt;/li&gt;
&lt;li&gt;컴퓨터가 읽을 수 있는 형태로만 적힌 것을 사람이 읽기 쉽도록 표현해서 보여준다. &lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;git-extra&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git-extra&quot; aria-label=&quot;git extra permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git Extra&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;기본 깃 기능에 추가 기능들 구현( git summary)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[HTTP, RESTful API 이해하기]]></title><description><![CDATA[Http 와 RESTful API 간단하게 톺아보자 ]]></description><link>https://rumbarum.github.io//posts/understaingHttpandRestfulAPI/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understaingHttpandRestfulAPI/</guid><pubDate>Wed, 21 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 style=&quot;color:rgb(9, 136, 104)&quot;&gt;통신은 계속해서 발전한다.&lt;/h3&gt;
## Http? 
&lt;p&gt;Hyper Text Transfer Protocol  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hyper Text (html)을 보내기 위한 통신 규약! &lt;/li&gt;
&lt;li&gt;비슷한 규약으로 STP, FTP 등이 있다. &lt;/li&gt;
&lt;li&gt;웹서비스는 Http 기반으로 발전했다.  그래서 Http로 다른 데이터를 주고 받는다. &lt;/li&gt;
&lt;li&gt;클라이언트와 서버가 서로 데이터를 주고 받는데 Http 프로토콜에 맞춰서 보낸다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;http의-핵심&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http%EC%9D%98-%ED%95%B5%EC%8B%AC&quot; aria-label=&quot;http의 핵심 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Http의 핵심&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&quot;http-request-and-response로-나뉘어-있다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-request-and-response%EB%A1%9C-%EB%82%98%EB%89%98%EC%96%B4-%EC%9E%88%EB%8B%A4&quot; aria-label=&quot;http request and response로 나뉘어 있다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;http request and response로 나뉘어 있다.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요청을 하면 무조건 응답이 온다. 왜냐 그래야 통신이 되고 있는건지 아니까. 그렇지 않으면 통신이 되는건지 알 수 가 없다.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;stateless-무상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#stateless-%EB%AC%B4%EC%83%81%ED%83%9C&quot; aria-label=&quot;stateless 무상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;stateless 무상태&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다른 통신 존재를 모른다.(이 통신의 이전, 이후 통신과 전혀 관련이 없다. ) &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;처음통신에서 유저가  로그인 했는데 두번재 통신에서 로그인 유저인 줄을 모른다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그래서 이런 경우 요청에 필요한 정보를 같이 request에 첨부해서 보내야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;request--response&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#request--response&quot; aria-label=&quot;request  response permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Request &amp;#x26; Response&lt;/h2&gt;
&lt;h4 id=&quot;request-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#request-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;request 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Request 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;start line - Req 시작부 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mothod : request가 의도한 action&lt;/li&gt;
&lt;li&gt;target :  상세주소 (도메인의 상세 주소 보통 자동 처리 해준다.&lt;/li&gt;
&lt;li&gt;version : http 의 버전을 표시한다. 보통 1.1 또는 2.0 (3.0 까지 나와있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;headers -Req 부가설명 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host : 메인서버 도메인   &lt;/li&gt;
&lt;li&gt;user agent : 클라이언트에서 가지고 있는 정보, 크롬? 사파리? 랩탑? 아이패드? &lt;/li&gt;
&lt;li&gt;Accept : 받을 수 있는 응답 타입 &lt;/li&gt;
&lt;li&gt;connection : 서버와의 연결을 어떻게 할 것인지 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;초기에 조금 시간이 걸린다. (컴터 입장에서)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;보통은 살려둔다(keep alive)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;content type : 보내는 콘텐츠 유형&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content length : 콘텐츠 길이&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;body - 서버측에 보내는 내용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서버에서 자료를 받기만 하는 경우 비어있는 경우가 있다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버에 정보를 올려야 할 경우 양식에 맞춰서 작성해서 올린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;response&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#response&quot; aria-label=&quot;response permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Response&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;status line - 요청에 대한 상태를 보내기 때문에 status line으로 시작&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http버젼 &lt;/li&gt;
&lt;li&gt;status code : 응답 상태를 나타내는 숫자로 되어 있는 코드&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자주쓰는 status code &amp;#x26; status text : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 - OK 통신이 잘 되었다. &lt;/li&gt;
&lt;li&gt;301 - Moved Permanently 요청한 주소가 변경되었다.&lt;/li&gt;
&lt;li&gt;400 - Bad Request 잘못된 정보를 넣었다.( 한글이름에 영문을 넣었다.)&lt;/li&gt;
&lt;li&gt;401 - Unauthorized 인증을 통과하지 않았다.(비로그인)&lt;/li&gt;
&lt;li&gt;403 - Forbidden 권한이 없다.(어드민만 이용 가능한 곳에 접속)&lt;/li&gt;
&lt;li&gt;404 - not found 없는주소&lt;/li&gt;
&lt;li&gt;500 - Internal Server Error 서버에러&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;header :  useragent 대신 server 헤더가 사용 그밖엔 유저와 동일하다.&lt;/li&gt;
&lt;li&gt;body : 클라에서 요청한 것에 따라  해당 내용을 담아서 보낸다. 내용이 없는 경우도 있다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;http-method---클라이언트에서-서버에-요청하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#http-method---%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%84%9C%EB%B2%84%EC%97%90-%EC%9A%94%EC%B2%AD%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;http method   클라이언트에서 서버에 요청하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP method - 클라이언트에서 서버에 요청하는 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발자는 상황에 따라 서버에 어떤 요청을 보낼 것인가 결정해야 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt; : 데이터를 받기만 한다. &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt; : 서버에 내가 주고 싶은 정보를 줄수 있다. &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;OPTIONS&lt;/code&gt; : URI 에서 가능한 method를 가져온다. cors 문제 때문에 많이 쓴다. &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DEL&lt;/code&gt; : 데이터 삭제  &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt;를 통해서도 삭제요청을 할 수 있지만 &lt;code class=&quot;language-text&quot;&gt;DEL&lt;/code&gt; 쓰는게 더 깔끔해진다.&lt;/li&gt;
&lt;li&gt;그 외 더 많은 method가 있지만, 주로 쓰는건 &lt;code class=&quot;language-text&quot;&gt;GET, POST, DEL&lt;/code&gt;왜냐구? 편리성 증대. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;restful-api---representational-state-transfer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#restful-api---representational-state-transfer&quot; aria-label=&quot;restful api   representational state transfer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RESTful API - REpresentational State Transfer&lt;/h2&gt;
&lt;p&gt;아래의 4가지를 처리하는 endpoint를 만든다면?? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든유저정보&lt;/li&gt;
&lt;li&gt;1명 유저 정보&lt;/li&gt;
&lt;li&gt;유저생성&lt;/li&gt;
&lt;li&gt;유저삭제 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;내가 생각했던 답변은 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host/getAllUserInfo&lt;/li&gt;
&lt;li&gt;host/getUserInfo/number&lt;/li&gt;
&lt;li&gt;host/createUser&lt;/li&gt;
&lt;li&gt;host/deleteUser/number&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;restful-api-로-하면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#restful-api-%EB%A1%9C-%ED%95%98%EB%A9%B4&quot; aria-label=&quot;restful api 로 하면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Restful Api 로 하면&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GET   host/user&lt;/li&gt;
&lt;li&gt;GET   host/user/usernumber&lt;/li&gt;
&lt;li&gt;POST host/user&lt;/li&gt;
&lt;li&gt;DEL    host/user/usernumber &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;결국&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리소스(HTTP URI로 정의된)를 어떻게 한다(HTTP Method + Payload)를 구조적으로 깔끔하게 표현하는것.&lt;/li&gt;
&lt;li&gt;쉽게말해 api 주소 짜는 패턴 &lt;/li&gt;
&lt;li&gt;동사는 method 로만&lt;/li&gt;
&lt;li&gt;해당 명사는 주소.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;장점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h4&gt;
&lt;p&gt;​		RESTful API는 그 자체만으로도 API의 목적이 쉽게 이해가 된다.&lt;/p&gt;
&lt;h4 id=&quot;주의사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD&quot; aria-label=&quot;주의사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주의사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;/&lt;/code&gt;(슬래시)는 계층 관계를 나타낼때 사용된다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt;(underscore)는 주로 포함하지않고 또한 영어 대문자보다 소문자를 쓴다. 그리고 너무 긴 단어는 잘 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;URI는 명사를 사용한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.08.19~ 19.08.21 ]]></title><description><![CDATA[ 19.08.19~ 19.08.21 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_19.08.21/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_19.08.21/</guid><pubDate>Wed, 21 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.08.19&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 앤드포인트 view 수정 &lt;/li&gt;
&lt;li&gt;알고리즘 면접법 세션 by 은우님 - 문제 접근, 면접관과의  커뮤니케이션 중요 &lt;/li&gt;
&lt;li&gt;웹크롤링 기본 세션 by 지훈님 - 잘 모르는 사람도 쓰기 쉽게 잘 만들어 논거 같다.&lt;/li&gt;
&lt;li&gt;API 앤드포인트 수정 및 작동 확인 - 기능을 뭉터기로 뭉처노니 머리가  아팠는데 앤드포인트 나눠서 기능을 나누니 세상편하네- 라고 생각을 했는데 잘못된 선택이었다.&lt;/li&gt;
&lt;li&gt;API 문서 작성 - 머리로는 정리가 잘 되는것 같은데 써보려니 잘 정리하기가 쉽지 않다. 정리하는 습관 미리 들여야할것 같다. 나만의 프레임이 필요할듯 .&lt;/li&gt;
&lt;li&gt;코드카타 - 이주의 시작은 쉬웠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.20&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django api 앱 변경 -앤드포인트 나눈거 다시 수정.&lt;/li&gt;
&lt;li&gt;http 통신, restful api 세션 by 은우님  - RESTful 좋구나!&lt;/li&gt;
&lt;li&gt;vim과 개발세팅 변경 - 세팅의 끝은 순정일까? 극커스텀일까? 알수 없다. &lt;/li&gt;
&lt;li&gt;SEO by 예리님 - 구글의 시작은 미약했으나 현재는 킹왕짱.&lt;/li&gt;
&lt;li&gt;코드카타 - 코딩 바로 들어가지 말고 검토한번 하면 좋을듯 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.21&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프론트_백 연결 -  본격 온라인시대 개막 !&lt;/li&gt;
&lt;li&gt;팀프로젝트 아이디어 회의 - 태양아래 새로운 것이 없구만.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.08.19&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 else… 뒤에 조건 안 붙습니다. 붙이지 마세요. &lt;/li&gt;
&lt;li&gt;django JsonResponse ( ) 에 들어가는 {} 은 한개만, 두개 들어가면 에러납니다. &lt;/li&gt;
&lt;li&gt;문자에러 user =&gt;uesr&lt;/li&gt;
&lt;li&gt;조건문 연속 인지 아닌지, 앞변수 변화가 뒷 변수 변화에 영향을 주지 않는 방향으로 생각하기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.20&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;domain naming &lt;/li&gt;
&lt;li&gt;/는 계층구조 / 다음은 식별자 &lt;/li&gt;
&lt;li&gt;식별자 끝에는 /를 붙이지 않는다&lt;/li&gt;
&lt;li&gt;domain/country/city/street/building/222&lt;/li&gt;
&lt;li&gt;동일 db를 여러 앱으로 쪼개서 편하게 하려고 했는데 그러면 안된다..&lt;/li&gt;
&lt;li&gt;왜? end point 인식이 어렵다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.21&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;splice 쓰는거 상황에 따라 달라진다. &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;splice &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; mutable
arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; number &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; remove element&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; element to insert&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
arr을 부르면 splice 처리가 먹힌 arr 리턴 
arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;을부르면 잘린 부분을 부른다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;splice로 삭제되는 부분이 array로 불린다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;  

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arr2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; somearr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;	라고 하고 

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [3,4]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dd&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [3,4]&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//[1,2,&quot;dd&quot;,5,6]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[SEO 이해하기 ]]></title><description><![CDATA[SEO가 뭐고 어떻게 작동하고 개발자는 뭘 해야하는가. ]]></description><link>https://rumbarum.github.io//posts/understaingSEO/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understaingSEO/</guid><pubDate>Tue, 20 Aug 2019 02:23:45 GMT</pubDate><content:encoded>&lt;h3 style=&quot;color:rgb(9, 136, 104)&quot;&gt;검색과 SEO &lt;/h3&gt;
- ## 검색 노출은 프론트 앤드의 역할이다 (백엔드 지망이라 다행... )
&lt;ul&gt;
&lt;li&gt;최고 목표 : 원하는 단어 또는 연관 검색어로 구글링 했을때 1페이지 첫째 줄에 나오게 하기 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구글검색의 아버지들 래리 페이지, 세르게이 브린&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스탠포드 박사과정에서 만남 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세르게이 브린&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;처음 프로젝트 영화평점 개인화&lt;/li&gt;
&lt;li&gt;중복되는 부분 찾아내 저작권 침해 문서 찾아내는 시스템 (아직도 쓰인다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;래리페이지 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹사이트 코멘트 주석 시스템(레딧의 아버지가 될뻔?)&lt;/li&gt;
&lt;li&gt;“젊은이의 낙관주의는 종종 과소평가 받는다. ”&lt;/li&gt;
&lt;li&gt;링크가 많이 되면 영향력이 있는 페이지이다. 페이지랭크 개념 도입  &lt;/li&gt;
&lt;li&gt;크롤링(=spider)을 통해 링크된 주소들을 식별하고 페이지의 가치를 평가 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;현재의 검색알고리즘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러개의 알고리즘&lt;/li&gt;
&lt;li&gt;문맥이 있는 사이트&lt;/li&gt;
&lt;li&gt;전통적인 판단지표들도 같이 사용 (방문수, 중요 키워드 외 등등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&quot;구글에서-말합니다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EA%B8%80%EC%97%90%EC%84%9C-%EB%A7%90%ED%95%A9%EB%8B%88%EB%8B%A4&quot; aria-label=&quot;구글에서 말합니다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구글에서 말합니다.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;검색엔진 최적화 시간이 걸린다.&lt;/li&gt;
&lt;li&gt;성과가 나타날때까지 4개월~ 1년 걸린다.&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&quot;seo-최적화-가이드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#seo-%EC%B5%9C%EC%A0%81%ED%99%94-%EA%B0%80%EC%9D%B4%EB%93%9C&quot; aria-label=&quot;seo 최적화 가이드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SEO 최적화 가이드&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&quot;잘-노출되게한다이렇게no&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%98-%EB%85%B8%EC%B6%9C%EB%90%98%EA%B2%8C%ED%95%9C%EB%8B%A4%EC%9D%B4%EB%A0%87%EA%B2%8Cno&quot; aria-label=&quot;잘 노출되게한다이렇게no permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;잘 노출되게한다.(이렇게?no..)&lt;/h1&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; 사이트 주소 링크가 많이 되고 있어야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사이트 링크를 여기저기 올린다. (서로 참조하면 과대광고로 블록킹)&lt;/li&gt;
&lt;li&gt;글 제목과 내용의 단어 선택을 잘 해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&quot;&quot;&lt;header&gt;&quot;&quot; 잘쓰기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;도메인 중요 - 비싼 도메인은 도메인값을 하는…&lt;/li&gt;
&lt;li&gt;타이틀은  타이틀 + 설명으로 써야한다. &lt;/li&gt;
&lt;li&gt;디스크립션 잘 써야한다. &lt;/li&gt;
&lt;li&gt;리액트는 react-helmet 사용하면 추가할 수 있다. &lt;/li&gt;
&lt;li&gt;robots.txt 를 통해 크롤링 여부 전달&lt;/li&gt;
&lt;li&gt;sitemap.xml 크롤러에게 사이트 내용 전달한다. &lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;사이트를-컴퓨터가-이해할-수-있도록-만든다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%9D%B4%ED%95%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EB%A7%8C%EB%93%A0%EB%8B%A4&quot; aria-label=&quot;사이트를 컴퓨터가 이해할 수 있도록 만든다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사이트를 컴퓨터가 이해할 수 있도록 만든다&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;크롤러가 데이터 잘 가져 갈 수 있도록 한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;html5 semantic elements을 잘 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;의미를 가지는 HTML 요소들&lt;/li&gt;
&lt;li&gt;페이지 이동시 검색되길 바란다면 a 태그 &lt;/li&gt;
&lt;li&gt;hn 태그 잘 달기&lt;/li&gt;
&lt;li&gt;img 태그, alt 설명&lt;/li&gt;
&lt;li&gt;img 사진 이름부터 잘짓기&lt;/li&gt;
&lt;li&gt;img 태그위에 figure 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.08.12~ 19.08.18 ]]></title><description><![CDATA[19.08.12~ 19.08.18 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-12~ 19-08-18/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-12~ 19-08-18/</guid><pubDate>Tue, 20 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;TIL &amp; TEL 19.08.12~ 19.08.18 &lt;/h2&gt;
&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;19.08.12&lt;/li&gt;
&lt;li&gt;프리코스 종료 후 파운데이션 코스진행에 대한 안내 청취.&lt;/li&gt;
&lt;li&gt;CodeKata 시간&lt;/li&gt;
&lt;li&gt;실사례를 가지고 클래스 개념 배우기&lt;/li&gt;
&lt;li&gt;django 로 JS와 연결이 어떻게 되는지 간접체험&lt;/li&gt;
&lt;li&gt;19.08.13&lt;/li&gt;
&lt;li&gt;블로그 정리 &lt;/li&gt;
&lt;li&gt;페어 코드카타&lt;/li&gt;
&lt;li&gt;API 다시 붙잡기&lt;/li&gt;
&lt;li&gt;django 로 만든 end point Java Script에 붙이기 위해 구글삼매경&lt;/li&gt;
&lt;li&gt;리액트 세션&lt;/li&gt;
&lt;li&gt;디자이너와 협업하기란 위워크 세션에 참석(신동주님)&lt;/li&gt;
&lt;li&gt;19.08.14&lt;/li&gt;
&lt;li&gt;블로그 정리&lt;/li&gt;
&lt;li&gt;코드카타 &lt;/li&gt;
&lt;li&gt;리눅스 터미널, 쉘 관련 세션 by 은우님&lt;/li&gt;
&lt;li&gt;js 바닐라로 서버 연결 페이지 만들기 &lt;/li&gt;
&lt;li&gt;19.08.15&lt;/li&gt;
&lt;li&gt;JS miniter 수정 &lt;/li&gt;
&lt;li&gt;django view 수정 &lt;/li&gt;
&lt;li&gt;19.08.16&lt;/li&gt;
&lt;li&gt;fetch response 안에서의 variable 관리 시도 &lt;/li&gt;
&lt;li&gt;코드카타&lt;/li&gt;
&lt;li&gt;9월 한달간 진행할 프로젝트 의견 취합 &lt;/li&gt;
&lt;li&gt;Js 프론트로 패치 받아보기 계속 수정&lt;/li&gt;
&lt;li&gt;Postman을 이용해서 외부 컴퓨터와 통신 성공!&lt;/li&gt;
&lt;li&gt;19.08.18&lt;/li&gt;
&lt;li&gt;django 복습 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.08.12&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binding(this) &lt;/li&gt;
&lt;li&gt;( ) =&gt; { }&lt;/li&gt;
&lt;li&gt;애로우 펑션의 최고 기능 this를 선언한 곳에 묶는다. &lt;/li&gt;
&lt;li&gt;세마포어, 뮤텍스, 크리티컬 섹션 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.13&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array.join() &lt;/li&gt;
&lt;li&gt;default 인자는 ” , ” 이다, 아무것도 없이 합치고자 한다면 , 인자로 &quot;&quot;를 줘야한다. &lt;/li&gt;
&lt;li&gt;비슷한 예로 string.split( ) 이 있다. split 안에 &quot;&quot;을 넣어야 &quot;&quot;으로 쪼갠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.14&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS numbe.split() =&gt; error //string 만 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[알고리즘 면접에서 살아남기]]></title><description><![CDATA[바름은(는) 채용 면접자와 배틀을 시작했다.   ]]></description><link>https://rumbarum.github.io//posts/surviveFromAlgorithmtest/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/surviveFromAlgorithmtest/</guid><pubDate>Mon, 19 Aug 2019 02:23:45 GMT</pubDate><content:encoded>&lt;h1 style=&quot;color:rgb(9, 136, 104)&quot;&gt;면접자는 알고리즘 공격을 시전했다.&lt;/h1&gt;
## 임의의 정수 n이 있을때 1~n까지의 소수의 개수를 구하세요
&lt;p&gt;바름은 패배… 할뻔했지만 살아났다! &lt;/p&gt;
&lt;p&gt;대처요령을 알기 때문이지.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;문제를-확실히-이해하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%99%95%EC%8B%A4%ED%9E%88-%EC%9D%B4%ED%95%B4%ED%95%98%EB%9D%BC&quot; aria-label=&quot;문제를 확실히 이해하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제를 확실히 이해하라.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;문제 낸 사람에게 확인하라. 이해가 안되면 또 물어봐라. 문제를 이해시키는게 면접관의 역할이다. &lt;/li&gt;
&lt;li&gt;2번 3번 물어라. 그래야 올바른 접근을 한다. 그리고 면접관을 풀이과정에 동행시켜야 면접관이 나에게 좀더 집중한다. &lt;/li&gt;
&lt;li&gt;소통이 안되면 요구자의 필요과 상관없는 것을 개발하는 경우가 생긴다.&lt;/li&gt;
&lt;li&gt;input output 확실히 해라. &lt;/li&gt;
&lt;li&gt;어떤 값을 넣었을때 어떤 값이 나올지 알아야 로직을 짠다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;코딩은-나중에-접근법을-얘기하라&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%94%A9%EC%9D%80-%EB%82%98%EC%A4%91%EC%97%90-%EC%A0%91%EA%B7%BC%EB%B2%95%EC%9D%84-%EC%96%98%EA%B8%B0%ED%95%98%EB%9D%BC&quot; aria-label=&quot;코딩은 나중에 접근법을 얘기하라 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코딩은 나중에, 접근법을 얘기하라.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;바로 코딩에 들어가면 코딩하다가 막히는 부분에서 다시 생각을 하게 된다. &lt;/li&gt;
&lt;li&gt;코딩은 면접관과 얘기하며 발전시킨 로직을 옮겨적는것 뿐이다. &lt;/li&gt;
&lt;li&gt;자기가 풀어가는 방법을 보는거지 정답 맞추기를 보는 시간이 아니다. &lt;/li&gt;
&lt;li&gt;풀어가는 과정의 커뮤니케이션이 중요하다. &lt;/li&gt;
&lt;li&gt;무엇을 코딩할지 파악한 다음에 코딩한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;고치는-과정이-있는건-괜찮다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%A0%EC%B9%98%EB%8A%94-%EA%B3%BC%EC%A0%95%EC%9D%B4-%EC%9E%88%EB%8A%94%EA%B1%B4-%EA%B4%9C%EC%B0%AE%EB%8B%A4&quot; aria-label=&quot;고치는 과정이 있는건 괜찮다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;고치는 과정이 있는건 괜찮다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;테스트 케이스를 상정해서 대입해 본다.  &lt;/li&gt;
&lt;li&gt;틀리면 당황하지 말고 ”제가 틀린 부분이 있네요”. 라고 얘기하자. 개발자 뽑는 회사 많다!&lt;/li&gt;
&lt;li&gt;풀이과정에서 면접관과 커뮤니케이션이 잘 오갔으면 디버깅과정에 같이 관여를 시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;알고리즘-해결책을-어떻게-접근하는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%95%B4%EA%B2%B0%EC%B1%85%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94%EA%B0%80&quot; aria-label=&quot;알고리즘 해결책을 어떻게 접근하는가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;알고리즘 해결책을 어떻게 접근하는가?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;어려운건 쪼갠다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AI 초기개념? 17세기 수학자 - 사람의 생각 공식화	&lt;/li&gt;
&lt;li&gt;예측할수 없어보이는 사람의 생각도 쪼개면 if의 연결로 표현 할 수 있다. &lt;/li&gt;
&lt;li&gt;쉬운것부터 생각한다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시작점을 그린다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;간단한 도식으로 그려보거나 &lt;/li&gt;
&lt;li&gt;문제의 상황을 최소한의 범위에서 시작하여 점차 확장시켜본다. &lt;/li&gt;
&lt;li&gt;가장 간단한 if statement를 찾는다. &lt;/li&gt;
&lt;li&gt;위아래, 왼쪽,오른쪽 등등 다음으로 넘어가기 위한 조건들을 찾아낸다.	&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;보이는 패턴을 수식으로 표현한다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그럼 끝.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[frontend를 위한 Django API 통신 문서 만들기 ]]></title><description><![CDATA[바름이가 만든 django API와 통신하려는 프론트앤드분은 이 문서를 참조해주세요! ]]></description><link>https://rumbarum.github.io//posts/miniterAPIdocument/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/miniterAPIdocument/</guid><pubDate>Mon, 19 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 style=&quot;color:rgb(9, 136, 104)&quot;&gt; 통신을 위한 규약입니다. 지키지 않으시면 에러가 날 확률이 100% &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Wecode 트위터 클론 프로젝트 하시는 분들과 서버통신을 위해 만든 규약입니다!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;post 데이터는 post data 양식을 지켜주세요&lt;/li&gt;
&lt;li&gt;response 데이터를 활용하여 적합한 유저 반응을 생성하시면 됩니다. &lt;/li&gt;
&lt;li&gt;백엔드는 데이터 유효성 검사 안합니다. 프론트에서 하고 주세요! &lt;/li&gt;
&lt;li&gt;서버에서는 데이터 유무와 중복만 확인합니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;응답 유형 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사인업 url:   ~/signup/ &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;post data &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이름  user_name&lt;/li&gt;
&lt;li&gt;아이디  user_id&lt;/li&gt;
&lt;li&gt;패스워드 user_password&lt;/li&gt;
&lt;li&gt;프로필 user_profile&lt;/li&gt;
&lt;li&gt;csrf 값(document.cookie 치면 나오는 csrftoken) user_csrf &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;post response&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정상출력&lt;/li&gt;
&lt;li&gt;회원가입 완료메시지 전송 {“message”:“Sign Up Success”}&lt;/li&gt;
&lt;li&gt;비정상출력&lt;/li&gt;
&lt;li&gt;이미 가입한 아이디가 있을경우 {“message”:“Id is Already Exist”}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;로그인 url : ~/login/&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로그인 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Post data&lt;/li&gt;
&lt;li&gt;아이디 user_id&lt;/li&gt;
&lt;li&gt;패스워드 user_password&lt;/li&gt;
&lt;li&gt;post response&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정상출력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정상 로그인&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; {“message”:“Login Success”}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비정상출력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아이디 없음&lt;/li&gt;
&lt;li&gt;{“message”:“Check Id”}&lt;/li&gt;
&lt;li&gt;비밀번호 오류&lt;/li&gt;
&lt;li&gt;{“message”:“Wrong Password”}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;트윗페이지 이동후 트윗페이지 접속 유저 확인 ~/user_auth/&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;csrftoken  user_csrf: &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;post response&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정상출력&lt;/li&gt;
&lt;li&gt;{“data”:”{“user&lt;em&gt;id”: “아이디”, “user&lt;/em&gt;name”: “이름”, “user_profile”: “프로파일” }”,  “message”:“User Info Loading Success”}&lt;/li&gt;
&lt;li&gt;비정상출력 - 없는 csrf 입력시&lt;/li&gt;
&lt;li&gt;{“message”: “Need Signup”} &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;트윗작성 ~/tweet/&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정상출력&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트윗 데이터 전체 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유저 아이디 user_id : someid&lt;/li&gt;
&lt;li&gt;유저 작성내용 user_content: somecontent&lt;/li&gt;
&lt;li&gt;작성시간 created_at: time data&lt;/li&gt;
&lt;li&gt;트윗업데이트 시간updated_at: time data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;{“message”:“Tweet Loading Success”}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;post &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;글작성 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post data &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아이디  user_id:&lt;/li&gt;
&lt;li&gt;콘텐츠 user_content:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post response &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트윗 입력시 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정상출력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{“content&lt;em&gt;id”:“contents&lt;/em&gt;number”,“message”:“Tweet Success”}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비정상출력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{“message”:“Tweet Failed”}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;글 삭제 요청 ~/tweet_del/&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post data &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;게시물아이디 content_id : &lt;/li&gt;
&lt;li&gt;유저아이디 user_id: &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post response &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성공시&lt;/li&gt;
&lt;li&gt;{“message”:“Delete Success”}&lt;/li&gt;
&lt;li&gt;비정상 출력- 게시물 아이디와 유저 아이디 불일치시, 또는 이미 지운게시물 다시 삭제 요청&lt;/li&gt;
&lt;li&gt;{“message”: “No Authorization”}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[REST-framework 를 쓰지 않고, 초간단 api 서버 만들기하면서 장고 기본원리 설명하기 ]]></title><description><![CDATA[django를 사용해서 간단한 API end point 를 만들어 봅시다. (get/post method 사용 안함) ]]></description><link>https://rumbarum.github.io//posts/createapiwithoutrestframework/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/createapiwithoutrestframework/</guid><pubDate>Sun, 11 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;간단한 Json을 보여주는 API를 만들겁니다.&lt;/h2&gt;
( python, conda, django, pip 의 설치 내용은 이번글에 포함되지 않습니다 . )
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?time_continue=707&amp;#x26;v=s9E5EYAm5gs&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://www.youtube.com/watch?time_continue=707&amp;#x26;v=s9E5EYAm5gs&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;위 유튜브의 내용을 3.7 python에 맞추어 정리해보았습니다. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-프로젝트-담을-폴더로-이동-후-프로젝-장고프로젝트-스타트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%8B%B4%EC%9D%84-%ED%8F%B4%EB%8D%94%EB%A1%9C-%EC%9D%B4%EB%8F%99-%ED%9B%84-%ED%94%84%EB%A1%9C%EC%A0%9D-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8A%A4%ED%83%80%ED%8A%B8&quot; aria-label=&quot;shell 프로젝트 담을 폴더로 이동 후 프로젝 장고프로젝트 스타트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] 프로젝트 담을 폴더로 이동 후 프로젝 장고프로젝트 스타트&lt;/h4&gt;
&lt;p&gt;프로젝트는 만드려고 하는 웹페이지의 전체(프론트엔드, 백엔드 총괄//보여지는 부분과 보이지 않지만 동작하고 있는 기능, 데이터베이스)를 통칭한다고 보시면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;django&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;admim startproject someproject  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== shell 에서 입력 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-프로젝트-폴더에서-앱만들기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8F%B4%EB%8D%94%EC%97%90%EC%84%9C-%EC%95%B1%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;shell 프로젝트 폴더에서 앱만들기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] 프로젝트 폴더에서 앱만들기&lt;/h4&gt;
&lt;p&gt;앱은 프로젝트를 이루는 구동 단위 입니다. 페이지라기 보다는, 로그인 기능, 결제 기능등등의 기능 단위로 이해하시면 됩니다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py startapp someapp &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== shell 에서 입력 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-세팅-변경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-%EC%84%B8%ED%8C%85-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;shell 세팅 변경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] 세팅 변경&lt;/h4&gt;
&lt;p&gt;프로젝트의 세팅을 변경해서 원하는 세팅으로 작동할 수 있도록 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someproject&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;settings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== vim으로 파일을 열고 &lt;/span&gt;

INSTALLED_APPS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;someapp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== 추가후 저장 하시면 됩니다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;u&gt;*vim 설명 : 터미널에서 작동하는 텍스트 에디터, 파일을 열면 기본은 view 모드 입니다. 수정을 하기 위해서는 i 키를 눌러야 삽입모드가 됩니다. 원하는 텍스트로 수정후  :wq 를 입력하면 저장후 종료가 됩니다.&lt;/u&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-url-변경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-url-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;shell url 변경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] url 변경&lt;/h4&gt;
&lt;p&gt;url은 앱을 구동시키기 위한 경로입니다. 홈페이지 상에서 연결되는 페이지 경로라기 보다는, 설정한 기능을 불러오는 경로라고 보시면 됩니다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someproject&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;urls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== vim으로 파일을 열고 &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;urls &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; include  &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== django.urls에서 경로설정을 하기 위해 필요한 path, include	를 불러옵니다 .&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; admin  &lt;span class=&quot;token comment&quot;&gt;# 장고의 기본 관리자 설정을 불러옵니다. &lt;/span&gt;

urlpatterns &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;                   &lt;span class=&quot;token comment&quot;&gt;#url 경로를 설정하는 양식입니다. &lt;/span&gt;

path &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;admin/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;admin.urls.py&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#메인 페이지 경로에 admin/추가시 &apos;admin.urls.py&apos;을 참조합니다.&lt;/span&gt;

path &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; include&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;someapp.urls&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#메인 페이지경로에서 someapp.urls 주소를 참조합니다. 프로젝트의 url이 앱의 url을 가르키도록 설정합니다.  &lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;urls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== vim으로 파일을 열고 &lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;urls &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; path  &lt;span class=&quot;token comment&quot;&gt;#  마찬가지로 someapp에서도 경로설정을 위해 path를 불러옵니다. include는 필요하지 않습니다. &lt;/span&gt;

urlpatterns &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;#앱에서 어떤 로직을 불러올지 설정합니다. &lt;/span&gt;

path &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#views.content_list는 someapp이 불러올 실행코드(view)입니다. &lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-views-세팅-후-서버-작동-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-views-%EC%84%B8%ED%8C%85-%ED%9B%84-%EC%84%9C%EB%B2%84-%EC%9E%91%EB%8F%99-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;shell views 세팅 후 서버 작동 확인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] views 세팅 후 서버 작동 확인&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py   &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== vim으로 파일을 열고 &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; JsonResponse  &lt;span class=&quot;token comment&quot;&gt;#JsonResponse 라는 반응을 가져옵니다. &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;content_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;token comment&quot;&gt;#Http Request가 올때 함수를 작성합니다. &lt;/span&gt;
   data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 리턴할 데이터 입니다. 들여쓰기는 화이트스페이스4칸입니다.&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 데이터를 Json 형식으로 리턴합니다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py runserver   &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== shell에서 실행, django를 이용한 개발서버를 활성화 시킵니다.&lt;/span&gt;

http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== 브라우저로 주소로 들어가 3.에서 입력한 데이터가 나오는지 확인합니다. 나오지 않는다면 어딘가 틀렸단 얘기입니다. (제 설명이 틀리지 않았다면요...)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-models-세팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-models-%EC%84%B8%ED%8C%85&quot; aria-label=&quot;shell models 세팅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell ]models 세팅&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; models &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== 작성할 DB모델을 불러옵니다. &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# &amp;lt;== Content 라는 DB class를 선언합니다. &lt;/span&gt;

   title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CharField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_length&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# DB의 값을 설정합니다. models.CharField는 max_length를 필수 인자로 받습니다. 그외의 조건들을 추가할 수 있습니다. &lt;/span&gt;

   content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TextField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

   created_at &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DateTimeField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto_now_add&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#models.DateTimeField 시간을 입력하는 DB model value입니다. auto_now_add 는 입력할때의 값으로 고정이 됩니다. &lt;/span&gt;

   updated_at &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DateTimeField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;auto_now&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#auto_now 데이터 저장시에 그 시점으로 업데이트되어 저장됩니다. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-db-생성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-db-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;shell db 생성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] DB 생성하기&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py migrate  

python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py makemigrations someapp &lt;span class=&quot;token comment&quot;&gt;# DB 가 위에서 설정한 모델의 설정을 저장할 수 있도록 준비합니다. &lt;/span&gt;

python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py migrate someapp &lt;span class=&quot;token comment&quot;&gt;# model 설정을 DB에 적용합니다.  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;shell-admin-에서-db-에-등록-할-수-있도록-기능-추가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#shell-admin-%EC%97%90%EC%84%9C-db-%EC%97%90-%EB%93%B1%EB%A1%9D-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;shell admin 에서 db 에 등록 할 수 있도록 기능 추가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[shell] admin 에서 DB 에 등록 할 수 있도록 기능 추가&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py 

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; django&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;contrib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; admin 

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Post  &lt;span class=&quot;token comment&quot;&gt;#model Class를 불러옵니다. &lt;/span&gt;

admin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;site&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Post&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#어드민 페이지에서 Post DB에 등록할 수 있도록 설정합니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;python manage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py createsuperuser &lt;span class=&quot;token comment&quot;&gt;#&amp;lt;== admin 페이지의 id pw 설정합니다. &lt;/span&gt;

http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;admin 으로 들어가면 관리자 페이지 로그인 창이 나타납니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 위에서 설정한 &lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;pw 를 이용해서 들어갑니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;someapp으로 들어가셔서 데이터를 추가합니다.  title1, content1 이런 식으로 title3, content3 까지 만듭니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&quot;view-수정-postlist-가-나올-수-있도록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#view-%EC%88%98%EC%A0%95-postlist-%EA%B0%80-%EB%82%98%EC%98%AC-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D&quot; aria-label=&quot;view 수정 postlist 가 나올 수 있도록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;view 수정 postlist 가 나올 수 있도록&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;vi someapp&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;views&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py   &lt;span class=&quot;token comment&quot;&gt;# 수정할 파일을 엽니다. &lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;content_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
   post_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;              &lt;span class=&quot;token comment&quot;&gt;#admin에서 입력한 값들이 담길 리스트 생성&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; post &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; Post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#반복문을 돌며 리스트에 data들을 담습니다. &lt;/span&gt;
       post_list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;content&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
       &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; JsonResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;post_list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; safe&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; 에서 입력한 Title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Content 불러 오는 거 확인하시면
위에서 입력한 title과 content가 나오는걸 볼 수 있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 요호! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[ TIL&TEL 19.08.05~ 19.08.11 ]]></title><description><![CDATA[ 19.08.05~ 19.08.11 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-11/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL~19-08-11/</guid><pubDate>Sun, 11 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;TIL &amp; TEL 19.08.05~ 19.08.11 &lt;/h2&gt;
&lt;h3 id=&quot;til-today-i-learned&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#til-today-i-learned&quot; aria-label=&quot;til today i learned permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TIL( Today I Learned)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;19.08.05&lt;/li&gt;
&lt;li&gt;파이썬 공부&lt;/li&gt;
&lt;li&gt;파이썬 데코레이터와의 씨름 &lt;/li&gt;
&lt;li&gt;2기 정재욱님의 선배 토크&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 공부 계속 &lt;/li&gt;
&lt;li&gt;Gatsby 활용한 블로그 만들기 세션 에러대파티!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.07&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장고 공식문서 튜토리얼 개시 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.08&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django 튜토리얼 다시 해봄&lt;/li&gt;
&lt;li&gt;송은우멘토님의 웹개발 흐름에 대한 세션&lt;/li&gt;
&lt;li&gt;지훈 멘토님과 함께 django 라이브 세션을 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.09&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django 튜토리얼 복습&lt;/li&gt;
&lt;li&gt;django API 구현 세션&lt;/li&gt;
&lt;li&gt;한광훈님의 클라스 있는 클래스 강의&lt;/li&gt;
&lt;li&gt;블로그 메뉴 추가 하기 계속 삽질 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.10&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;깃공부 &lt;/li&gt;
&lt;li&gt;django 로 Api 만드는거 다시 봄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django API 만들기 다른 내용들 배우며 복습함&lt;/li&gt;
&lt;li&gt;django API 서버 개설 성공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.08.05&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 등호 == &lt;/li&gt;
&lt;li&gt;if 문 다음 : 빼먹지 마숑  &lt;/li&gt;
&lt;li&gt;variable arguments  *args =&gt; args 로 받는다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;def function (*args  ) :&lt;/p&gt;
&lt;p&gt;​    print( args)  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 함수 파라미터 뒤에 ” : ” &lt;/li&gt;
&lt;li&gt;return 뒤에 ”:” 없어야한다.&lt;/li&gt;
&lt;li&gt;self를 selt로 입력했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;django 초기 url 설정이 안먹혀서 삽질하고 있었는데 영상 가이드에서는 상위 urls를 비워놨는데 난 모르고 채워 눠서 안되고 있었다 . &lt;/li&gt;
&lt;li&gt;‘django.middleware.csrf.CsrfViewMiddleware’, 요게 걸린다 .&lt;/li&gt;
&lt;li&gt;통신을 하면 먼저 get을 통해 csrf&lt;em&gt;token을 채울 폼을 클라로 보낸다. 클라에서 csrf&lt;/em&gt;token을 같이 채워서 request를 해줘야 django 에서 request 를 accept 하고 표현한다. &lt;/li&gt;
&lt;li&gt;편의상 개발서버에서 돌릴때에는 setting.py 에서 csrf middleware를 비활성 시켜 놓는다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Python -Class, Module, Exception ]]></title><description><![CDATA[야생의 바름은(는) 파이썬의 Class,Module,Exception과 조우했다. ]]></description><link>https://rumbarum.github.io//posts/19-08-06_python/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/19-08-06_python/</guid><pubDate>Tue, 06 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&quot;class&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;공통적인 개념으로 묶이는, 추상적 대상&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;실체가 있는 구체적인 대상&lt;/li&gt;
&lt;li&gt;Class 정의 하기&lt;/li&gt;
&lt;li&gt;class 이름은 각 단어의 앞글자를 대문자로 사용합니다.&lt;/li&gt;
&lt;li&gt;한단어 이상으로 이루어져 있다면 밑줄(underscore) 없이 모든 단어를 다 붙인다.&lt;/li&gt;
&lt;li&gt;Class의 attribute(속성)&lt;/li&gt;
&lt;li&gt;class에 정의되는 공통 요소&lt;/li&gt;
&lt;li&gt;class 안에서 정의해주는 함수(function)는 function이라고 하지 않고 method 라고 합니다)&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maker&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; horse_power&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; maker 
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; model 
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;horse_power &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; horse_power&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Class Method&lt;/li&gt;
&lt;li&gt;객체가 행할 수 있는 행동&lt;/li&gt;
&lt;li&gt;메소드를 사용할때는 dot(.) 을 사용하여 객체를 호출&lt;/li&gt;
&lt;li&gt;&amp;#x3C;객체&gt;.&amp;#x3C;메소드&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메소드 정의&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__init__&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maker&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; horse_power&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maker &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; maker 
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; model 
  self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;horse_power &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; horse_power 
  
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;honk&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maker&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 빠라바라빠라밤&quot;&lt;/span&gt;&lt;/span&gt;

hyundai &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Car&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;현대&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;제네시스&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
hyundai&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;honk&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;현대 빠라바라빠라밤&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;모듈은 변수나 함수 그리고 클래스 등을 모아놓은 파일 (라이브러리?)&lt;/li&gt;
&lt;li&gt;다른 파일에서 재사용이 가능&lt;/li&gt;
&lt;li&gt;전체 코드가 한 파일에 넣기에는 너무 커졌을때 여러 파일로 나누어서 정리&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일을 만든후 그 안에 재사용 하고 싶은 함수나 클래스 혹은 변수등을 구현&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;## my_module.py&lt;/span&gt;
my_module_var &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def my&lt;em&gt;module&lt;/em&gt;func():
return “Hello!“class MyModuleClass: pass&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;import my_module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모듈 전체 import&lt;/li&gt;
&lt;li&gt;파일 확장자인 “.py” 는 제외하고 파일 이름만 사용&lt;/li&gt;
&lt;li&gt;사용하기&lt;/li&gt;
&lt;li&gt;&amp;#x3C;모듈 이름&gt;.&amp;#x3C;모듈에서 사용하길 원하는 변수/함수/클래스 이름&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;## main.py&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; my_module&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;print(my&lt;em&gt;module.my&lt;/em&gt;module_var)&lt;/p&gt;
&lt;p&gt;my&lt;em&gt;module.my&lt;/em&gt;module_func()&lt;/p&gt;
&lt;p&gt;my&lt;em&gt;module&lt;/em&gt;class = my_module.MyModuleClass()&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternative ways to import modules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모듈의 일부분 import&lt;/li&gt;
&lt;li&gt;from &amp;#x3C;모듈 이름&gt; import &amp;#x3C;함수/변수/클래스1&gt;, &amp;#x3C;함수/변수/클래스2&gt;, …, &amp;#x3C;함수/변수/클래스N&gt;&lt;/li&gt;
&lt;li&gt;이렇게 가져온 다음에 모듈이름을 앞에 붙이지 않아도 바로 처리가 가능하다.&lt;/li&gt;
&lt;li&gt;모듈에서 사용하는 것이 명확할때 from import 를 사용하면 편리&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; my_module &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; my_module_func&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my_module_var
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_module_var&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;my_module_func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import As&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import 해온 정보의 이름을 사용하기 편하게 바꾼다.&lt;/li&gt;
&lt;li&gt;이름의 중복 이나 긴 이름을 방지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Packages&lt;/li&gt;
&lt;li&gt;파일에 나누어져 있는 코드들도 다른 곳에서 하나의 module로 불러와서 사용할 수 있도록 해주는것&lt;/li&gt;
&lt;li&gt;파이썬 파일들로 이루어져 있는 디렉토리(directory)가 하나의 package&lt;/li&gt;
&lt;li&gt;Package Initialization&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://init.py/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;init.py&lt;/a&gt;파일을 통해 package 초기 설정을 가능하게함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import 할때 경로의 총 길이 줄여주기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://init.py/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;init.py&lt;/a&gt;파일에 먼저 한번 import 후 .py 에서 import&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;init&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package에서 import 할 수 있는 변수/함수/클래스 제한하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package를 통해 import 될 수 있는 요소들은 모두 변수를 통해 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;all&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all 변수는 string 값의 요소를 가지고 있는 list&lt;/li&gt;
&lt;li&gt;all 변수의 default 값은 모든 함수/변수/클래스&lt;/li&gt;
&lt;li&gt;all 변수를 따로 정의해줌으로 import 될 수 있는 요소들을 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그 외 package가 import될때 꼭 먼저 실행되어야 하는 코드들을 설정해 놓는다.&lt;/li&gt;
&lt;li&gt;다른 사람의 package 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PIP는 파이썬의 package manager&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip install Django ( 컴온 장고!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How import statement finds modules and packages&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Import Search 순서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sys.module&lt;/li&gt;
&lt;li&gt;import된 모듈과 package들을 저장&lt;/li&gt;
&lt;li&gt;단순한 dictionary&lt;/li&gt;
&lt;li&gt;새로 import 하는 모듈은 sys.modules 에서 찾을 수 없다.&lt;/li&gt;
&lt;li&gt;built-in modules&lt;/li&gt;
&lt;li&gt;파이썬 공식 라이브러리들&lt;/li&gt;
&lt;li&gt;이미 포함되어 있어서 찾기 쉽다.&lt;/li&gt;
&lt;li&gt;sys.path&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string 요소들을 가지고 있는 list &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/bin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python36.zip&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/lib-dynload&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/site-packages&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/site-packages/aeosa&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/anaconda3/lib/python3.6/site-packages/IPython/extensions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/Users/song-eun-u/.ipython&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Absolute Path &amp;#x26; Relative Path&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Absolute path&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최상위 폴더를 기준으로 탐색&lt;/li&gt;
&lt;li&gt;어느 파일, 어느 위치에서 import 하던지 경로가 항상 위와 같이 동일하게 된다.&lt;/li&gt;
&lt;li&gt;경로가 길어지는 경우가 생길 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;relativev path&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 위치를 기준으로 탐색&lt;/li&gt;
&lt;li&gt;헷갈리기 쉽고 파일 위치가 변경되면 경로 위치도 변경되어야 하는 단점이 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exceptions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;에러 발생시 예외처리 정하기 &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;somefunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
trial &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;실행코드에 에러가 없으면 진행되는 코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
  
exception ErrorName &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;실행코드 진행중 ErrorName 에러 발생시 실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 

anotherException anotherErrorName &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(optional)&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;anotherErrorName 에러 발생시 실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(optional)&lt;/span&gt;
   &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ErrorName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; anotherErrorName 외의 에러 발생시 실행코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
  
&lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;에러 발생 여부와 상관없이 최종적으로 실행되는 코드&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(optional)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Decorator 톺아보기 ]]></title><description><![CDATA[첨보는 데코레이터 코드 이쁘게 데코해주나요? Error~! ]]></description><link>https://rumbarum.github.io//posts/19-08-05_python_decorator /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/19-08-05_python_decorator /</guid><pubDate>Mon, 05 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h3 style=&quot;color:rgb(9,136,104)&quot;&gt;Decorator 와의 싸움&lt;/h3&gt;
&lt;h4 id=&quot;decorator-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#decorator-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;decorator 개념 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator 개념&lt;/h4&gt;
&lt;p&gt;기존의 함수에 여러가지 기능을 추가하는 파이썬 구문이라고 한다.&lt;/p&gt;
&lt;p&gt;어떤 함수실행에 앞이나 뒤에 원하는 코드(함수)들이 같이 실행되도록 할 수 있다!&lt;/p&gt;
&lt;p&gt;함수 또는 함수의 인자들을 활용 할 수도 있다.&lt;/p&gt;
&lt;p&gt;fnA() ⇒ fnB ⇒ …fnN&lt;/p&gt;
&lt;h3 id=&quot;decorator-샘플-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#decorator-%EC%83%98%ED%94%8C-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;decorator 샘플 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator 샘플 코드&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#5&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#7&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function  &lt;span class=&quot;token comment&quot;&gt;#6&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#8&lt;/span&gt;

decorated_display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; decorator_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#3&lt;/span&gt;

decorated_display&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#4 &lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;decorator_function 정의&lt;/li&gt;
&lt;li&gt;display 정의&lt;/li&gt;
&lt;li&gt;decorated&lt;em&gt;display라는 변수에 display 함수를 인자로 가진 decorator&lt;/em&gt;function을 실행한 리턴값을 할당(리턴값은 wrapper_function 아직 실행되지 않음 )&lt;/li&gt;
&lt;li&gt;decorated&lt;em&gt;display()를 통해 wrapper&lt;/em&gt;function을 호출&lt;/li&gt;
&lt;li&gt;wrapper_function 정의&lt;/li&gt;
&lt;li&gt;wrapper_function 호출&lt;/li&gt;
&lt;li&gt;original_function(=display) ()&lt;/li&gt;
&lt;li&gt;문자열 출력&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;decorator-why&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#decorator-why&quot; aria-label=&quot;decorator why permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator Why?&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#5&lt;/span&gt;
        실행시키길 원하는 코드&lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#7&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#8  &lt;/span&gt;
        실행시키길 원하는 코드&lt;span class=&quot;token number&quot;&gt;2222&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#9&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function  &lt;span class=&quot;token comment&quot;&gt;#6&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#8&lt;/span&gt;

decorated_display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; decorator_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;display&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#3&lt;/span&gt;

decorated_display&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#4 &lt;/span&gt;

실행시키길 원하는 코드 &lt;span class=&quot;token number&quot;&gt;1111&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#10&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#11 &lt;/span&gt;
실행시키길 원하는 코드 &lt;span class=&quot;token number&quot;&gt;2222&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#12 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 내가 함수 실행에 내가 원하는 코드를 엮을 수 있다.&lt;/p&gt;
&lt;p&gt;그럼 그냥 함수 하나로 짜면 안돼?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중복되는 부분을 함수에서 분리시켜 코드를 줄일 수 있다.&lt;/li&gt;
&lt;li&gt;그 외의 장점은… 생각해봐야겠다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위의 방법을 줄일 수 있는 방법이 있다! @심벌 사용하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator_function&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_1 함수가 실행됐습니다.&apos;&lt;/span&gt;


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator_function&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_2 함수가 실행됐습니다.&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# display_1 = decorator_function(display_1)  #3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# display_2 = decorator_function(display_2)  #4&lt;/span&gt;

display_1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
display_2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&apos;display_1 함수가 실행됐습니다.&apos;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;display_2 함수가 실행됐습니다.&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;변수를 붙이고 실행 시키는 대신 @심벌을 데코레이션 함수와 함수 정의에 붙여 준다.&lt;/p&gt;
&lt;p&gt;그럼 동일한 결과를 얻는다 .&lt;/p&gt;
&lt;h3 id=&quot;decorator-실전&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#decorator-%EC%8B%A4%EC%A0%84&quot; aria-label=&quot;decorator 실전 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator 실전&lt;/h3&gt;
&lt;h3 id=&quot;original_function의-인자가-있을-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#original_function%EC%9D%98-%EC%9D%B8%EC%9E%90%EA%B0%80-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;original_function의 인자가 있을 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;original_function의 인자가 있을 경우&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#1&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#2&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator_function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display 함수가 실행됐습니다.&apos;&lt;/span&gt;


&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator_function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;display_info({name}, {}) 함수가 실행됐습니다.&quot;&lt;/span&gt;

display&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;
display_info&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token string&quot;&gt;&quot;display_info 함수가 호출되기전 입니다.&quot;&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;display_info(John, 25) 함수가 실행됐습니다.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;display 함수가 인자 (name, age)를 받을 경우에는 wrapper 함수와 original_function에 인자를 설정해줘서 인자가 전달 될 수 있도록 한다. *args, **kwargs 를 같이 써줘야 유동적으로 인자를 받을 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;decorator에-parameter-집어넣기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#decorator%EC%97%90-parameter-%EC%A7%91%EC%96%B4%EB%84%A3%EA%B8%B0&quot; aria-label=&quot;decorator에 parameter 집어넣기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator에 parameter 집어넣기&lt;/h3&gt;
&lt;p&gt;그리고 decorator_function에도 parameter를 집어 넣는 것도 가능하다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 1. 데코레이터를 데코레이터 해놓기- 이렇게 함으로써 데코레이터가 함수이외의 인자를 넣을수 있는 자리를 만들어 준다. &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parametrized&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dec&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; dec&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; repl
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; layer

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@parametrized&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; original_function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; paramofDeco
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper_function

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_3 함수가 실행됐습니다.decorator_function() 인자는 &apos;&lt;/span&gt;

display_3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_3 함수가 호출되기전 입니다.&apos;&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_3 함수가 실행됐습니다.decorator_function() 인자는 paramofDeco&apos;&lt;/span&gt;
 

&lt;span class=&quot;token comment&quot;&gt;# 2. 데코레이터를 한번 더 싸기&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;deco_decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&apos;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;original_function&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__name__&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; 함수가 호출되기전 입니다.&apos;&lt;/span&gt;&lt;/span&gt;
      result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; paramofDeco
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; decorator_function

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@deco_decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;paramofDeco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;display_4 함수가 실행됐습니다.decorator_function() 인자는 &apos;&lt;/span&gt;

display_4&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_4 함수가 호출되기전 입니다.&apos;&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;display_4 함수가 실행됐습니다.decorator_function() 인자는 paramofDeco&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1의 방법은 한번 만들어 놓으면 @심벌로 다른 데코레이터 함수들선언시에 parameter를 쉽게 받을 수 있도록 할 수 있다. (코드 1줄 줄일 수 있네. n번 늘어나면 n줄 Save! )&lt;/p&gt;
&lt;p&gt;2의 방법은 그때 그때 적용&lt;/p&gt;
&lt;p&gt;*주의사항 데코레이터 함수가 parameter 값을 받도록 설정했을때, 만약 paremeter값을 받지 않아도 실행코드 ” () ” 만들어 놔야한다. 안그러면 실행이 되지 않는다. (파라미터값을 넣고 데코레이터 실행한다는걸로 코드가 작성되었기 때문이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#위의 데코레이션을 사용한다고 가정했을때 &lt;/span&gt;

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@deco_decorator_function&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; something &quot;&lt;/span&gt;  

display_5&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;##실행에러 &lt;/span&gt;

&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@deco_decorator_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;display_6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;something&quot;&lt;/span&gt; 

display_6&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token string&quot;&gt;&quot;something&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[TIL & TEL 19.07.29~ 19.08.04 ]]></title><description><![CDATA[ 19.07.29~ 19.08.04 배운것, 씨름한것들 ]]></description><link>https://rumbarum.github.io//posts/TIL&amp;TEL_weekly_19-08-04 /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/TIL&amp;TEL_weekly_19-08-04 /</guid><pubDate>Sun, 04 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 style=&quot;color:rgb(9, 136, 104)&quot;&gt;TIL &amp; TEL 19.07.29~ 19.08.04 &lt;/h2&gt;
### TIL( Today I Learned)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.07.29 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;위코더들 자기소개 &lt;/li&gt;
&lt;li&gt;학습 계획 공유 &lt;/li&gt;
&lt;li&gt;CSS 복습 문제풀이 &lt;/li&gt;
&lt;li&gt;CSS 문제풀이후 JS 복습 문제풀이 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.07.30&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장비세팅 &lt;/li&gt;
&lt;li&gt;JavaScript 공부&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.07.31&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 공부&lt;/li&gt;
&lt;li&gt;개발자도구 다루기 &lt;/li&gt;
&lt;li&gt;html/ css 실습 돌입 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.01 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 마무리&lt;/li&gt;
&lt;li&gt;Dom셀렉터 공부&lt;/li&gt;
&lt;li&gt;Flex 적용 게임 - 개구리게임 &lt;/li&gt;
&lt;li&gt;트위터클론 이벤트 만들기 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.02&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 이벤트 컨트롤 ​&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tel-trial-and-error-log&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tel-trial-and-error-log&quot; aria-label=&quot;tel trial and error log permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TEL (Trial and Error Log)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;19.07.30 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For 문 에러
for문 사용시 return 을 for문 안에서 사용해 버리면 for문이 돌지를 못한다. return 하고 후속 과정을 종료해버리기때문이다. 코드스테이츠 시험에서 한번 틀렸었는데 또 틀렸네.&lt;/li&gt;
&lt;li&gt;함수 실행 에러
함수인지 아닌지 구분을 잘 하시고, 함수이면 함수를 참조하는지, 함수실행 결과를 참조하는지 잘 구분하고 코딩할것!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.07.31&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 arrow function 선언하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;const or let 함수명 = ( param ) =&amp;gt; { 함수코드} 단일 리턴일 경우 {} 생략 가능!!&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;appendChild 잘못 실행 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;constdoassignment = () =&gt; &quot;&gt;&lt;pre class=&quot;language-constdoassignment = () =&gt; &quot;&gt;&lt;code class=&quot;language-constdoassignment = () =&gt; &quot;&gt;var inputposition = document.getElementById(&amp;#39;h1-title&amp;#39;) ;
let makePtag = document.createElement(&amp;#39;p&amp;#39;) ;
makePtag.className = &amp;#39;dom&amp;#39; ;
makePtag.innerHTML = &amp;#39;DOM&amp;#39; ;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;console.log(makePtag);
console.log(inputposition);&lt;/p&gt;
&lt;p&gt;inputposition.appendChild(makePtag) ;
} ;&lt;/p&gt;
&lt;p&gt;doassignment() ; `&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;inputposition 앞에 document 붙여서 틀림.. - _ -;;;&lt;/p&gt;
&lt;p&gt;컴퓨터는 안틀려.. 바름이는 틀려… 안되면 이유가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 내컴에서만 돌아가는 코드는 의미가 없어요 ㅜㅠ 끼워맞추기 코딩

- ```javascript
const getCookieValue = () =&amp;gt; { 
  let result = &amp;quot;&amp;quot; ; 
let sentence = document.cookie ; 
  let position = sentence.indexOf(&amp;#39;ajs_anonymous_id&amp;#39;) ;
  let cutlength = sentence.indexOf(&amp;#39;ajs_user_id&amp;#39;)-2 ; // &amp;lt;==고정값이 되버리면 다른데 응용을 못함
  result = sentence.slice( position+&amp;#39;ajs_anonymous_id&amp;#39;.length +1, cutlength ) ; return result ; 
  } ; 
  getCookieValue() 이건 그냥 나의 상황에 때려맞춘거고 다른사람컴에서는 같은값이 안나오는 경우가 생긴다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;수정본&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;getCookieValue&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sentence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cookie &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cookiearray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sentence&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
cookiearray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ele&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;idx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ajs_anonymous_id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;문자열에 따라 변동 적인 값으로 수정
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;getCookieValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.01&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[CSS] fixed -화면 고정 랑 absolute 다르다..&lt;/li&gt;
&lt;li&gt;getElementsByClassName과 Tag 네임은 특정엘리먼트가 아닌, 엘리먼트 리스트를 찾아온다. 그래서 그 태그/클래스에 다 붙이려면 반복문으로 인덱스별로 다 붙이거나, 원하는 인덱스를 골라내야 한다. 그래야 작동이 가능하다. &lt;/li&gt;
&lt;li&gt;자그만한 실수들 .인자 하나씩 빼먹는 실수들이 나온다. 맨날 쓰는건 더 제대로 알아야 할 필요가 있다. 그리고 정확하게 아는게 대충아는것보다 낫다…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.02&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getFullYear, getMonth, getDate는 함수다. ()으로 실행을 시켜줘야만 작동을 한다..&lt;/li&gt;
&lt;li&gt;Date, 값의 매소드다. 단독 실행 안되..&lt;/li&gt;
&lt;li&gt;특정날자 Date 값 받는것도 new Date (특정날짜) &lt;/li&gt;
&lt;li&gt;getTime, 시간 절대값 생성 ,1970 01-01 00:00 =&gt; 0&lt;/li&gt;
&lt;li&gt;숫자는 length 인자가 없습니다…&lt;/li&gt;
&lt;li&gt;toString 은 함수이다. () 으로 실행시켜야한다.&lt;/li&gt;
&lt;li&gt;css. 셀렉터 잘못 골라서 고생고생 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.03&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String.indexOf( ) 인자로는 스트링이 옵니다.&lt;/li&gt;
&lt;li&gt;String.indexOf(“string”) =&gt; o&lt;/li&gt;
&lt;li&gt;String.indexOf(string) =&gt; x &lt;/li&gt;
&lt;li&gt;불러오는 값이 정확히 어떤 값인지 파악합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;container2.style.left = 385px&lt;/code&gt;
소환 되는 값은 string “385px”
값을 사용하시고 싶으면 px를 떼시고, number 로 바꿔 주세요 바름군. &lt;/li&gt;
&lt;li&gt;처리되는 값과 가능 범위 계산 조심 범위 설정한 값에서만 움직이도록 할때 조건 계산을 잘 해야한다.&lt;/li&gt;
&lt;li&gt;한 점이 0~ 20 사이에서 내가 입력한 값으로 좌우로 3씩 움직인다.
시작점이 10으로 고정.
좌로 3번 가면, 좌표가 1이된다. 우로 3번 가면 좌표가 19
내가 움직임을 입력할 수 있는 위치를 0~ 20으로 설정해 놓는다면, 1에서도 나는 -3을 입력 할수 있다. 좌표는 -2가 된다.
내가 움직임을 입력할 수있는 범위를 벗어났기 때문에 (0~20) 나는 오른쪽으로 복귀하는 움직임을 할 수 없게 되었다.
0~20 사이 움직여야 한다면, 결과 위치가 0~20 사이 위치하여야 하고, 입력 위치는 그 범위 안에있어야 한다.
결과 가능한 위치 (1~19)
좌로 입력 가능한 위치( 4~19)
우로 입력 가능한 위치( 1~ 16) &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intervalID = setInterval( func, delaytime ) 으로 실행 delaytime 은 그냥 number&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clearInterval(intervalID) 로 인터벌 삭제 &lt;/li&gt;
&lt;li&gt;리턴으로 임의의 타이머 id &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeoutID = setTimeout( 실행함수나 코드 , 타임, 코드parametet(optional) )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function() 으로 입력하면 안된다. function을 하고,인자값을 3번째 para 로 주던지,
let wantrunthis = ( param) =&gt; { …} 실행 원하는 함수
param=&gt; target 집어넣을 값 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;\1. setTimeout( wantrunthis, 5000, target ) &lt;/p&gt;
&lt;p&gt;\2. setTimeout( ()=&gt;{wantrunthis(target) }, 5000 )&lt;/p&gt;
&lt;p&gt;\3. setTimeout( (param)=&gt;{wantrunthis(param)},5000, target) `&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python 에러&lt;/p&gt;
&lt;p&gt;다섯줄을 출력하는 방법…? 출력을 다섯번을 하면 된다. =&gt; 큰따옴표 3개를 앞뒤로 붙인다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19.08.04&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 등호는 == &lt;/li&gt;
&lt;li&gt;if, elif, else 조건문 뒤에는 ” : ” 붙이기 &lt;/li&gt;
&lt;li&gt;else 뒤에는 조건문이 붙지 않는다&lt;/li&gt;
&lt;li&gt;숫자를 표현할때 4/2 =&gt; 2.0 not 2 !!! so 4//2 를 쓰던지, int(4/2) 를 해줘야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Python 한눈에 톺아보기]]></title><description><![CDATA[파이썬 복습을 하기위한 자료]]></description><link>https://rumbarum.github.io//posts/onpagrPython /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/onpagrPython /</guid><pubDate>Sun, 04 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h1 id=&quot;python-뽀개기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#python-%EB%BD%80%EA%B0%9C%EA%B8%B0&quot; aria-label=&quot;python 뽀개기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python 뽀개기&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Print - 프린트다음에 오는 글자들을 출력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;print( “Hello World!“)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;data-type&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#data-type&quot; aria-label=&quot;data type permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Data Type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Integer - 정수&lt;/li&gt;
&lt;li&gt;Float - 소수점이 들어간 숫자&lt;/li&gt;
&lt;li&gt;Complex Num - 실수+ 허수 복소수&lt;/li&gt;
&lt;li&gt;String 문자&lt;/li&gt;
&lt;li&gt;Boolean 조건문 평가값 T/F&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;variable&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#variable&quot; aria-label=&quot;variable permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Variable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;변수 지정 하고 변수 수정 자유로움&lt;/li&gt;
&lt;li&gt;변수이름 = 변수값&lt;/li&gt;
&lt;li&gt;변수 이름 법칙&lt;/li&gt;
&lt;li&gt;변수 이름은 영어 알파벳과 숫자 그리고 underscore (_) 으로만 구성될 수 있습니다.&lt;/li&gt;
&lt;li&gt;변수 이름 첫글자는 알파벳이나 underscore로만 시작해야 합니다. 숫자로는 시작될 수 없습니다.&lt;/li&gt;
&lt;li&gt;영어 알파벳은 대문자와 소문자가 구분이 됩니다 (case sensitive).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;string&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#string&quot; aria-label=&quot;string permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fomatting&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;%-formatting - 코드 가독성이 떨어짐&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Eric&quot;&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;74&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;Hello, %s.You are %s.&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token string&quot;&gt;&apos;Hello Eric. You are 74.&apos;&lt;/span&gt;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;str.format() - 인수가 많아질 경우 복잡해지기 마찬가지&lt;/p&gt;
&lt;p&gt;`&gt;&gt;&gt; person = {‘name’: ‘Eric’, ‘age’: 74}&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello, {name}. You are {age}.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token string&quot;&gt;&apos;Hello, Eric. You are 74.&apos;&lt;/span&gt;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f-String &lt;a href=&quot;https://realpython.com/python-f-strings/#arbitrary-expressions&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://realpython.com/python-f-strings/#arbitrary-expressions&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Eric&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;74&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; f&quot;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; You are &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&quot;&lt;span class=&quot;token string&quot;&gt;&apos;Hello, Eric. You are 74.&apos;&lt;/span&gt;`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;단순, 응용력 좋음, 멀티라인,&lt;/li&gt;
&lt;li&gt;Quotation Mark 1, 2, 3개의 ” “이 앞뒤로 붙어도 된다.&lt;/li&gt;
&lt;li&gt;Dictionaries 데이터도 텍스트에 삽입&lt;/li&gt;
&lt;li&gt;Note - 딕셔너리 데이터 키 이름이 텍스트 인용 부호와 같으면 오류&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;comedian = {‘name’: ‘Eric Idle’, ‘age’: 74}
f’The comedian is {comedian[‘name’]}, aged {comedian[‘age’]}. ’ File ”&lt;stdin&gt;”, line 1 f’The comedian is {comedian[‘name’]}, aged {comedian[‘age’]}.’
^SyntaxError: invalid syntax` 참이 되려면 아래처럼
f”The comedian is {comedian[‘name’]}, aged {comedian[‘age’]}.” ‘The comedian is {comedian[“name”]}, aged {comedian[“age”]}.’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Braces 다중 괄호 가능하다&lt;/li&gt;
&lt;li&gt;앞뒤각각 3개이상일 경우에 앞뒤로 2개 가능 &lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt;&amp;gt; f&amp;quot;{{74}}&amp;quot;
&amp;#39;{74}&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;f string expression 부분에 ” 삽입은 불가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;문자연결&lt;/li&gt;
&lt;li&gt;print(“Hello, ” + “World”)&lt;/li&gt;
&lt;li&gt;name = input() print(f”Hello, {name}“)&lt;/li&gt;
&lt;li&gt;multiple line 표현에는 앞뒤로 “*3 을 붙인다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;number&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#number&quot; aria-label=&quot;number permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;따옴표 들어가면 안됨. “100” ≠ 100&lt;/li&gt;
&lt;li&gt;문자열과 숫자열의 계산 안됨&lt;/li&gt;
&lt;li&gt;수학연산&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가감승제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수나누기 정수값으로 떨어지게 반내림을 한다. &lt;code class=&quot;language-text&quot;&gt;7 // 3 = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;% : 나누고 나머지 값 표현&lt;/li&gt;
&lt;li&gt;+= 3: 변수에 값을 더하고 변수로 지정&lt;/li&gt;
&lt;li&gt;-= 3: 변수에서 값을 뺌 값을 지정&lt;/li&gt;
&lt;li&gt;*= : 변수에 값을 곱한값을 변수로 지정&lt;/li&gt;
&lt;li&gt;/= : 변수를 값으로 나눈 결과를 변수로 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사칙연산 우선순위!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;( )&lt;/li&gt;
&lt;li&gt;** 제곱!&lt;/li&gt;
&lt;li&gt;*, / , 그리고 %&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;와 -&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;white-space--indention&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#white-space--indention&quot; aria-label=&quot;white space  indention permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;white space = indention!!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;js는 괄호로 종속성을 표현하지만 python은 들여쓰기로 종속성을 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;if-statement&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#if-statement&quot; aria-label=&quot;if statement permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If statement&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; expression&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  codes to execute
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;산수는 어렵지 않아요!&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;elif and Else&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;elif = else if&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if 구문과 연결되어 사용, if 다음에 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;if 가 false 일 경우 실행 true 면 if 에서 끝남&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if 나 , else if 가 false 일 경우 실행, 별도의 조건이 필요없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing condition&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and : 여러 조건문 연결&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 조건문이 true 여야 한다. 하나라도 false 가 있으면 실행이 안됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and 의 반대, 테스트 조건중 하나라도 true 이면 코드가 실행이 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nested If Statements&lt;/li&gt;
&lt;li&gt;반복되는 컨디션이 있을때는 nested if statemens 즉 중첩되는 if 구문을 사용&lt;/li&gt;
&lt;li&gt;(간격)으로 구분&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2단계 이상 중첩을 하면 가독성이 너무 떨어지기 때문에 일반적으로 2단계 이상은 잘 하지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;학생&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;취업이 곧 다가온다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;그래도 아직 놀 시간이 있네..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
		&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;한창 놀때지..&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;	
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;	
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;열심히 공부 해서 대학교 부터 가라!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;비교-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EA%B5%90-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;비교 연산자 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비교 연산자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;== : 같다&lt;/li&gt;
&lt;li&gt;!= : 다르다&lt;/li&gt;
&lt;li&gt;”&gt;”: 크다 *string 도 &gt; 으로 비교가능하다 .&lt;/li&gt;
&lt;li&gt;&amp;#x3C; : 작다&lt;/li&gt;
&lt;li&gt;”&gt;=” : 크거나 같다.&lt;/li&gt;
&lt;li&gt;&amp;#x3C;= : 작거나 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;comment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#comment&quot; aria-label=&quot;comment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;#으로 시작한다&lt;/li&gt;
&lt;li&gt;멀티라인삽입 - 가능하나 보통 #으로 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token triple-quoted-string string&quot;&gt;&apos;&apos;&apos;This is a multiline comments. 
이렇게 여러 줄에 걸쳐서 
주석을 삽입하는게 가능합니다...&apos;&apos;&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;best practice는 주석은 최소한으로 사용하는 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Function&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;반복코드의 효과적 사용&lt;/li&gt;
&lt;li&gt;코드의 가독성 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def 함수명(parameter): 문장1 문장2 … 문장N [return 리턴값]&lt;/p&gt;
&lt;p&gt;parameter 와 return 은 optional&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&quot;parameter&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#parameter&quot; aria-label=&quot;parameter permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;parameter&lt;/h4&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;positional arguments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순서대로 값이 parameter로 함수에 전해지는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keyword arguments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순서 대신에 parameter 이름으로 맞추어서 값을 전해준다.&lt;/li&gt;
&lt;li&gt;가독성 향상&lt;/li&gt;
&lt;li&gt;실수 가능성 줄임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mixing positional arguments and keyword arguments 두개를 섞는 것도 가능함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keyword arguments 는 순서가 바뀌어도 상관 없지만 positional arguments 부분은 순서를 지켜줘야 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parameter Default Value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default 값이 정의된 paramter는 함수가 호출될때 값이 넘겨지 않아도 괜찮다.&lt;/li&gt;
&lt;li&gt;값이 넘겨지 않은 경우 default 값이 자동으로 넘겨지게 된다.&lt;/li&gt;
&lt;li&gt;&lt;u&gt;default 값이 정의된 parameter가 default 값이 정의 되지 않은 parameter 보다 먼저 위치해 있으면 안됨 syntax 에러 표현&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;list&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;string, number, boolean 등 모든 타입의 값을 저장할 수 있다.&lt;/li&gt;
&lt;li&gt;samlple&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;korea_provinces &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;강원도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;경기도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;경상도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;전라도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;충청도&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variable 변수명&lt;/li&gt;
&lt;li&gt;Element 구성 요소&lt;/li&gt;
&lt;li&gt;index&lt;/li&gt;
&lt;li&gt;인덱스는 0부터 시작&lt;/li&gt;
&lt;li&gt;index의 마지막은 n-1 (n은 list의 총 길이)&lt;/li&gt;
&lt;li&gt;소환은 ListName[index]&lt;/li&gt;
&lt;li&gt;Adding And Changing Elements To List&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Append :한개의 엘리먼트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;list name&gt; &lt;dot&gt; &lt;append&gt; (element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;: 한개 이상의 엘리먼트 추가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list1 = list1 + list2&lt;/li&gt;
&lt;li&gt;새로 생성된 list를 변수에 다시 지정해 주지 않으면 기존 list들은 수정이 되지 않은 상태로 남아있게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원하는 위치에 element를 삽입&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;서울특별시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;부산광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인천광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대구광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대전광역시&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; cities&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;insert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;제주특별자치도 제주시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; 부산광역시 자리&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; cities&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 에 채워넣음&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 나머지 뒤로 한칸씩 밀린다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

cities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;서울특별시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;제주특별자치도 제주시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;부산광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인천광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대구광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대전광역시&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Empty List&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비어있는 대괄호( )로 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updating Elements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수정하고자 하는 element의 index 값을 통해 list에서 element를 선택한 후 새로운 값을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cities &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;서울특별시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;부산광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인천광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대구광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;대전광역시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;cities&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;경기도 성남시&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;List Slicing&lt;/li&gt;
&lt;li&gt;리스트의 일부분을 따로 copy&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;slicing은 오리지널 list를 수정하는게 아니라, 새로운 list를 만들어 낸다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sample&lt;code class=&quot;language-text&quot;&gt;list_name[start : stop]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start와 stop에는 정수만 들어가야 한다! 2.0 도 안됨!!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slicing Steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list_name[start : stop : step]&lt;/li&gt;
&lt;li&gt;optional&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slicing Tip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start index를 빈칸으로 남겨두면 해당 list의 첫 요소 부터 시작&lt;/li&gt;
&lt;li&gt;stop index를 빈칸으로 남겨두면 start index 부터 끝까지 가져옴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deleting Elements From List&lt;/li&gt;
&lt;li&gt;del ListName[indexNumber]&lt;/li&gt;
&lt;li&gt;Listname.remove(Element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;tuples&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tuples&quot; aria-label=&quot;tuples permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List는 수정이 가능하지만 tuple은 한번 선언되면 수정이 불가능&lt;/li&gt;
&lt;li&gt;[…] =&gt; list , (…) =&gt; tuples&lt;/li&gt;
&lt;li&gt;2개에서 5개 사이의 요소들을 저장할때 사용&lt;/li&gt;
&lt;li&gt;특정 데이터를 ad hoc(즉석적으로) 하게 표현하고 싶을때 사용&lt;/li&gt;
&lt;li&gt;List의 요소들로 tuple을 사용&lt;code class=&quot;language-text&quot;&gt;cords = [ (4,4), (5,2), (-2, 2), (-3, -4) ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;인덱스 할당으로 데이터 입력이 불가능하다.&lt;code class=&quot;language-text&quot;&gt;tuple= (value,...) (가능)``tuple[n] = value (불가능)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;set&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#set&quot; aria-label=&quot;set permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;list의 친척&lt;/li&gt;
&lt;li&gt;ordering이 없다.&lt;/li&gt;
&lt;li&gt;순서가 없으므로 indexing도 없다.&lt;/li&gt;
&lt;li&gt;중복값이 존재하지 않는다. 중복값 입력시 새로운 요소가 이전 요소 대신함&lt;/li&gt;
&lt;li&gt;Set 생성하는 법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중괄호 ({ }) 사용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;set1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set() 함수&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;set2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;set를 만들기 위해서는 list를 parameter로 전달&lt;/li&gt;
&lt;li&gt;set() 함수를 사용해서 set를 만드는 경우는 list를 set로 변환하고 싶을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set에서 새로운 요소 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_set&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Set에서 요소 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_set&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Look Up : value 존재여부 알아보기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_set &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1 is in the set&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; my_set&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;4 is not in the set&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the &lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Intersection (교집합) &amp;#x26; Union (합집합)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;교집합은 &amp;#x26; 키워드 혹은 intersection&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;set1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
set2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;intersection&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;합집합은 | 키워드 혹은 union 함수&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;union&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;dictionary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dictionary&quot; aria-label=&quot;dictionary permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dictionary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;object 는 키에 스트링 표현을 안붙여도 입력이 가능했는데 Dictionary는 그러지가 않는다.&lt;/li&gt;
&lt;li&gt;sample&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;my_dic &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;key1&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;value1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;key2&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;value2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dictionary에서 요소(element) 읽어들이기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DictionaryName[“key Name”]&lt;/li&gt;
&lt;li&gt;Elements add&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DictionaryName[New_Key]=new_value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;동일한 key가 이미 존재할 경우 새로운 값이 대체한다&lt;/li&gt;
&lt;li&gt;Elements fix&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DictionaryName[Key] = fixed Element.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elements remove&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;del DictionaryName[Key]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Looping&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for each_key in DictionaryID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리의 키값들을 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for each_key in DictionaryID.values()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;밸류값들을 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Looping Dictionary With Both Keys And Values&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for each_key, each value in DictionaryID.items()&lt;/li&gt;
&lt;li&gt;Dictionary의 items 함수는 key와 value를 tuple로 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complex Dictionary&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List of Dictionaries&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;손쉽게 여러 dictionary들을 grouping&lt;/li&gt;
&lt;li&gt;특정 dictionary 접근시 코드와 실행 시간이 길어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nested Dictionary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원하는 데이터의 키값으로 바로 찾을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;for-loops&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#for-loops&quot; aria-label=&quot;for loops permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For Loops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;for element in list: do_something_with_element&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For 문은 tuple, set 등에서도 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;Break&lt;/li&gt;
&lt;li&gt;다음 interation으로 넘어가지 않고 for 구문에서 빠져나옴&lt;/li&gt;
&lt;li&gt;Continue&lt;/li&gt;
&lt;li&gt;for 문 안의 추가된 코드 실행안시키고 interation으로 넘어가고 싶을때는 continue&lt;/li&gt;
&lt;li&gt;Nested For Loops&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;  numbers1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  numbers2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; num1 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; numbers1&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; num2 &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; numbers2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; * &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;num2&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; == &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; num2&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;while-loops&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#while-loops&quot; aria-label=&quot;while loops permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;While Loops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 조건문이 True 일 경우에만 코드블록을 반복 실행&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;조건문&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장N&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;number = 0
while number &amp;#x3C;= 10:
print(number) number += 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0…10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Break &amp;amp; Continue

- For문과 동일하게 break는 while문을 강제종료

- continue는 다음 iteration으로 넘어갑니다.

- ```python
  number = 0
  while number &amp;lt;= 10: 
    if number == 9: 
      break 
    elif number &amp;lt;= 5: 
      number += 1 continue 
    else: 
      print(number) 
      number += 1
  
  &amp;gt; 678&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;While Else&lt;/li&gt;
&lt;li&gt;while의 조건문이 False 이면 실행&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;조건문&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;수행할 문장N&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문이 종료된 후 수행할 문장N&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ 19.08.03 작업결과물]]></title><description><![CDATA[Javascript를 통해서 간단한 떨어지는 유령과 움직이는 영웅을 구현 ]]></description><link>https://rumbarum.github.io//posts/19-08-03_outPut/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/19-08-03_outPut/</guid><pubDate>Sat, 03 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/imageForBlog/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-08-03%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.51.49.png&quot;&gt;
유령비가 내려와~~&lt;/p&gt;
&lt;h3 style=&quot;color:rgb(9, 136, 104)&quot;&gt;오늘의 작업물&lt;/h3&gt;
- 1. 바탕화면 깔기
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; DOM div 엘리먼트 생성, CSS 로 background image 불러옴&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;히어로를 가운데서시작하도록&lt;/li&gt;
&lt;li&gt;DOM div로 이미지 컨테이너생성, 컨테이너 child로 이미지 삽입. 컨테이너 위치를 바닥, 가운데로 설정. 삽입된 이미지 position: absolute로 활용해서 원하는 이미지 부분을 불러온다.나머지 부분은 clip-path로 안보이게 삭제,&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;키이벤트 -&gt; 좌우 누를때 히어로 움직이게&lt;/li&gt;
&lt;li&gt;키입력( 좌, 우 키 ) 값을 불러와서 해당 키값별로 컨테이너의 left 값을 조정한다. 히어로 이미지도 수정해서 좌 , 우 모습이 다르게 나오게 한다. 그리고 키입력이 끝나면 다시 정면 모습이 보이게 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;바탕화면 끝 도달하면 더이상 움직이지 않도록&lt;/li&gt;
&lt;li&gt;컨테이너의 위치값 범위를 지정해서 범위 안에서만 움직이도록 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;귀신 하늘에서 시작하도록&lt;/li&gt;
&lt;li&gt;히어로와 마찬가지로 엘리먼트생성하고 이미지를 넣는다&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;랜덤한 x의 위치에서 소환&lt;/li&gt;
&lt;li&gt;Math.floor(Math.random* (최대값 - 최소값)+ 최소값&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;랜덤 함수로 absoulte position 설정해버림.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;귀신 시작한 위치에서 y를 아래로 내려주시면 됩니다.&lt;/li&gt;
&lt;li&gt;setInterval을 이용해서 주기적으로아래로 움직임 부여.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;바닥 도착 하면 죽음&lt;/li&gt;
&lt;li&gt;좌표 바닥 도착후, clearInterval로 계속 실행 되는거 방지&lt;/li&gt;
&lt;li&gt;유령의 이미지 변경&lt;/li&gt;
&lt;li&gt;5초후 setTimeout 으로 유령이미지 컨테이너 삭제해버림&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[ RGB 값으로 내가 원하는 색상을 만들 수 있을까?]]></title><description><![CDATA[바름은(는) css 색상을 지정하다가 색상을 혼자서 만들어 볼 수 있겠다는 생각이 떠올랐다.  어떻게?]]></description><link>https://rumbarum.github.io//posts/understandRGBcolor /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understandRGBcolor /</guid><pubDate>Fri, 02 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.nhn?blogId=midesse&amp;#x26;logNo=220343601395&amp;#x26;proxyReferer=https%3A%2F%2Fwww.google.com%2F&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://m.blog.naver.com/PostView.nhn?blogId=midesse&amp;#x26;logNo=220343601395&amp;#x26;proxyReferer=https%3A%2F%2Fwww.google.com%2F&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;▲ rgb 컬러에 대한 자세한 설명  &lt;/p&gt;
&lt;h2 id=&quot;rgb-숫자로-색깔-만들기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rgb-%EC%88%AB%EC%9E%90%EB%A1%9C-%EC%83%89%EA%B9%94-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;rgb 숫자로 색깔 만들기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rgb 숫자로 색깔 만들기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;rgb  =&gt; Red , Green , Blue 빛의 3원색을 가리킨다. &lt;/li&gt;
&lt;li&gt;빛은 더할 수록 밝아진다. &lt;/li&gt;
&lt;li&gt;에디터에서 rgb 컬러를 표현할때 rgb(n, m, k) 로 표현한다. n, m, k 의 값은 0~ 255 &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른 방식으로 #000000으로 표현도 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 자리마다 0~9+ a~f 로 표현되는 16자리 숫자가 들어간다. 각각의 2자리가 Red, Green,Blue &lt;/li&gt;
&lt;li&gt;hex-html 코드라고도 부른다.  &lt;/li&gt;
&lt;li&gt;검정색 #000000, 흰색 #ffffff  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0은 빛이 없고, 255는 각각의 빛이 최고라고 보면 된다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검정색 rgb (0 ,0 ,0 ),  흰색 rgb (255,255,255) , &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;혼합사례&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;노랑 rgb(255,255,0) #ffff00&lt;/li&gt;
&lt;li&gt;보라 rgb( 120,0,120) #800080&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[08.02 작업물 ]]></title><description><![CDATA[위코드 2주차 프로젝트 트위터 간단하게 클론해보기 ]]></description><link>https://rumbarum.github.io//posts/19-08-02_outPut /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/19-08-02_outPut /</guid><pubDate>Thu, 01 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/imageForBlog/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202019-08-02%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%203.45.01.png&quot; alt=&quot;오늘의 작업물&quot;&gt;&lt;/p&gt;
&lt;h3 style=&quot;color:rgb(9, 136, 104)&quot;&gt;오늘 작업이 끝난 미니터&lt;/h3&gt;
들어간 기능들
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;textarea 글자수 제한, 글자수 표시&lt;/p&gt;
&lt;p&gt;텍스트에어리어 입력값 불러와서 표시&lt;/p&gt;
&lt;p&gt;100자 넘어가면 알림창 뜨고 100자 뒤의 글자 지워버림&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tweet 버튼 누르면, 아래 트위터에 실제로 추가&lt;/p&gt;
&lt;p&gt;데이터에 id, tweet, date 저장&lt;/p&gt;
&lt;p&gt;html 생성자 작동하면서 데이터 불러옴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tweet 개수 왼쪽 프로필에 표시&lt;/p&gt;
&lt;p&gt;데이터 갯수 읽기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;내 tweet 일 경우, 우측에 삭제버튼 나오게&lt;/p&gt;
&lt;p&gt;2번의 생성자를 만들면서, 아이디가 내 이름일 경우 삭제 버튼이 생성되도록 조건 함수 추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;삭제버튼 누르면, 해당 tweet 삭제&lt;/p&gt;
&lt;p&gt;삭제시 event.Target의 parentNode로 타고 올라가 다시 자기를 지우도록 스크립트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최근것이 위로 올라오도록,&lt;/p&gt;
&lt;p&gt;데이터에서 날짜를 정렬해서 순서대로 불러오려고 했는데 그러다가 순차적으로 들어간 데이터를 역순으로 불러와서 정렬&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트윗에 날짜 추가 (2019년 8월 1일)&lt;/p&gt;
&lt;p&gt;데이터에 날짜 프로퍼티 추가하였음&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Flex 알아보기  ]]></title><description><![CDATA[CSS display 요소인 플렉스 정리 ]]></description><link>https://rumbarum.github.io//posts/understandFlexElement /</link><guid isPermaLink="false">https://rumbarum.github.io//posts/understandFlexElement /</guid><pubDate>Thu, 01 Aug 2019 01:23:45 GMT</pubDate><content:encoded>&lt;h2 id=&quot;flex--html-문서내-엘리먼트들의-배열을-도와준다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#flex--html-%EB%AC%B8%EC%84%9C%EB%82%B4-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EB%93%A4%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%8F%84%EC%99%80%EC%A4%80%EB%8B%A4&quot; aria-label=&quot;flex  html 문서내 엘리먼트들의 배열을 도와준다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Flex = Html 문서내 엘리먼트들의 배열을 도와준다.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://flexboxfroggy.com/#koFlex&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://flexboxfroggy.com/#koFlex&lt;/a&gt; 좀더 이해하기 쉽게 만들어주는 게임.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동일레벨의 엘리먼트들을 클래스 셀렉터를 사용해 css 로 display : flex; 를 설정 후 다음의 속성들을 부여한다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;justify-content =&gt; 엘레멘트 그룹 가로배열&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 요소들을 컨테이너의 왼쪽으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;flex-end: 요소들을 컨테이너의 오른쪽으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;center: 요소들을 컨테이너의 가운데로 정렬합니다.&lt;/li&gt;
&lt;li&gt;space-between: 요소들 사이에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;li&gt;space-around: 요소들 주위에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;align-items =&gt;엘레멘트 그룹 세로배열&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 요소들을 컨테이너의 꼭대기로 정렬합니다.&lt;/li&gt;
&lt;li&gt;flex-end: 요소들을 컨테이너의 바닥으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;center: 요소들을 컨테이너의 세로선 상의 가운데로 정렬합니다.&lt;/li&gt;
&lt;li&gt;baseline: 요소들을 컨테이너의 시작 위치에 정렬합니다.&lt;/li&gt;
&lt;li&gt;stretch: 요소들을 컨테이너에 맞도록 늘립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flex-direction - 엘레멘트 그룹내 배열 방법 및 순서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;row: 요소들을 텍스트의 방향과 동일하게 정렬합니다.&lt;/li&gt;
&lt;li&gt;row-reverse: 요소들을 텍스트의 반대 방향으로 정렬합니다.&lt;/li&gt;
&lt;li&gt;column: 요소들을 위에서 아래로 정렬합니다.&lt;/li&gt;
&lt;li&gt;column-reverse: 요소들을 아래에서 위로 정렬합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;order 엘레멘트 그룹내 순서 개별조정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성을 각 요소에 적용할 수 있습니다. order의 기본 값은 0이며, 양수나 음수로 바꿀 수 있습니다.&lt;/li&gt;
&lt;li&gt;0 자기 포지션,&lt;/li&gt;
&lt;li&gt;++ 오른쪽, 아래쪽,&lt;/li&gt;
&lt;li&gt;— 왼쪽, 위쪽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;align-self&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;align-item 개별 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flex-wrap 엘레멘트 그룹내 줄 맞춤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nowrap: 모든 요소들을 한 줄에 정렬합니다.&lt;/li&gt;
&lt;li&gt;wrap: 요소들을 여러 줄에 걸쳐 정렬합니다.&lt;/li&gt;
&lt;li&gt;wrap-reverse: 요소들을 여러 줄에 걸쳐 반대로 정렬합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;flex-flow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-direction과 flex-wrap 합체&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;align-content 엘레멘트 그룹내 ( 여러줄로( flex-wrap: wrap) )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-start: 여러 줄들을 컨테이너의 꼭대기에 정렬합니다.&lt;/li&gt;
&lt;li&gt;flex-end: 여러 줄들을 컨테이너의 바닥에 정렬합니다.&lt;/li&gt;
&lt;li&gt;center: 여러 줄들을 세로선 상의 가운데에 정렬합니다.&lt;/li&gt;
&lt;li&gt;space-between: 여러 줄들 사이에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;li&gt;space-around: 여러 줄들 주위에 동일한 간격을 둡니다.&lt;/li&gt;
&lt;li&gt;stretch: 여러 줄들을 컨테이너에 맞도록 늘립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Html셀렉터, CSS 한눈에 훑어보기   ]]></title><description><![CDATA[Html엘리먼트 셀렉터에 대한 간단한 설명과 Html에 따라다니는 CSS를 키워드 계층도로 정리했습니다.  ]]></description><link>https://rumbarum.github.io//posts/Onepage_HtmlAndCss/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/Onepage_HtmlAndCss/</guid><pubDate>Mon, 29 Jul 2019 02:23:45 GMT</pubDate><content:encoded>&lt;h1 id=&quot;html&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#html&quot; aria-label=&quot;html permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Html&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HyperTextMarkupLanguage : 웹에 표현되는 정보들을 태그라는 표시를 통해 구분해서 보여지도록 하는 언어문법이다. 왜? 구분이 안되면, 정렬이 안되고 제대로 보기가 어렵다.  Html은 element로 구성되어 진다. 그리고 각각의 element 들은 아래 그림처럼 구성되어 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mdn.mozillademos.org/files/7659/anatomy-of-an-html-element.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flukeout.github.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://flukeout.github.io/&lt;/a&gt; 에서 게임으로 배워볼수 있으며  아래에 정리해 놓았다. &lt;/li&gt;
&lt;li&gt;셀렉터 : 구현된 element 들을 골라서 가지고 있는 정보의 수정,삭제등을 할 수 있다. 수많은 element들을 원하는대로 빨리 골라낼수 있도록 다양한 셀렉방식을 지원하다. &lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;https://www.w3schools.com/js/pic_navigate.gif&quot;&gt;&lt;/li&gt;
&lt;li&gt;element들의 상관관계, 최상위에는 Root element 가 있으며 (&lt;html&gt;태그가 달린다.) 하위 element들을 child라고 한다. 같은 단계의 child 끼리는 sibling 이라고 불리며, 첫째부터 막내까지 작성한 순서대로 순서가 정해진다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;셀렉터 적용 방법들 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A B  - A에 속한 B 엘리먼트&lt;/li&gt;
&lt;li&gt;A + B - A의 바로 다음 형제B&lt;/li&gt;
&lt;li&gt;*모든 엘리먼트&lt;/li&gt;
&lt;li&gt;A * -  A 에 속한 모든 엘리먼트&lt;/li&gt;
&lt;li&gt;A ~B  - A를 따르는 모든 B&lt;/li&gt;
&lt;li&gt;A &gt; B - A의 직속자녀인 B&lt;/li&gt;
&lt;li&gt;A:first-child : 첫번째 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A:only-child 혼자있는 A 엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :last-child 마지막 A 엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :nth-child(m) :m번째 , A 엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :nth-last-child(m) : 뒤에서 m 번째 A엘리먼트 선택&lt;/li&gt;
&lt;li&gt;A :first-of-type -첫번째 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A: nth-of-type(odd / even) - 홀/짝 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A: nth-of-type( Xn+B) - B순서부터 매 X번째 엘리먼트, B 포함됨&lt;/li&gt;
&lt;li&gt;A:only-of-type A 종류의 엘리먼트만 선택&lt;/li&gt;
&lt;li&gt;A:last-of-type : 마지막 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A:empty 비어있는 모든 A 엘리먼트&lt;/li&gt;
&lt;li&gt;A:not(X) - X가 포함되어 있지 않은 모든 A , X는 id, class, tag 복수조건 가능하다.&lt;/li&gt;
&lt;li&gt;[attribute] attribute가진 엘리먼트&lt;/li&gt;
&lt;li&gt;A[attribute] attribute를 가진 A&lt;/li&gt;
&lt;li&gt;[attribute=“value”] - attribute===value&lt;/li&gt;
&lt;li&gt;[attribute^=“value”] - attibute가 value로 시작&lt;/li&gt;
&lt;li&gt;[attribute$=“value”] - attibute가 value로 종료&lt;/li&gt;
&lt;li&gt;[attribute*=“value”] -attibute가 value를 포함하고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;css&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css&quot; aria-label=&quot;css permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://www.nextree.co.kr/content/images/2016/09/yrkim-140327-selector-04.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&quot;css-적용하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;css 적용하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;css 적용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&quot;css-셀렉터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css-%EC%85%80%EB%A0%89%ED%84%B0&quot; aria-label=&quot;css 셀렉터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;css 셀렉터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;셀렉터 구분&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클래스와 ID들은 대소문자를 구분하며 문자로 시작해야 하며 영어, 숫자와 언더바(_), 대쉬(-)를 포함할 수 있다.&lt;/li&gt;
&lt;li&gt;클래스는 어떠한 수의 요소에도 적용할 수 있다.&lt;/li&gt;
&lt;li&gt;ID는 하나의 요소에만 적용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;셀렉터 적용 순서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline styling &gt;&gt;&gt; &gt;id&gt;&gt;&gt;, class &gt; , tag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;상속과-그룹&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D%EA%B3%BC-%EA%B7%B8%EB%A3%B9&quot; aria-label=&quot;상속과 그룹 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상속과 그룹&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;묶어서 적용하기, 골라서 적용하기,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- p.pp  - p태그 이면서 pp클래스
- p .pp - p태그 아래의  pp클래스
- p#pp - p태그 이면서 pp아이디
- p #pp- - p태그 이면서 pp아이디
- p p p .pp #pp- p태그의 p태그의 p태그의 pp클래스의 pp 아이디&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;태그 속성 셀렉팅’tag::attribute { }’&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동작 셀렉팅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;마우스 변경 button:hover {cursor : pointer }&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;선언 (declaration) - 속성과 속성값을 지정한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;폰트 조절 속성들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;폰트의 적용&lt;/li&gt;
&lt;li&gt;family -폰트 종류&lt;/li&gt;
&lt;li&gt;size -크기&lt;/li&gt;
&lt;li&gt;weight 굵기 일반 400, bold 700&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문구 스타일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가, 왼, 오 정렬 =&gt; text-align : center, left, right&lt;/li&gt;
&lt;li&gt;  스페이스 삽입&lt;/li&gt;
&lt;li&gt;”&lt;blockquote&gt;” 인용문 삽입 태그&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마진, 보더, 패딩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;보더 : 선굵기, 스타일(solid, dot, dash…), 색상&lt;/li&gt;
&lt;li&gt;보더의 길이가 각기 다르게 설정가능하다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;박스사이징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element 영역을 보더로 통일&lt;/li&gt;
&lt;li&gt;{box-sizing: border-box;} &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;적용순서 - 위 오 아 왼 시계방향&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;margin, padding, border: 0px = 0px 0px 0px 0px&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;margin, padding, border: 0px 5 px = 0px 5px 0px 5px&lt;/li&gt;
&lt;li&gt;margin: ???px auto ; 로 좌우 같게 자동으로 할 수있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹페이지 이미지 삽입하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;img 태그 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;css로도 삽입이 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가로 화면 크기&lt;/li&gt;
&lt;li&gt;세로 div의 내용 만큼 사이즈&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;img 처럼 height,width 로 조정이 안될 수있다. 영역만 조정. 조정하려면 일치시켜야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;background-size : ~%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;css- backgroundimage 와 img 의 차이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;backgroundimage는 % 사이즈 조절이 가능함, 100보다 작으면 다중이미지, 크면 부분적이미지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;레이아웃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;block vs inline&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p, div, li, table ==(display : inline-block)==&gt;인라인&lt;/li&gt;
&lt;li&gt;span, img, a =(float: left || right , display: block )=&gt; 블록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가운데 정렬 위아래패딩 auto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;list&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트 스타일 dot, number, none&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;table&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테이블 구성요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;table, th (tr, td )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;셀병합 ( 태그에 속성 삽입)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;가로 병합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;colspan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세로병합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rowspan&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;number&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;” - ” 삽입 불가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;value 미리 설정해놓은값&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;place holder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;셀렉트 ‘input::placeholder { }’&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;textarea input type=“text” 보다 긴 데이터 입력시 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Position&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;relative 부모&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;absolute 자식 relative 부모가 없으면 작동이 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fixed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;절대 고정, 위아래로 움직이거나 말거나 상관없음 (부모안에서)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;레이아웃.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;semantic element - 담고있는 콘텐츠를 예상 할 수 있게 해주는 태그들&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경험이 재산이다 .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;header, asider, nav, footer, section, article, figure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;float&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;레이아웃 구조짤때 활용하기 좋음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mediaquery&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 환경변화에 따라 동적인 변화가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;추가 템플릿과 유사하게 작용하는 태그들은 기본 포맷이 적용되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FLEX - &lt;a href=&quot;https://flexboxfroggy.com/#ko&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://flexboxfroggy.com/#ko&lt;/a&gt; 플렉스 배우기 게임&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[바름이는 어쩌다가 개발자가 되기로 했을까? ]]></title><description><![CDATA[코딩 부트캠프... 어떡하다가??]]></description><link>https://rumbarum.github.io//posts/WebDevStart/</link><guid isPermaLink="false">https://rumbarum.github.io//posts/WebDevStart/</guid><pubDate>Sun, 28 Jul 2019 01:23:45 GMT</pubDate><content:encoded>&lt;!-- 
![ㅇㅇㅇ](/media/rumbarum.png) --&gt;
&lt;h2 id=&quot;첫-헛발질&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B2%AB-%ED%97%9B%EB%B0%9C%EC%A7%88&quot; aria-label=&quot;첫 헛발질 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;첫 헛발질&lt;/h2&gt;
&lt;p&gt;내 생에 개발자를 한번 해볼까 제일 먼저  생각을 했던 때는 2009년이다. 당시 모토로라의 첫 안드로이드 폰(Droid )의 국내 출시와 연이은 아이폰의 3gs 출시로 모바일 앱 시장이 불타올랐다. 단순한 포켓볼게임 출시로 몇십만 달러를 버는 개발자가 나오고, 초등학생의 낱말퍼즐 앱이 100만 달러 넘게 벌여들인다는 기사가 나왔다. 그래서 나도 아이디어를 내어 뭔가 만들면 돈 좀 벌어 볼 수 있을까 싶었다. 그러나 무엇을, 어떻게, 어디서 배워야 할지 몰라 마음만 앞섰다. 그 마음은 금방 흐지부지 되고 말았다. 그 뒤로는 내 길이 아닌 가보다 하고 손 놓고 멀어졌다. &lt;/p&gt;
&lt;h2 id=&quot;두번째로-헛발질&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%91%90%EB%B2%88%EC%A7%B8%EB%A1%9C-%ED%97%9B%EB%B0%9C%EC%A7%88&quot; aria-label=&quot;두번째로 헛발질 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;두번째로 헛발질?&lt;/h2&gt;
&lt;p&gt;시간이 흐르고 흘러 나는 O2O(online to offline)서비스를 제공하는 스타트업에 취업을 했다. IT 부서는 당연히 아니고 운영쪽 인력으로 투입되었다. 실물을 취급해서 온라인으로 파는 회사였는데 실물 장사는 많이 어렵다는 것을 배웠다. 그 회사 다음 다음 으로 새 일을 구하고 있을때 대표가 software 엔지니어를 추천했다. 내가 가끔씩 틀리는 사람인데 개발은 틀리면 기계가 틀리는 걸 잡아준다고 했다. 그리고 C.S.( Computer Science) 쪽은 계속해서 성장하는 시장이라고도 했다. 다른 스타트업들 일자리를 알아봤는데 운영은 발전 방향이 안보였고, 디자인은 내 재능 밖의 일이고, 개발자가 적성에 맞지 않을까 싶었다. 찾아보니 단기간에 개발자로 전향하게 도와주는 교육 회사와 프로그램들이 많았다. &lt;/p&gt;
&lt;h2 id=&quot;개발질ing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%A7%88ing&quot; aria-label=&quot;개발질ing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발질ing.&lt;/h2&gt;
&lt;p&gt;그 중에 위코드를 고른 이유는 어떡하다보니… 원래 가려고 생각하던 곳을 못가게 되면서 다른데를 알아보다가 대표님과 상담하고 괜찮다고 느꼈다. 개발뽐뿌가 퐉퐉퐉 그리고 나서 다음날 바로 등록하기로 결정. 코스 시작전에 사전 안내된 강의들을 들으면서 들어갈 준비 하고
7.29 wecode 3기 시작!
​&lt;/p&gt;
&lt;h2 id=&quot;그-끝에는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8-%EB%81%9D%EC%97%90%EB%8A%94&quot; aria-label=&quot;그 끝에는 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그 끝에는?&lt;/h2&gt;
&lt;p&gt;대학 다니면서, 졸업하고 내가 제일 아쉬웠던건 건축학과를 들어가보지 못한 거였다. 내가 갖고 있는 재능이 건축쪽 요구되는 재능(공간지각력)과 상통한다고 느꼈었기 때문이다. 그러면서도 나의 부족함 (꼼꼼하지 못함)이 실수들을 만들어 낼 것 같은 두려움에 용기를 내어 뛰어들지 못했다. 생각해보니 개발을 한다는 것도 건축과 비슷하겠다는 생각을 하게 되었다. 재료와 결과만 다르지, 과정은 동일하지 않을까. 유능한 Web Product Builder 가 되면 좋겠다.&lt;/p&gt;</content:encoded></item></channel></rss>