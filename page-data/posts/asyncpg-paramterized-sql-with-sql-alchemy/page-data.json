{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/asyncpg-paramterized-sql-with-sql-alchemy/","result":{"data":{"markdownRemark":{"id":"fefb8ef0-1514-5f75-a4ad-eb4f0babc7b3","html":"<h2 style=\"color:rgb(9, 136, 104)\"> </h2>\n<h3 id=\"상황\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%99%A9\" aria-label=\"상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상황</h3>\n<ul>\n<li>팀 내에서 웹 프레임워크 기존 <code class=\"language-text\">Flask</code> =>  <code class=\"language-text\">FastAPI</code>로 이전</li>\n<li>기존 기능들 동작하게 <code class=\"language-text\">FastAPI</code> 세팅</li>\n<li>DB driver psycopg2 -> asyncpg 로 변경</li>\n</ul>\n<h3 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h3>\n<ul>\n<li><code class=\"language-text\">f-string</code> 으로 되어있는 SQL문 Parameterized로 변환 (SQL Injection 방지) -> sqlalchemy.AsyncEngine 계속 에러남</li>\n</ul>\n<h3 id=\"python에서-sql에-변수-넣기\" style=\"position:relative;\"><a href=\"#python%EC%97%90%EC%84%9C-sql%EC%97%90-%EB%B3%80%EC%88%98-%EB%84%A3%EA%B8%B0\" aria-label=\"python에서 sql에 변수 넣기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python에서 SQL에 변수 넣기</h3>\n<ul>\n<li>Python DB API 상 Parameterized 변수들은 <code class=\"language-text\">%s</code>  or <code class=\"language-text\">%(named_parameter)s</code> or <code class=\"language-text\">:named_parameter</code> 를 사용</li>\n<li>\n<p>Asyncpg (github star over 5,000…) 은 <code class=\"language-text\">$1, $2, ...</code> 로만 변수 받음, named_parameter 안받음.</p>\n<ul>\n<li><a href=\"https://github.com/MagicStack/asyncpg/issues/605#issuecomment-683192217\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">asyncpg maintainer의 답변</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"asyncengine과-async-connection에-query들-집어넣어봄\" style=\"position:relative;\"><a href=\"#asyncengine%EA%B3%BC-async-connection%EC%97%90-query%EB%93%A4-%EC%A7%91%EC%96%B4%EB%84%A3%EC%96%B4%EB%B4%84\" aria-label=\"asyncengine과 async connection에 query들 집어넣어봄 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AsyncEngine과, Async Connection에 Query들 집어넣어봄</h4>\n<ul>\n<li><code class=\"language-text\">Sqlalchemy</code> 의 <code class=\"language-text\">AsyncEngine</code>으로  <code class=\"language-text\">query</code>에 변수 집어 넣으려고 하는데…</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT ... FROM TableA WHERE ID = :named_parameter\"</span>\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"named_parameter\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> async_engine_<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>-> asyncpg not support named parameter</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT ... FROM TableA WHERE ID = $1 AND LIMIT $2\"</span>\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>val1<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">with</span> async_engine_<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>-> sqlalchemy.exc.ArgumentError: List argument must consist only of tuples or dictionaries</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT ... FROM TableA WHERE ID = $1 AND LIMIT $2 \"</span>\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>val1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>val2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">with</span> async_engine_<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sqlalchemy.exc.DBAPIError: (sqlalchemy.dialects.postgresql.asyncpg.Error) &lt;class &#39;asyncpg.exceptions.InvalidDatetimeFormatError&#39;&gt;: invalid input syntax for type timestamp with time zone: &quot;$1&quot;\n[SQL: \n    SELECT ... FROM TableA WHERE ID = $1 AND LIMIT $2\n    ]\n(Background on this error at: https://sqlalche.me/e/14/dbapi)</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT ... FROM TableA WHERE ID = $1 AND LIMIT $2 \"</span>\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>val1<span class=\"token punctuation\">,</span>val2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">with</span> async_engine_<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sqlalchemy.exc.DBAPIError: (sqlalchemy.dialects.postgresql.asyncpg.Error) &lt;class &#39;asyncpg.exceptions.InvalidDatetimeFormatError&#39;&gt;: invalid input syntax for type timestamp with time zone: &quot;$1&quot;\n[SQL: \n\tSELECT ... FROM TableA WHERE ID = $1 AND LIMIT $2\n    ]\n[parameters: ((), ())]</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT ... FROM TableA WHERE ID = $1 AND LIMIT $2 \"</span>\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"$1\"</span><span class=\"token punctuation\">:</span> val1<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"$2\"</span><span class=\"token punctuation\">:</span> val2\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> async_engine_<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sqlalchemy.exc.DBAPIError: (sqlalchemy.dialects.postgresql.asyncpg.Error) &lt;class &#39;asyncpg.exceptions.InvalidDatetimeFormatError&#39;&gt;: invalid input syntax for type ...\n[SQL: \n\tSELECT ... FROM TableA WHERE ID = $1 AND LIMIT $2\n ]</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> text\n\nsql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT ... FROM TableA WHERE ID = :val1 AND LIMIT :val2 \"</span>\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"val1\"</span><span class=\"token punctuation\">:</span> val1<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"val2\"</span><span class=\"token punctuation\">:</span> val2\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">with</span> async_engine_<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bindparams<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sqlalchemy.exc.ProgrammingError: (sqlalchemy.dialects.postgresql.asyncpg.ProgrammingError) &lt;class &#39;asyncpg.exceptions.UndefinedTableError&#39;&gt;: relation &quot;log_data.$1&quot; does not exist\n[SQL: \nSELECT ... FROM TableA WHERE ID = :%s AND LIMIT %s \n    ]\n[parameters: (&#39;val1&#39;, &#39;val2&#39;]\n(Background on this error at: https://sqlalche.me/e/14/f405)</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> text\n\nsql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT ... FROM TableA WHERE ID = :val1 AND LIMIT :val2 \"</span>\nparam <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>val1<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">with</span> async_engine_<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bindparams<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AttributeError: &#39;list&#39; object has no attribute &#39;_orig_key&#39;</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"알게된-것\" style=\"position:relative;\"><a href=\"#%EC%95%8C%EA%B2%8C%EB%90%9C-%EA%B2%83\" aria-label=\"알게된 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알게된 것</h3>\n<ul>\n<li>sqlalchemy에서 asyncpg 불러서 excute with param으로 처리할때 param이 적용이 안된다. </li>\n<li>\n<p>그 이유는 </p>\n<ul>\n<li>\n<p>asyncpg.connection()  execute param 처리가 파이썬 다른 driver 들과 다르다!!</p>\n<ul>\n<li>execute param type != sequential</li>\n<li>*param으로 처리함 (positional arg로 처리함)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>그래서</p>\n<ul>\n<li>asyncpg connection pool 소환함</li>\n</ul>\n</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Any<span class=\"token punctuation\">,</span> Optional\n<span class=\"token keyword\">from</span> core<span class=\"token punctuation\">.</span>config <span class=\"token keyword\">import</span> config\n<span class=\"token keyword\">import</span> asyncpg\n\nSIZE_POOL_MAX <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\nSIZE_POOL_MIN <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncpgPool</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Async DB driver Class\n    \"\"\"</span>\n\n    asyncpg_pool<span class=\"token punctuation\">:</span> Optional<span class=\"token punctuation\">[</span>asyncpg<span class=\"token punctuation\">.</span>Pool<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_asyncpg_pool</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> asyncpg<span class=\"token punctuation\">.</span>Pool<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> cls<span class=\"token punctuation\">.</span>asyncpg_pool <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            cls<span class=\"token punctuation\">.</span>asyncpg_pool <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> asyncpg<span class=\"token punctuation\">.</span>create_pool<span class=\"token punctuation\">(</span>\n                config<span class=\"token punctuation\">.</span>ASYNCPG_DB_URL<span class=\"token punctuation\">,</span> min_size<span class=\"token operator\">=</span>SIZE_POOL_MIN<span class=\"token punctuation\">,</span> max_size<span class=\"token operator\">=</span>SIZE_POOL_MAX\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>asyncpg_pool\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">close_asyncpg_pool</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> cls<span class=\"token punctuation\">.</span>asyncpg_pool<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">await</span> cls<span class=\"token punctuation\">.</span>asyncpg_pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cls<span class=\"token punctuation\">.</span>asyncpg_pool <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Any<span class=\"token punctuation\">:</span>\n        pool <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> cls<span class=\"token punctuation\">.</span>get_asyncpg_pool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> pool<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> param <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> param<span class=\"token punctuation\">:</span>\n                data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>param<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">]</span>\n\n    <span class=\"token decorator annotation punctuation\">@classmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Any<span class=\"token punctuation\">:</span>\n        pool <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> cls<span class=\"token punctuation\">.</span>get_asyncpg_pool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> pool<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> con<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> con<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> con<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> result\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">on_start_up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> AsyncpgPool<span class=\"token punctuation\">.</span>get_asyncpg_pool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">on_shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> AsyncpgPool<span class=\"token punctuation\">.</span>close_asyncpg_pool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n        \napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span>\n  on_start <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>AsyncpgPool<span class=\"token punctuation\">.</span>on_start_up<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  on_shutdown <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>AsyncpgPool<span class=\"token punctuation\">.</span>on_shutdown<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\n  \n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/query\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  table_name <span class=\"token operator\">=</span> <span class=\"token string\">\"some_table\"</span>\n  limit <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  query <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"SELECT * FROM log_data.</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>table_name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> limit $1\"</span></span>    \n  data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> AsyncpgPool<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>","fields":{"slug":"/posts/asyncpg-paramterized-sql-with-sql-alchemy/","tagSlugs":["/tag/asyncpg/","/tag/sql/","/tag/async/"]},"frontmatter":{"date":"2022-11-02T01:23:45.678Z","description":"현상보다 전제를 의심하는편이 디버깅에 좋을 지도 ","tags":["asyncpg","sql","async"],"title":" Sqlalchemy + Asyncpg Raw SQL"}}},"pageContext":{"slug":"/posts/asyncpg-paramterized-sql-with-sql-alchemy/"}},"staticQueryHashes":["251939775","3613830147","401334301"]}