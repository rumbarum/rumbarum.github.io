{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/makeUserPasswordEncrypted/","webpackCompilationHash":"0cafc3c4cbab5381b6ff","result":{"data":{"markdownRemark":{"id":"f36d90ef-60cb-5795-86ac-c69c632a6c97","html":"<h2 style=\"color:rgb(9, 136, 104)\"> 유저 PW 암호화 해야되? </h2>\n<h3 id=\"네-해야합니다\"><a href=\"#%EB%84%A4-%ED%95%B4%EC%95%BC%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"네 해야합니다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>네 해야합니다.</strong></h3>\n<ol>\n<li>내부 이용자들의 접근방지 (유저의 정보 악용 방지)</li>\n<li>서버 해킹시 비밀번호 유출 방지 (해킹해도 PW가 암호화 되어 있어 알수가 없다.)</li>\n</ol>\n<h3 id=\"어려운거-아니야\"><a href=\"#%EC%96%B4%EB%A0%A4%EC%9A%B4%EA%B1%B0-%EC%95%84%EB%8B%88%EC%95%BC\" aria-label=\"어려운거 아니야 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>어려운거 아니야?</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 내가 만들려고 하면 어려울 수도 있습니다.</code></pre></div>\n<p> \t2. 하지만 남이 만들어 놓은걸 가져다 쓸 수도 있죠!</p>\n<h4 id=\"argon2\"><a href=\"#argon2\" aria-label=\"argon2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Argon2</strong></h4>\n<ol>\n<li>기존에 사용하던 암호화가 고오급 기술들의 등장으로 보안 취약점이 드러나며 탄생</li>\n<li>2015년 7월 Password Hassing Competition에서 우승함</li>\n<li>어떤 원리로 작동하는지 자세한 설명은… 생략한다… </li>\n</ol>\n<p><strong>설치</strong> </p>\n<p>가상환경에 설치를 원하면 가상환경을 키고, 아니라면 그냥 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python <span class=\"token operator\">-</span>m pip install argon2_cffi</code></pre></div>\n<p>혹시 문제가 발생한다면, </p>\n<p><a href=\"https://argon2-cffi.readthedocs.io/en/stable/installation.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://argon2-cffi.readthedocs.io/en/stable/installation.html</a> 를 참고.</p>\n<p><strong>실제 코드 적용하기</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#userdatamanage/views.py  &lt;== 유저 정보 관리 </span>\n\n<span class=\"token comment\">#user_id = UserA, user_pw = 1234567890 로 회원가입 가정 </span>\n\n<span class=\"token keyword\">from</span> argon2 <span class=\"token keyword\">import</span> PasswordHasher\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> UserdataModel\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse \n<span class=\"token keyword\">import</span> json\n\nph <span class=\"token operator\">=</span> PasswordHasher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Signup</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#회원가입 에러는 없는걸로 가정</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n        data<span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">hash</span> <span class=\"token operator\">=</span> ph<span class=\"token punctuation\">.</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_pw\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#user_pw 암호화</span>\n        user <span class=\"token operator\">=</span> UserdataModel<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> user_pw<span class=\"token operator\">=</span><span class=\"token builtin\">hash</span><span class=\"token punctuation\">)</span>\n        user<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#암호화된 pw를 db에 저장</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Signup Success\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Login</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  \n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>  \n            user <span class=\"token operator\">=</span> UserdataModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            ph<span class=\"token punctuation\">.</span>verify<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>user_pw<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_pw\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#db에 저장된 암호와 로그인 입력된 암호 검증</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Login Success\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        \n        exception Userdata<span class=\"token punctuation\">.</span>DoesNotExist<span class=\"token punctuation\">:</span>   <span class=\"token comment\">#user_id 가 탐색이 안되는 경우</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Check ID\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">)</span>\n         \n        exception VerifyMismatchError  <span class=\"token comment\">#저장된 pw가 일치하지 않는 경우 </span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Check PW\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">402</span><span class=\"token punctuation\">)</span>      </code></pre></div>\n<p><strong>작동확인</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> userdata<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> UserdataModel\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>Userdata<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>ger<span class=\"token punctuation\">(</span>user_id<span class=\"token operator\">=</span><span class=\"token string\">\"UserA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>user_pw\n<span class=\"token string\">'$argon2id$v=19$m=102400,t=2,p=8$7I9cn0C1AgOwz3y+Ezl7hQ$AWYpL4yxd5UDAaXn5T8HMQ'</span></code></pre></div>\n<p>위와 같이 되어 있고, 이를 원상복귀(1234567890) 할 수  없다. </p>\n<p>확인하기 위해 입력한 암호에 대해서  true OR exception을 출력할 뿐이다.  </p>\n<p>참조 사이트 </p>\n<p><a href=\"https://argon2-cffi.readthedocs.io/en/stable/api.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://argon2-cffi.readthedocs.io/en/stable/api.html</a></p>","fields":{"slug":"/posts/makeUserPasswordEncrypted/","tagSlugs":["/tag/backend/","/tag/argon-2/","/tag//"]},"frontmatter":{"date":"2019-08-24T02:23:45.678Z","description":"암호화 생각보다 어렵지 않아요.","tags":["Backend","Argon2",""],"title":"Argon2를 이용한 유저 PW 암호화 "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/makeUserPasswordEncrypted/"}}}