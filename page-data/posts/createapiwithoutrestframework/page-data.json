{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/createapiwithoutrestframework/","webpackCompilationHash":"96fec430fbc5492c35b4","result":{"data":{"markdownRemark":{"id":"ac4d8e49-804a-5d13-8e50-f405e93b1d67","html":"<h2 style=\"color:rgb(9, 136, 104)\">간단한 Json을 보여주는 API를 만들겁니다.</h2>\n( python, conda, django, pip 의 설치 내용은 이번글에 포함되지 않습니다 . )\n<p><a href=\"https://www.youtube.com/watch?time_continue=707&#x26;v=s9E5EYAm5gs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.youtube.com/watch?time_continue=707&#x26;v=s9E5EYAm5gs</a> </p>\n<p>위 유튜브의 내용을 3.7 python에 맞추어 정리해보았습니다. </p>\n<ol>\n<li>\n<h4 id=\"shell-프로젝트-담을-폴더로-이동-후-프로젝-장고프로젝트-스타트\"><a href=\"#shell-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%8B%B4%EC%9D%84-%ED%8F%B4%EB%8D%94%EB%A1%9C-%EC%9D%B4%EB%8F%99-%ED%9B%84-%ED%94%84%EB%A1%9C%EC%A0%9D-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8A%A4%ED%83%80%ED%8A%B8\" aria-label=\"shell 프로젝트 담을 폴더로 이동 후 프로젝 장고프로젝트 스타트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell] 프로젝트 담을 폴더로 이동 후 프로젝 장고프로젝트 스타트</h4>\n<p>프로젝트는 만드려고 하는 웹페이지의 전체(프론트엔드, 백엔드 총괄//보여지는 부분과 보이지 않지만 동작하고 있는 기능, 데이터베이스)를 통칭한다고 보시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">django<span class=\"token operator\">-</span>admim startproject someproject  <span class=\"token comment\"># &lt;== shell 에서 입력 </span></code></pre></div>\n</li>\n<li>\n<h4 id=\"shell-프로젝트-폴더에서-앱만들기\"><a href=\"#shell-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8F%B4%EB%8D%94%EC%97%90%EC%84%9C-%EC%95%B1%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"shell 프로젝트 폴더에서 앱만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell] 프로젝트 폴더에서 앱만들기</h4>\n<p>앱은 프로젝트를 이루는 구동 단위 입니다. 페이지라기 보다는, 로그인 기능, 결제 기능등등의 기능 단위로 이해하시면 됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py startapp someapp <span class=\"token comment\"># &lt;== shell 에서 입력 </span></code></pre></div>\n</li>\n<li>\n<h4 id=\"shell-세팅-변경\"><a href=\"#shell-%EC%84%B8%ED%8C%85-%EB%B3%80%EA%B2%BD\" aria-label=\"shell 세팅 변경 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell] 세팅 변경</h4>\n<p>프로젝트의 세팅을 변경해서 원하는 세팅으로 작동할 수 있도록 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">vi someproject<span class=\"token operator\">/</span>settings<span class=\"token punctuation\">.</span>py <span class=\"token comment\">#&lt;== vim으로 파일을 열고 </span>\n\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n <span class=\"token string\">'someapp'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#&lt;== 추가후 저장 하시면 됩니다.</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p><u>*vim 설명 : 터미널에서 작동하는 텍스트 에디터, 파일을 열면 기본은 view 모드 입니다. 수정을 하기 위해서는 i 키를 눌러야 삽입모드가 됩니다. 원하는 텍스트로 수정후  :wq 를 입력하면 저장후 종료가 됩니다.</u> </p>\n</li>\n<li>\n<h4 id=\"shell-url-변경\"><a href=\"#shell-url-%EB%B3%80%EA%B2%BD\" aria-label=\"shell url 변경 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell] url 변경</h4>\n<p>url은 앱을 구동시키기 위한 경로입니다. 홈페이지 상에서 연결되는 페이지 경로라기 보다는, 설정한 기능을 불러오는 경로라고 보시면 됩니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">vi someproject<span class=\"token operator\">/</span>urls<span class=\"token punctuation\">.</span>py <span class=\"token comment\"># &lt;== vim으로 파일을 열고 </span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path<span class=\"token punctuation\">,</span> include  <span class=\"token comment\">#&lt;== django.urls에서 경로설정을 하기 위해 필요한 path, include\t를 불러옵니다 .</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin  <span class=\"token comment\"># 장고의 기본 관리자 설정을 불러옵니다. </span>\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>                   <span class=\"token comment\">#url 경로를 설정하는 양식입니다. </span>\n\npath <span class=\"token punctuation\">(</span> <span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'admin.urls.py'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#메인 페이지 경로에 admin/추가시 'admin.urls.py'을 참조합니다.</span>\n\npath <span class=\"token punctuation\">(</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">(</span><span class=\"token string\">'someapp.urls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#메인 페이지경로에서 someapp.urls 주소를 참조합니다. 프로젝트의 url이 앱의 url을 가르키도록 설정합니다.  </span>\n\n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">vi someapp<span class=\"token operator\">/</span>urls<span class=\"token punctuation\">.</span>py  <span class=\"token comment\"># &lt;== vim으로 파일을 열고 </span>\n \n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path  <span class=\"token comment\">#  마찬가지로 someapp에서도 경로설정을 위해 path를 불러옵니다. include는 필요하지 않습니다. </span>\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>     <span class=\"token comment\">#앱에서 어떤 로직을 불러올지 설정합니다. </span>\n\npath <span class=\"token punctuation\">(</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>content_list<span class=\"token punctuation\">)</span> <span class=\"token comment\">#views.content_list는 someapp이 불러올 실행코드(view)입니다. </span>\n\n<span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<h4 id=\"shell-views-세팅-후-서버-작동-확인\"><a href=\"#shell-views-%EC%84%B8%ED%8C%85-%ED%9B%84-%EC%84%9C%EB%B2%84-%EC%9E%91%EB%8F%99-%ED%99%95%EC%9D%B8\" aria-label=\"shell views 세팅 후 서버 작동 확인 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell] views 세팅 후 서버 작동 확인</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">vi someapp<span class=\"token operator\">/</span>views<span class=\"token punctuation\">.</span>py   <span class=\"token comment\"># &lt;== vim으로 파일을 열고 </span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse  <span class=\"token comment\">#JsonResponse 라는 반응을 가져옵니다. </span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">content_list</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>            <span class=\"token comment\">#Http Request가 올때 함수를 작성합니다. </span>\n   data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'title1'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">]</span> <span class=\"token comment\"># 리턴할 데이터 입니다. 들여쓰기는 화이트스페이스4칸입니다.</span>\n   <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 데이터를 Json 형식으로 리턴합니다. </span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py runserver   <span class=\"token comment\"># &lt;== shell에서 실행, django를 이용한 개발서버를 활성화 시킵니다.</span>\n\nhttp<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8000</span><span class=\"token operator\">/</span> <span class=\"token comment\"># &lt;== 브라우저로 주소로 들어가 3.에서 입력한 데이터가 나오는지 확인합니다. 나오지 않는다면 어딘가 틀렸단 얘기입니다. (제 설명이 틀리지 않았다면요...)</span></code></pre></div>\n</li>\n<li>\n<h4 id=\"shell-models-세팅\"><a href=\"#shell-models-%EC%84%B8%ED%8C%85\" aria-label=\"shell models 세팅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell ]models 세팅</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models <span class=\"token comment\"># &lt;== 작성할 DB모델을 불러옵니다. </span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Content</span> <span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># &lt;== Content 라는 DB class를 선언합니다. </span>\n\n   title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># DB의 값을 설정합니다. models.CharField는 max_length를 필수 인자로 받습니다. 그외의 조건들을 추가할 수 있습니다. </span>\n\n   content <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n   created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#models.DateTimeField 시간을 입력하는 DB model value입니다. auto_now_add 는 입력할때의 값으로 고정이 됩니다. </span>\n\n   updated_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#auto_now 데이터 저장시에 그 시점으로 업데이트되어 저장됩니다. </span></code></pre></div>\n</li>\n<li>\n<h4 id=\"shell-db-생성하기\"><a href=\"#shell-db-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"shell db 생성하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell] DB 생성하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py migrate  \n\npython manage<span class=\"token punctuation\">.</span>py makemigrations someapp <span class=\"token comment\"># DB 가 위에서 설정한 모델의 설정을 저장할 수 있도록 준비합니다. </span>\n\npython manage<span class=\"token punctuation\">.</span>py migrate someapp <span class=\"token comment\"># model 설정을 DB에 적용합니다.  </span></code></pre></div>\n</li>\n<li>\n<h4 id=\"shell-admin-에서-db-에-등록-할-수-있도록-기능-추가\"><a href=\"#shell-admin-%EC%97%90%EC%84%9C-db-%EC%97%90-%EB%93%B1%EB%A1%9D-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80\" aria-label=\"shell admin 에서 db 에 등록 할 수 있도록 기능 추가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[shell] admin 에서 DB 에 등록 할 수 있도록 기능 추가</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">vi someapp<span class=\"token punctuation\">.</span>admin<span class=\"token punctuation\">.</span>py \n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin \n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>model <span class=\"token keyword\">import</span> Post  <span class=\"token comment\">#model Class를 불러옵니다. </span>\n\nadmin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">)</span> <span class=\"token comment\">#어드민 페이지에서 Post DB에 등록할 수 있도록 설정합니다.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py createsuperuser <span class=\"token comment\">#&lt;== admin 페이지의 id pw 설정합니다. </span>\n\nhttp<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8000</span><span class=\"token operator\">/</span>admin 으로 들어가면 관리자 페이지 로그인 창이 나타납니다<span class=\"token punctuation\">.</span> 위에서 설정한 <span class=\"token builtin\">id</span><span class=\"token operator\">/</span>pw 를 이용해서 들어갑니다<span class=\"token punctuation\">.</span> </code></pre></div>\n<p>someapp으로 들어가셔서 데이터를 추가합니다.  title1, content1 이런 식으로 title3, content3 까지 만듭니다.</p>\n</li>\n<li>\n<h4 id=\"view-수정-postlist-가-나올-수-있도록\"><a href=\"#view-%EC%88%98%EC%A0%95-postlist-%EA%B0%80-%EB%82%98%EC%98%AC-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D\" aria-label=\"view 수정 postlist 가 나올 수 있도록 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>view 수정 postlist 가 나올 수 있도록</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">vi someapp<span class=\"token operator\">/</span>views<span class=\"token punctuation\">.</span>py   <span class=\"token comment\"># 수정할 파일을 엽니다. </span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">content_list</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n   post_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>              <span class=\"token comment\">#admin에서 입력한 값들이 담길 리스트 생성</span>\n   <span class=\"token keyword\">for</span> post <span class=\"token keyword\">in</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#반복문을 돌며 리스트에 data들을 담습니다. </span>\n       post_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>content <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n       <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span>post_list<span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\nhttp<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8000</span><span class=\"token operator\">/</span> 에서 입력한 Title<span class=\"token punctuation\">,</span> Content 불러 오는 거 확인하시면\n위에서 입력한 title과 content가 나오는걸 볼 수 있습니다<span class=\"token punctuation\">.</span> 요호! </code></pre></div>\n</li>\n</ol>","fields":{"slug":"/posts/createapiwithoutrestframework/","tagSlugs":["/tag/django/","/tag/api/"]},"frontmatter":{"date":"2019-08-11T01:23:45.678Z","description":"django를 사용해서 간단한 API end point 를 만들어 봅시다. (get/post method 사용 안함) ","tags":["Django","Api"],"title":"REST-framework 를 쓰지 않고, 초간단 api 서버 만들기하면서 장고 기본원리 설명하기 "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/createapiwithoutrestframework/"}}}