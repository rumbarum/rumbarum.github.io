{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/pytest-django-db-setup/","result":{"data":{"markdownRemark":{"id":"d78b42cb-c35f-51e7-b211-f73c980d2abd","html":"<h1 id=\"1-test-db-생성-django-default-및-이용\" style=\"position:relative;\"><a href=\"#1-test-db-%EC%83%9D%EC%84%B1-django-default-%EB%B0%8F-%EC%9D%B4%EC%9A%A9\" aria-label=\"1 test db 생성 django default 및 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Test DB 생성 (django default) 및 이용</h1>\n<ul>\n<li>settings.DATABASES config 활용</li>\n<li>test_<settings Server NAME>  DB schema 생성</li>\n<li>django models 바탕으로 DB 생성</li>\n<li>\n<p>Test data: </p>\n<ul>\n<li>비어 있는 TEST DB 에 실행하기 원하는 데이터를 채워넣어줘야 한다.</li>\n<li>models.py 에서 User import</li>\n<li>User.objects.create(id=1, name=“유저”, age=30)</li>\n</ul>\n</li>\n<li>\n<p>장점:</p>\n<ul>\n<li>Schema 변경시 피드백이 빠름</li>\n</ul>\n</li>\n<li>\n<p>단점: </p>\n<ul>\n<li>\n<p>테스트 데이터 생성 코드를 짜야 한다.</p>\n<ul>\n<li>값이 중요하지 않다면, model_bakery 사용</li>\n</ul>\n</li>\n<li>Read Only DB 미지원 (managed = False)</li>\n<li>\n<p>Multi DB 미지원</p>\n<ul>\n<li>모든 app의 models를 하나의 DB 로 몰아 넣는다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2-test-db-생성-및-sql-dump-실행\" style=\"position:relative;\"><a href=\"#2-test-db-%EC%83%9D%EC%84%B1-%EB%B0%8F-sql-dump-%EC%8B%A4%ED%96%89\" aria-label=\"2 test db 생성 및 sql dump 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. TEST DB 생성 및 SQL DUMP 실행</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># conftest.py</span>\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> pytest\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> connections\n<span class=\"token keyword\">import</span> pymysql\n\n<span class=\"token comment\"># user는 host에 접속할수 있고, db create 권한이 있어야 한다.</span>\nTEST_DB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"base\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"host\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test_user\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test_pw\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"charset\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"utf8mb4\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"testtest_default\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"multidb1\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"testtest_multi1\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># SQL 실행을 위한 function</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">run_sql</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn <span class=\"token operator\">=</span> pymysql<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"base\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cur <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SQL dump load를 위한 func </span>\n<span class=\"token comment\"># `mysql --user=test_user --password=test_pw &lt; SQL.dump` 실행</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">load_mysql_dump</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">,</span> db_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        command <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'--user=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'--password=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>passwd<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> db_name<span class=\"token punctuation\">]</span>\n        proc <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> stdin<span class=\"token operator\">=</span>f<span class=\"token punctuation\">)</span>\n        _<span class=\"token punctuation\">,</span> stderr <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> stderr<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>stderr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">'session'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">django_db_setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings\n    <span class=\"token comment\"># 기존 연결 되던 DB 변경</span>\n    settings<span class=\"token punctuation\">.</span>DATABASES<span class=\"token punctuation\">[</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'NAME'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"defualt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span>\n    settings<span class=\"token punctuation\">.</span>DATABASES<span class=\"token punctuation\">[</span><span class=\"token string\">'multidb1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'NAME'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"multidb1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># Test DB 생성</span>\n    run_sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"DROP DATABASE IF EXISTS `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"defualt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">`;\"\"\"</span></span><span class=\"token punctuation\">)</span>\n    run_sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\" CREATE DATABASE </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"defualt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">;\"\"\"</span></span><span class=\"token punctuation\">)</span>\n    run_sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"DROP DATABASE IF EXISTS `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"multidb1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">`;\"\"\"</span></span><span class=\"token punctuation\">)</span>\n    run_sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\" CREATE DATABASE </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"multidb1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">;\"\"\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Test DB load dump data</span>\n    conf <span class=\"token operator\">=</span> TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"base\"</span><span class=\"token punctuation\">]</span>\n    load_mysql_dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"default_dump.sql\"</span><span class=\"token punctuation\">,</span> conf<span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conf<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"defualt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    load_mysql_dump<span class=\"token punctuation\">(</span><span class=\"token string\">\"multidb1_dump.sql\"</span><span class=\"token punctuation\">,</span> conf<span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conf<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"multidb1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 테스트 종료까지 yield, 테스트 종료시 실행된다.</span>\n    <span class=\"token keyword\">yield</span>\n\n    <span class=\"token comment\">#테스트 종료후 Test DB Drop, 주석 처리 해놓을 경우 DB 가 계속 잔존</span>\n    run_sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\" DROP DATABASE </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"defualt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">;\"\"\"</span></span><span class=\"token punctuation\">)</span>\n    run_sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\" DROP DATABASE </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TEST_DB<span class=\"token punctuation\">[</span><span class=\"token string\">\"multidb1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">;\"\"\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> connection <span class=\"token keyword\">in</span> connections<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        connection<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>원하는 형태로 TEST DB를 손쉽게 불러올 수 있다.</li>\n<li>\n<p>Test data:</p>\n<ul>\n<li>내가 원하는 형태와 data를 가지고 있는 DB를 dump 하면 끝</li>\n</ul>\n</li>\n<li>\n<p>장점: </p>\n<ul>\n<li>DB 자체를 freeze 한 채로 사용할 수 있다.(schema 변동이 없는 고정된 케이스라면 이걸로도 충분)</li>\n<li>멀티 DB 사용 가능하다.</li>\n<li>Read Only DB 데이터 입력이 가능하다. </li>\n</ul>\n</li>\n<li>\n<p>단점: </p>\n<ul>\n<li>데이터, schema 변화대응 느림, </li>\n<li>해당 SQL 을 실행해서 DB를 만들고, 값 수정, 다시 dump를 해야한다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"3-기존-db-이용\" style=\"position:relative;\"><a href=\"#3-%EA%B8%B0%EC%A1%B4-db-%EC%9D%B4%EC%9A%A9\" aria-label=\"3 기존 db 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 기존 DB 이용</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#conftest.py</span>\n\nnew_default <span class=\"token operator\">=</span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'prepaired_test_db'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># DB명</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'test_user'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 데이터베이스 계정</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'test_pw'</span>  <span class=\"token comment\"># 계정 비밀번호</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'db.example.com'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 데이테베이스 주소(IP)</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 데이터베이스 포트(보통은 3306)</span>\n        <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'charset'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'utf8mb4'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">'session'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">django_db_setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings\n    \n    <span class=\"token comment\"># 접속 정보를 내가 원하는 것으로 덮어 씌운다.</span>\n    settings<span class=\"token punctuation\">.</span>DATABASES<span class=\"token punctuation\">[</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_default\n    </code></pre></div>\n<p>미리 설정해 놓은 TEST DB 에 접속, 저장 되어 있는 DB data를 사용</p>\n<ul>\n<li>\n<p>Test data: </p>\n<ul>\n<li>DB에 저장된 데이터</li>\n</ul>\n</li>\n<li>\n<p>장점 : </p>\n<ul>\n<li>공통 테스트 DB 공유</li>\n</ul>\n</li>\n<li>\n<p>단점 : </p>\n<ul>\n<li>DB가 각 Test 시행에 대해서 비독립</li>\n<li>테스트가 데이터 변조, 타 테스트에 영향을 끼칠 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"4-django-loaddata\" style=\"position:relative;\"><a href=\"#4-django-loaddata\" aria-label=\"4 django loaddata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Django loaddata</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># conftest.py</span>\n\n<span class=\"token keyword\">import</span> pytest\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>management <span class=\"token keyword\">import</span> call_command\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">'session'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">django_db_setup</span><span class=\"token punctuation\">(</span>django_db_setup<span class=\"token punctuation\">,</span> django_db_blocker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> django_db_blocker<span class=\"token punctuation\">.</span>unblock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        call_command<span class=\"token punctuation\">(</span><span class=\"token string\">'loaddata'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'my_fixture.json'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Django 제공, dumpdata 로 data 백업, 저장된 data load.</p>\n<ul>\n<li>\n<p>장점:</p>\n<ul>\n<li>SQL 변환등을 거칠 필요가 없이 단순하다.</li>\n</ul>\n</li>\n<li>\n<p>단점: </p>\n<ul>\n<li>DB 가 단순할 경우 잘 되지만 아닐 경우 SQL dump가 낫다.</li>\n<li>Multi DB 미지원</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/pytest-django-db-setup/","tagSlugs":["/tag/pytest/","/tag/django/","/tag/database/"]},"frontmatter":{"date":"2021-08-02T01:23:45.678Z","description":"pytest-django 로 테스트 실행시, DB와 Test data 어떻게 관리할까??","tags":["pytest","django","database"],"title":" pytest-django TEST DB setup"}}},"pageContext":{"slug":"/posts/pytest-django-db-setup/"}}}