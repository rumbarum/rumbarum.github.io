{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/understaidingRDB/","webpackCompilationHash":"2ce8c1b71addd94a18ce","result":{"data":{"markdownRemark":{"id":"be83e658-59a5-5025-bfe9-a147c7da1696","html":"<h2 style=\"color:rgb(9, 136, 104)\"> DB 안쓰면 안돼? 응 안돼 </h2>\n- ### **저장 공간 왜 필요할까?**\n<ul>\n<li>application 종료시 휘발하는 데이터를 영구 보존하기 위해서 저장을 해야한다. </li>\n<li>일반 서식 file (hwp, img, avi ) 물리적인(HDD, SDD, USB, CD  ) 저장 방식</li>\n<li>\n<h4 id=\"그럼-왜-굳이-db\"><a href=\"#%EA%B7%B8%EB%9F%BC-%EC%99%9C-%EA%B5%B3%EC%9D%B4-db\" aria-label=\"그럼 왜 굳이 db permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그럼 왜 굳이? DB</h4>\n<ol>\n<li>접근성 (협업성) </li>\n<li>파일은 data 모델링이 힘들다</li>\n<li>보안성 - DB 유저별 권한 관리가 가능하다. </li>\n<li>공간 효율성 - 중복을 줄여 낭비를 막는다.</li>\n<li>데이터의 탐색 / 업데이트 어려움 </li>\n<li>확장성 </li>\n</ol>\n</li>\n<li>\n<h4 id=\"db-는-api-server와-개념적으로-동일하다\"><a href=\"#db-%EB%8A%94-api-server%EC%99%80-%EA%B0%9C%EB%85%90%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9D%BC%ED%95%98%EB%8B%A4\" aria-label=\"db 는 api server와 개념적으로 동일하다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 는 API server와 개념적으로 동일하다</h4>\n<ul>\n<li>앤드포인트가 하나인 api</li>\n<li>SQL (Stcuctured Query Language) DB를 조작하는 언어 </li>\n<li>mySQL - 프로토콜 ( 주고받는 규약, http처럼 다른 관계형 postGre, mariaDB 등도 프로토콜이다.)</li>\n<li>DB 주소 알아야 접근할 수 있다. (통상 쓰는 port 가 있다.)</li>\n<li>FE &#x3C;-> BE &#x3C;-> DB</li>\n</ul>\n</li>\n<li>\n<h3 id=\"db는-어떻게-구성-되는가\"><a href=\"#db%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%EC%84%B1-%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"db는 어떻게 구성 되는가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB는 어떻게 구성 되는가?</h3>\n<ul>\n<li>\n<h4 id=\"table\"><a href=\"#table\" aria-label=\"table permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table</h4>\n</li>\n<li>column 데이터 정보 구획</li>\n<li>row 데이터를 채우는 자료들 </li>\n</ul>\n</li>\n<li>\n<h4 id=\"관계형-db\"><a href=\"#%EA%B4%80%EA%B3%84%ED%98%95-db\" aria-label=\"관계형 db permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관계형 DB</h4>\n<ul>\n<li>데이터의 완전성</li>\n<li>정해진 데이터만 들어갈 수 있도록 한다. </li>\n<li>foreign key 외부에 걸린키 외부 테이블에 있는 데이터만 들어간다. </li>\n<li>대량 변동 가능성을 줄여준다.</li>\n<li>중복을 줄여준다.</li>\n<li>디스크의 효율성 </li>\n<li>ID를 쓰는 이유  </li>\n<li>ID는 변동이 안생긴다. </li>\n<li>ID의 값은 변동 가능하다 </li>\n<li>context 프리, 의미가 없는 값이기 때문에 다른 데이터의 영향을 안받고 독립해 있다.</li>\n<li>소프트 딜릿, 하드딜릿</li>\n<li>하드딜릿 DB에서 실제 삭제 </li>\n<li>소프트딜릿 삭제한것처럼 db에 체크 </li>\n<li>대부분은 소프트로, 하드딜릿 하면 문제가 생김(관계가 맺어져 있기때문이다. )</li>\n<li>법적으로 정해진 사항이 아니면 대부분 소프트 딜릿을 한다. </li>\n<li>Table 간의 관계 표현 </li>\n<li>1 to 1  - 하나의 로우에 다른 테이블의 로우가 1:1로 매칭된다. </li>\n<li>1 to many 하나의 로우에 다른테이블의 여러로우가 매칭된다. </li>\n<li>\n<p>many to many </p>\n<ul>\n<li>여러개의 로우가 여러개의 로우들과 관계를 맺고 있다.</li>\n<li>주어진 테이블 만으로는 관계 표현이 불가능하다. </li>\n<li>join 테이블이 필요하다. </li>\n</ul>\n</li>\n<li>트랜잭션</li>\n<li>여러개의 오퍼레이션을 하나의 과정으로 묶는다. </li>\n<li>하나라도 실패하면 실패,</li>\n<li>성공하거나, 실행하기전 상태로 돌아간다. ( commit or rollback)</li>\n<li>\n<p>example</p>\n<ul>\n<li>user - user profile </li>\n<li>delete &#x26; insert 할경우 , delete 만 하고 </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h3 id=\"비관계형-db\"><a href=\"#%EB%B9%84%EA%B4%80%EA%B3%84%ED%98%95-db\" aria-label=\"비관계형 db permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>비관계형</strong> DB</h3>\n<ul>\n<li>저장이 유연하다.</li>\n<li>완전성이 떨어진다. </li>\n<li>데이터 정의(데이터 스키마) 하기 어려운경우에 쓰인다. - 로우데이타, 로그  </li>\n<li>스케일링업 하기 좋다. </li>\n<li>대부분은 정형 데이터이기 때문에 관계형을 많이 쓴다. </li>\n<li>DB의 확장 </li>\n<li>\n<p>관계형 - 스케일 업 </p>\n<ul>\n<li>서버 성능 강화 - cpu 성능강화 - 서버를 멈추고 장비를 강화하고 다시 켜야한다. </li>\n<li>훨씬 어렵다. </li>\n</ul>\n</li>\n<li>\n<p>비관계형 - 스케일 아웃 </p>\n<ul>\n<li>서버 수 10대에서 100대로 늘린다. </li>\n</ul>\n</li>\n<li>궁극적으로 관계형만은 사용할 수 없다. </li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/understaidingRDB/","tagSlugs":["/tag/backend/","/tag/rdb/"]},"frontmatter":{"date":"2019-08-28T01:23:45.678Z","description":"관계형 DB라는건 뭘까? ","tags":["Backend","RDB"],"title":"관계형 DB 알아보자 "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/understaidingRDB/"}}}