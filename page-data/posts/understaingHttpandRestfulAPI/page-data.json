{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/understaingHttpandRestfulAPI/","webpackCompilationHash":"5f09ffca1ddc62770329","result":{"data":{"markdownRemark":{"id":"54b825b8-d3b1-542c-ad53-e54167b54039","html":"<h3 style=\"color:rgb(9, 136, 104)\">통신은 계속해서 발전한다.</h3>\n## Http? \n<p>Hyper Text Transfer Protocol  </p>\n<ul>\n<li>Hyper Text (html)을 보내기 위한 통신 규약! </li>\n<li>비슷한 규약으로 STP, FTP 등이 있다. </li>\n<li>웹서비스는 Http 기반으로 발전했다.  그래서 Http로 다른 데이터를 주고 받는다. </li>\n<li>클라이언트와 서버가 서로 데이터를 주고 받는데 Http 프로토콜에 맞춰서 보낸다. </li>\n</ul>\n<h2 id=\"http의-핵심\"><a href=\"#http%EC%9D%98-%ED%95%B5%EC%8B%AC\" aria-label=\"http의 핵심 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Http의 핵심</h2>\n<ol>\n<li>\n<h4 id=\"http-request-and-response로-나뉘어-있다\"><a href=\"#http-request-and-response%EB%A1%9C-%EB%82%98%EB%89%98%EC%96%B4-%EC%9E%88%EB%8B%A4\" aria-label=\"http request and response로 나뉘어 있다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>http request and response로 나뉘어 있다.</h4>\n<ul>\n<li>요청을 하면 무조건 응답이 온다. 왜냐 그래야 통신이 되고 있는건지 아니까. 그렇지 않으면 통신이 되는건지 알 수 가 없다.  </li>\n</ul>\n</li>\n<li>\n<h4 id=\"stateless-무상태\"><a href=\"#stateless-%EB%AC%B4%EC%83%81%ED%83%9C\" aria-label=\"stateless 무상태 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stateless 무상태</h4>\n<ul>\n<li>다른 통신 존재를 모른다.(이 통신의 이전, 이후 통신과 전혀 관련이 없다. ) </li>\n<li>\n<p>처음통신에서 유저가  로그인 했는데 두번재 통신에서 로그인 유저인 줄을 모른다.</p>\n<ul>\n<li>그래서 이런 경우 요청에 필요한 정보를 같이 request에 첨부해서 보내야 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"request--response\"><a href=\"#request--response\" aria-label=\"request  response permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request &#x26; Response</h2>\n<h4 id=\"request-구성\"><a href=\"#request-%EA%B5%AC%EC%84%B1\" aria-label=\"request 구성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request 구성</h4>\n<ul>\n<li>\n<p>start line - Req 시작부 </p>\n<ul>\n<li>mothod : request가 의도한 action</li>\n<li>target :  상세주소 (도메인의 상세 주소 보통 자동 처리 해준다.</li>\n<li>version : http 의 버전을 표시한다. 보통 1.1 또는 2.0 (3.0 까지 나와있다.)</li>\n</ul>\n</li>\n<li>\n<p>headers -Req 부가설명 </p>\n<ul>\n<li>host : 메인서버 도메인   </li>\n<li>user agent : 클라이언트에서 가지고 있는 정보, 크롬? 사파리? 랩탑? 아이패드? </li>\n<li>Accept : 받을 수 있는 응답 타입 </li>\n<li>connection : 서버와의 연결을 어떻게 할 것인지 </li>\n</ul>\n</li>\n<li>\n<p>초기에 조금 시간이 걸린다. (컴터 입장에서)</p>\n<ul>\n<li>보통은 살려둔다(keep alive)</li>\n</ul>\n</li>\n<li>\n<p>content type : 보내는 콘텐츠 유형</p>\n<ul>\n<li>content length : 콘텐츠 길이</li>\n</ul>\n</li>\n<li>body - 서버측에 보내는 내용</li>\n<li>\n<p>서버에서 자료를 받기만 하는 경우 비어있는 경우가 있다. </p>\n<ul>\n<li>서버에 정보를 올려야 할 경우 양식에 맞춰서 작성해서 올린다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"response\"><a href=\"#response\" aria-label=\"response permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Response</h3>\n<ul>\n<li>\n<p>status line - 요청에 대한 상태를 보내기 때문에 status line으로 시작</p>\n<ul>\n<li>http버젼 </li>\n<li>status code : 응답 상태를 나타내는 숫자로 되어 있는 코드</li>\n<li>\n<p>자주쓰는 status code &#x26; status text : </p>\n<ul>\n<li>200 - OK 통신이 잘 되었다. </li>\n<li>301 - Moved Permanently 요청한 주소가 변경되었다.</li>\n<li>400 - Bad Request 잘못된 정보를 넣었다.( 한글이름에 영문을 넣었다.)</li>\n<li>401 - Unauthorized 인증을 통과하지 않았다.(비로그인)</li>\n<li>403 - Forbidden 권한이 없다.(어드민만 이용 가능한 곳에 접속)</li>\n<li>404 - not found 없는주소</li>\n<li>500 - Internal Server Error 서버에러</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>header :  useragent 대신 server 헤더가 사용 그밖엔 유저와 동일하다.</li>\n<li>body : 클라에서 요청한 것에 따라  해당 내용을 담아서 보낸다. 내용이 없는 경우도 있다. </li>\n</ul>\n<h4 id=\"http-method---클라이언트에서-서버에-요청하는-방법\"><a href=\"#http-method---%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90%EC%84%9C-%EC%84%9C%EB%B2%84%EC%97%90-%EC%9A%94%EC%B2%AD%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"http method   클라이언트에서 서버에 요청하는 방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP method - 클라이언트에서 서버에 요청하는 방법</h4>\n<ul>\n<li>개발자는 상황에 따라 서버에 어떤 요청을 보낼 것인가 결정해야 한다.</li>\n<li><code class=\"language-text\">GET</code> : 데이터를 받기만 한다. </li>\n<li><code class=\"language-text\">POST</code> : 서버에 내가 주고 싶은 정보를 줄수 있다. </li>\n<li><code class=\"language-text\">OPTIONS</code> : URI 에서 가능한 method를 가져온다. cors 문제 때문에 많이 쓴다. </li>\n<li><code class=\"language-text\">DEL</code> : 데이터 삭제  <code class=\"language-text\">POST</code>를 통해서도 삭제요청을 할 수 있지만 <code class=\"language-text\">DEL</code> 쓰는게 더 깔끔해진다.</li>\n<li>그 외 더 많은 method가 있지만, 주로 쓰는건 <code class=\"language-text\">GET, POST, DEL</code>왜냐구? 편리성 증대. </li>\n</ul>\n<h2 id=\"restful-api---representational-state-transfer\"><a href=\"#restful-api---representational-state-transfer\" aria-label=\"restful api   representational state transfer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API - REpresentational State Transfer</h2>\n<p>아래의 4가지를 처리하는 endpoint를 만든다면?? </p>\n<ul>\n<li>모든유저정보</li>\n<li>1명 유저 정보</li>\n<li>유저생성</li>\n<li>유저삭제 </li>\n</ul>\n<p>내가 생각했던 답변은 </p>\n<ul>\n<li>host/getAllUserInfo</li>\n<li>host/getUserInfo/number</li>\n<li>host/createUser</li>\n<li>host/deleteUser/number</li>\n</ul>\n<h3 id=\"restful-api-로-하면\"><a href=\"#restful-api-%EB%A1%9C-%ED%95%98%EB%A9%B4\" aria-label=\"restful api 로 하면 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Restful Api 로 하면</h3>\n<ul>\n<li>GET   host/user</li>\n<li>GET   host/user/usernumber</li>\n<li>POST host/user</li>\n<li>DEL    host/user/usernumber </li>\n</ul>\n<p>결국</p>\n<ul>\n<li>리소스(HTTP URI로 정의된)를 어떻게 한다(HTTP Method + Payload)를 구조적으로 깔끔하게 표현하는것.</li>\n<li>쉽게말해 api 주소 짜는 패턴 </li>\n<li>동사는 method 로만</li>\n<li>해당 명사는 주소.</li>\n</ul>\n<h4 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h4>\n<p>​\t\tRESTful API는 그 자체만으로도 API의 목적이 쉽게 이해가 된다.</p>\n<h4 id=\"주의사항\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"주의사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의사항</h4>\n<ul>\n<li><code class=\"language-text\">/</code>(슬래시)는 계층 관계를 나타낼때 사용된다.</li>\n<li><code class=\"language-text\">_</code>(underscore)는 주로 포함하지않고 또한 영어 대문자보다 소문자를 쓴다. 그리고 너무 긴 단어는 잘 사용하지 않는다.</li>\n<li>URI는 명사를 사용한다.</li>\n</ul>","fields":{"slug":"/posts/understaingHttpandRestfulAPI/","tagSlugs":["/tag/backend/","/tag/http/","/tag/api/"]},"frontmatter":{"date":"2019-08-21T01:23:45.678Z","description":"Http 와 RESTful API 간단하게 톺아보자 ","tags":["Backend","Http","Api"],"title":"HTTP, RESTful API 이해하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/understaingHttpandRestfulAPI/"}}}