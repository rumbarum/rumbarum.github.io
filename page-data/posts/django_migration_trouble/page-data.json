{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/django_migration_trouble/","webpackCompilationHash":"7f21b5533f048302ba22","result":{"data":{"markdownRemark":{"id":"c226405f-cc1e-5ca0-bb8e-afef56065ef2","html":"<p>아래 내용은 <a href=\"https://wayhome25.github.io/django/2017/03/20/django-ep6-migrations/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">초보몽키님 블로그 Migration 설명에서 인용 </a></p>\n<blockquote>\n<h2 id=\"migrations\"><a href=\"#migrations\" aria-label=\"migrations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>migrations</h2>\n<ul>\n<li>모델 변경내역 히스토리 관리</li>\n<li>모델의 변경내역을 DB Schema (데이터베이스 데이터 구조)로 반영시키는 효율적인 방법을 제공</li>\n<li>\n<p>migration 옵션을 끌수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 마이그레이션 파일 생성</span>\n$ python manage.py makemigrations <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 마이그레이션 적용</span>\n$ python manage.py migrate <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 마이그레이션 적용 현황</span>\n$ python manage.py showmigrations <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 지정 마이그레이션의 SQL 내역</span>\n<span class=\"token variable\">$python</span> manage.py sqlmigrate <span class=\"token operator\">&lt;</span>app-name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>migration-name<span class=\"token operator\">></span></code></pre></div>\n<p>Tip</p>\n</li>\n<li>makemigrations 이후에는 migration 폴더를 확인하는 습관을 갖는게 좋다. DB는 중요하기 때문에 무엇이 수정되었는지 다시 한번 확인하는 습관.</li>\n<li>makemigrations [app-name] 처럼 app 이름을 명시하는 것이 좋다. (예상치 못한 migration을 방지)</li>\n<li>showmigrations 를 통해서 적용 상태를 조회할 수 있다. [x] : 적용 후 []: 적용 전</li>\n<li>실제 DB에는 sql 쿼리로 명령이 전달이 된다. migration 파일은 쿼리는 아니다. 따라서 <code class=\"language-text\">sqlmigrate</code> 명령을 통해 sql로도 확인하는 습관이 필요하다.</li>\n<li>이미 적용한 migration 파일은 절대로 지우면 안된다.</li>\n<li>프로젝트/앱 생성 후 처음 migrate 할 때는 app 이름을 명시하지 않는다. 이는 장고 기본 앱에, 여러 앱에 걸쳐서 적용할 migrate가 있기 때문이다.</li>\n<li>no such table, column 등의 오류는 migration 관련 문제이다.</li>\n</ul>\n<h3 id=\"특정-파일지정을-통한-migrate\"><a href=\"#%ED%8A%B9%EC%A0%95-%ED%8C%8C%EC%9D%BC%EC%A7%80%EC%A0%95%EC%9D%84-%ED%86%B5%ED%95%9C-migrate\" aria-label=\"특정 파일지정을 통한 migrate permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특정 파일지정을 통한 migrate</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ python manage.py migrate &lt;app-name&gt; &lt;마이그레이션 파일명&gt;</code></pre></div>\n<ul>\n<li>\n<p>지정한 마이그레이션 파일이 현재 적용된 마이그레이션 파일 보다</p>\n<ul>\n<li>이후라면, <code class=\"language-text\">Forward 마이그레이션</code> 을 순차적으로 진행</li>\n<li>이전이라면, <code class=\"language-text\">Backward 마이그레이션</code> 을 순차적으로 진행 (<code class=\"language-text\">롤백</code>)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"마이그레이션-파일명-지정\"><a href=\"#%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%8C%8C%EC%9D%BC%EB%AA%85-%EC%A7%80%EC%A0%95\" aria-label=\"마이그레이션 파일명 지정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마이그레이션 파일명 지정</h2>\n<ul>\n<li>전체 파일명을 지정하지 않더라도, 판독이 가능하다면 파일명 일부로도 지정이 가능하다.</li>\n<li>롤백 후에 돌아오면 <code class=\"language-text\">테이블의 데이터 레코드가 사라진다</code>. 장고 모델의 migration은 스키마의 형상관리로, 데이터 백업을 지원하지 않는다. 따라서 <code class=\"language-text\">주기적인 백업</code>이 필요하다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 파일명 예시</span>\nblog/migrations/0001_initial.py\nblog/migrations/0002_create_field.py\nblog/migrations/0002_update_field.py\n\n<span class=\"token variable\">$python</span> manage.py migrate blog 0001 <span class=\"token comment\"># OK</span>\n<span class=\"token variable\">$python</span> manage.py migrate blog 0002 <span class=\"token comment\"># FAIL (다수 파일 해당)</span></code></pre></div>\n</li>\n</ul>\n</blockquote>\n<p>Django 는 DB에 관한 내용을 models.py로 추상화하여 관리한다. 그래서 사용자는 SQL 문을 신경쓰지 않고, Django ORM을 사용하여 DB 자료를 손쉽게 관리 할 수있다. 따라서 DB에 변화가 생기는 경우, Django에서 해당 내용을 인지하도록 sync를 맞춰줘야만 한다. (models.py 를 수정하고, makemigration, migrate를 해야한다.)</p>\n<p>이에 관련해서 빈번하게 생기는 오류는 2가지를 들 수 있다. </p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Case</th>\n<th align=\"left\">DB</th>\n<th align=\"left\">Django</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Change</td>\n<td align=\"left\">No change</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Change on 1,2,3 table</td>\n<td align=\"left\">Change on 4,5,6 tabel</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"1-db를-선-변경\"><a href=\"#1-db%EB%A5%BC-%EC%84%A0-%EB%B3%80%EA%B2%BD\" aria-label=\"1 db를 선 변경 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DB를 선 변경</h2>\n<p>DB에서 칼럼을 하나 추가하고 Django migration을 내버려 두었다. Django 에러 뜨는거 보고 <code class=\"language-text\">models.py</code>를 수정 하고 migrate까지 했는데 여기서 에러가 난다. 이미 있는 칼럼이라서 추가할수 없다. </p>\n<p>이럴 때는 makemigration을 한뒤에 migrate를 했다고 장고가 인식하게 하면 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$python manage.py showmigration \n#생성된 migration 이름 확인\n$python manage.py --fake migrate &lt;app_name&gt; &lt;migrate_name&gt;</code></pre></div>\n<p>를 입력하면 makemigration를 통해 생성된 migration을 DB 에 적용 한걸로 Django에서 인식한다. </p>\n<h2 id=\"2-db와-django가-서로-다른-변경내역이-있을-경우\"><a href=\"#2-db%EC%99%80-django%EA%B0%80-%EC%84%9C%EB%A1%9C-%EB%8B%A4%EB%A5%B8-%EB%B3%80%EA%B2%BD%EB%82%B4%EC%97%AD%EC%9D%B4-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"2 db와 django가 서로 다른 변경내역이 있을 경우 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DB와 Django가 서로 다른 변경내역이 있을 경우</h2>\n<p>​\t1. 디펜던시가 복잡하지 않다면,  DB 내역을 위의 방법으로 Django에 반영하고, Django 변경내역은 migration 과정을 통해 일치 시키면 된다.</p>\n<ol start=\"2\">\n<li>\n<p>디펜던시가 복잡하고 처리가 어렵다면, DB 초기화후 재 생성 하는 방법도 있다. (데이터가 중요하지 않은 경우, 데이터 베이스를 그대로 사용하고 싶으면, DB schema에 models.py를 맞추면 된다. )</p>\n<p><a href=\"https://yuda.dev/216\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django DB 초기화 하기</a></p>\n</li>\n</ol>","fields":{"slug":"/posts/django_migration_trouble/","tagSlugs":["/tag/django/","/tag/migration/","/tag/wecode/"]},"frontmatter":{"date":"2020-05-24T01:23:45.678Z","description":"Django Migration 맞춰주기 ","tags":["django","migration","wecode"],"title":" Django 와 DB sync 맞추기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/django_migration_trouble/"}}}