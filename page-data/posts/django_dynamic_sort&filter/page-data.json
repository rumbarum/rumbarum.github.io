{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/django_dynamic_sort&filter/","webpackCompilationHash":"6a801aafaf7b038df61c","result":{"data":{"markdownRemark":{"id":"8a725c89-c30f-57dc-b8b2-0a3817434e30","html":"<p>Django QuerySet 에  정렬과 필터를 다이나믹하게(정해진 갯수없이) 거는 방법</p>\n<p>Order, Filter 프론트에서 요청하는대로 알아서  처리하게 할수 있을까요?\n네 가능합니다.</p>\n<p>다음 과 같은 Post 모델이 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n \ttitle <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#제목</span>\n\tcontent <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextFiled<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#내용</span>\n \tauthor <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#저자</span>\n\ttimestamp <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span>timezone<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">)</span> <span class=\"token comment\">#만들어진 시간</span>\n\tlike_count <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#좋아요 눌린 횟수</span>\n  view_count <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#뷰 횟수</span>\n  hate_count <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#싫어요 횟수</span></code></pre></div>\n<h3 id=\"dynamic-sorting\"><a href=\"#dynamic-sorting\" aria-label=\"dynamic sorting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic sorting</h3>\n<p>1개의 Order를 거는 방법은 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">posts <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'view_count'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#좋아요 오름차순 정렬 </span>\nposts <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'-view_count'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#좋아요 내림차순 정렬 </span></code></pre></div>\n<p>N개의 order를 거는 방법은</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">posts <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'view_count'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'like_count'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#조회수, 좋아요 오름차순 정렬, </span></code></pre></div>\n<p>Order 는 Chainning 이 가능하다.  위의 방법을 Chainnig으로 표현하면, 아래처럼도 작성이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">posts <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'view_count'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#조회수 오름차순 정렬</span>\nposts <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'like_count'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#조회수 오름차순 정렬 한것중 좋아요 오름차순 정렬</span></code></pre></div>\n<p>Order 갯수가 정해져 있지 않고, 1개 또는 그 이상의  Order를 QuerySet에 거는 방법은 크게 두가지 이다. </p>\n<ol>\n<li>Order 를 List로 만들고  그 리스트를 통해 Order 입력</li>\n<li>Order 값의 연속 Chainning</li>\n</ol>\n<p>1번 방법의 정석은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># request URL : url/order1=view_count,order2=like_count,order3=-hate_count....order[n]='value' 최대 n개의 Order 정렬 요청을 받는다. </span>\n\norder_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'order</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-timestamp'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#받은 요청들을 리스트에 담는다. '-timestamp'를 넣지 않을 경우, 값이 없거나, 잘못되었을 경우 에러가 난다. 에러방지용. </span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>order_list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>\n<span class=\"token string\">'view_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'like_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-hate_count'</span>\n<span class=\"token punctuation\">]</span>\n\nordered_post1 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>order_list<span class=\"token punctuation\">)</span> <span class=\"token comment\">#order_list에 담긴 값으로 Order를 해준다! </span>\n\nordered_post2 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'view_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'like_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-hate_count'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ordered_post1과 ordered_post2의 정렬된 내용은 같다. </span></code></pre></div>\n<p>좀더 편리하게 처리하자면 이렇게도 해볼수 있을 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># request URL : url/order=like_count,view_count,-hate_count 기한 없이 Order 정렬 요청을 받는다.쿼리스트링이 조금더 간결해졌다. </span>\n\norder_list <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'order'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-timestamp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#받은 요청들을 리스트에 담는다. '-timestamp'를 넣지 않을 경우, 값이 없거나, 잘못되었을 경우 에러가 난다.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>order_list<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>\n<span class=\"token string\">'view_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'like_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-hate_count'</span>\n<span class=\"token punctuation\">]</span>\n\nordered_post1 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>order_list<span class=\"token punctuation\">)</span> <span class=\"token comment\">#order_list에 담긴 값으로 Order를 해준다! </span>\n\nordered_post2 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string\">'view_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'like_count'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-hate_count'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># ordered_post1과 ordered_post2의 정렬된 내용은 같다. </span></code></pre></div>\n<p>2번 방법은 다음과 같다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#다중 Order body로 받을시,</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"order_by\"</span><span class=\"token punctuation\">:</span>\n  \t<span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"field\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"field\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"view_count\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"asc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"field\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"like_count\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  \t\t<span class=\"token punctuation\">]</span>\t\n\t\t<span class=\"token punctuation\">}</span>\n\nposts <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objcects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token string\">'order_by'</span> <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>                <span class=\"token comment\">#정렬값이 request에 있다면, </span>\n\t<span class=\"token keyword\">for</span> order <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'order_by'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>      <span class=\"token comment\">#그 값들을 찾아서</span>\n\t\tfield <span class=\"token operator\">=</span> order<span class=\"token punctuation\">[</span><span class=\"token string\">'field'</span><span class=\"token punctuation\">]</span>\t\t\t\t\t\t<span class=\"token comment\">#연속 channing으로 Order를 건다. </span>\n\t\tasc <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> order<span class=\"token punctuation\">[</span><span class=\"token string\">'asc'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"\"</span>\n\t\tposts <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>asc<span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"필터의-동적-적용\"><a href=\"#%ED%95%84%ED%84%B0%EC%9D%98-%EB%8F%99%EC%A0%81-%EC%A0%81%EC%9A%A9\" aria-label=\"필터의 동적 적용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필터의 동적 적용!</h3>\n<p>위와 비슷하지만 살짝 다른 방법으로 filter도 동적으로 걸 수 있다. 필터는 List 가 아닌 Dict를 활용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># request URL : url/title=wecode최고,content__contain=developer,author=바름  </span>\n\n<span class=\"token comment\">#Dict로 받기 때문에 사전에 정해진 필터값들만 받을 수 있다. </span>\n\nfilter_dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\ndata <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    filter_dic<span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'content__contain'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    filter_dic<span class=\"token punctuation\">[</span><span class=\"token string\">'content__contain'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'content__contain'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    filter_dic<span class=\"token punctuation\">[</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">,</span> SyntaxError<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\">#각각의 필터마다 받는 값이 정해져 있기 때문에 이에 대해서는 미리 validation 처리를 해놓아야 한다. e.g id에 str인 경우.</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>filter_dic<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'wecode'</span>최고<span class=\"token punctuation\">,</span><span class=\"token string\">'content__contain'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'developer'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'바름'</span>\n<span class=\"token punctuation\">}</span>\n\nfiltereded_post1 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>filter_dic<span class=\"token punctuation\">)</span> <span class=\"token comment\">#filter_dic에 담긴 값으로 filter를 해준다! </span>\n\nfiltered_post2 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">'wecode최고'</span><span class=\"token punctuation\">,</span>content__contain<span class=\"token operator\">=</span><span class=\"token string\">'developer'</span><span class=\"token punctuation\">,</span>author<span class=\"token operator\">=</span><span class=\"token string\">'바름'</span>  \n<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ordered_post1과 ordered_post2의 filter된 내용은 같다. </span></code></pre></div>\n<p>위의 방법은 손이 가는 부분이 많다.  post를 통해 request body로 받으면 더 쉬워진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># request URL : url/</span>\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  filter_data<span class=\"token punctuation\">:</span>\n  \t<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'wecode'</span>최고<span class=\"token punctuation\">,</span><span class=\"token string\">'content__contain'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'developer'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'바름'</span>\n  \t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'filter_data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  \tposts <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">[</span><span class=\"token operator\">**</span>filter_data<span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">,</span> SyntaxError<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">:</span>\n  \t<span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>filter_dic<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token string\">'title'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'wecode'</span>최고<span class=\"token punctuation\">,</span><span class=\"token string\">'content__contain'</span><span class=\"token operator\">=</span>develope<span class=\"token string\">r','</span><span class=\"token string\">'author'</span><span class=\"token operator\">=</span><span class=\"token string\">'바름'</span>\n<span class=\"token punctuation\">}</span>\n\nfiltereded_post1 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>filter_dic<span class=\"token punctuation\">)</span> <span class=\"token comment\">#filter_dic에 담긴 값으로 filter를 해준다! </span>\n\nfiltered_post2 <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>order_by<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">'wecode최고'</span><span class=\"token punctuation\">,</span>content__contain<span class=\"token operator\">=</span><span class=\"token string\">'developer'</span><span class=\"token punctuation\">,</span>author<span class=\"token operator\">=</span><span class=\"token string\">'바름'</span>  \n<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ordered_post1과 ordered_post2의 filter된 내용은 같다. </span></code></pre></div>\n<p>filter 도 Chainning은  가능하나  Sorting처럼  다이나믹하게 활용하기 어렵다. 키워드가 정해져 있기 때문에 filter 키워드를 동적으로 처리하지 못한다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">posts<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>search<span class=\"token operator\">=</span>value<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#Search는 Post에 없는 Field다. Post가 가지고 있는 filed가 아니면 정의부터 error를 터뜨린다. </span></code></pre></div>","fields":{"slug":"/posts/django_dynamic_sort&filter/","tagSlugs":["/tag/django/","/tag/queryset/","/tag/filter/"]},"frontmatter":{"date":"2020-02-07T01:23:45.678Z","description":"Order, Filter 프론트에서 요청하는대로 알아서  처리하게 할수 있을까요?","tags":["django","queryset","filter"],"title":"Django QuerySet 에  정렬과 필터를 다이나믹하게(정해진 갯수없이) 거는 방법"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/django_dynamic_sort&filter/"}}}