{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python-interface/","result":{"data":{"markdownRemark":{"id":"5af3fe74-ff57-5656-a0c1-f87524b2a068","html":"<p>Caller와 Callee 사이의 인터페이스(상호 계약)가 깨지면(<code class=\"language-text\">method</code> , <code class=\"language-text\">param</code> … 등의 변경) 프로그램에서 에러가 발생한다. 프로그램의 안정성을 높이기 위해선 인터페이스가 유지되는지 확인이 필요하다. 컴파일 랭귀지라면, 컴파일 단계에서 타입 추론을 통해 확인한다. 파이썬은 스크립트 언어라 실행 시점에 코드를 읽기 때문에 사전 확인이 어렵다. </p>\n<p>그래서 <code class=\"language-text\">Runtime</code> 에서 확인하거나 <code class=\"language-text\">Static</code> 한 방식으로 사전에 코드를 읽어서 검사한다. 인터페이스를 완벽하게 강제하는 방법은 없다. 프로그램의 상황과 구성원간의 합의에 따라 적절한 방법을 선택해야한다. 어느 방법이 적합할지 한번 살펴보겠다.</p>\n<h1 id=\"ducktyping\" style=\"position:relative;\"><a href=\"#ducktyping\" aria-label=\"ducktyping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ducktyping</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">shoute</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kwak\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moew\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncat <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span>\n\nduck <span class=\"token operator\">=</span> Duck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>duck<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> moew\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Duck'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'voice'</span></code></pre></div>\n<p><code class=\"language-text\">x</code> 는 <code class=\"language-text\">voice()</code> 를 가지고 있을 것이라는 인터페이스를 <code class=\"language-text\">cat</code> 은 지켰지만, <code class=\"language-text\">duck</code> 은 지키지 않았다. <code class=\"language-text\">make_noise</code> 와 <code class=\"language-text\">x</code> 의 인터페이스는 <code class=\"language-text\">x</code> 의 변경에 취약하다. 이를 인지 하기 위해서는 코드를 실행해 봐야 한다.</p>\n<p> <code class=\"language-text\">Duck</code> 클래스가 <code class=\"language-text\">voice</code> 메소드를 구현하지 않아도 실행 되게 할 수 있다. <code class=\"language-text\">duck</code> 인스턴스에 동적으로 할당 하더라도, <code class=\"language-text\">voice</code> 를 동작 하도록 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nduck <span class=\"token operator\">=</span> Duck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nduck<span class=\"token punctuation\">.</span>voice <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"duck kwak\"</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>duck<span class=\"token punctuation\">)</span></code></pre></div>\n<p>동작하는 인터페이스(<code class=\"language-text\">voice</code>)만 있다면, Cat과 Duck은 <code class=\"language-text\">make_noise</code> 스코프 안에서 사실상 같은 걸로 취급하는 것이다. 오리처럼 걷고, 오리처럼 소리지른다면 이는 오리와 같다. 여기서 Duck typing 이란 이름이 나왔다.</p>\n<p><code class=\"language-text\">moew</code> 가 구현된 <code class=\"language-text\">Cat</code> 의 인스턴스 만을 받고자 한다면, 다음과 같이 검증 로직을 추가 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> Cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x has no voice\"</span><span class=\"token punctuation\">)</span>\n\ncat <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span>\nduck <span class=\"token operator\">=</span> Duck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>duck<span class=\"token punctuation\">)</span>\nmoew\nx has no voice</code></pre></div>\n<p>이러면 인터페이스를 안전하게 유지할 수 있는 걸까?</p>\n<p>프로그램 규모가 커짐에 따라 <code class=\"language-text\">make_noise</code> 함수가 수용해야 할 <code class=\"language-text\">x</code> 타입이 늘어간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lion</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tiger</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Gorilla</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> Cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> Lion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> Tiger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> Gorilla<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is not Cat\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 종류가 늘어갈 수록,  <code class=\"language-text\">make_noise</code> 의 변경사항이 계속해서 생긴다. ’<strong>Open Close Priciple</strong>’ 이 깨진다.</p>\n<p><code class=\"language-text\">isinstance</code> 로는 <code class=\"language-text\">class</code> 종류 만 확인이 가능하다. <code class=\"language-text\">class</code> 가<code class=\"language-text\">voice</code> 를 가지고 있는 여부는 런타임에서 발생한 에러로만 확인이 가능하다.</p>\n<h1 id=\"goose-typing\" style=\"position:relative;\"><a href=\"#goose-typing\" aria-label=\"goose typing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goose-typing</h1>\n<p><code class=\"language-text\">make_noise</code>가 수용할 <code class=\"language-text\">class</code> 들이 같은 <code class=\"language-text\">voice</code> 를 갖도록 하기 위한 방법으로 추상클래스를 이용한 상속을 한다. (PEP-484)</p>\n<p>OOP SOLID 원칙의 ‘<strong>Dependency Inversion Principle’</strong> 과도 연결된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABC<span class=\"token punctuation\">,</span> abstractmethod\n\n<span class=\"token comment\"># 추상클래스 임을 명시하는 ABC 상속</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token comment\"># 추상메소드를 만들기 위한 데코레이터</span>\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError\n\n<span class=\"token comment\"># abc 없이 이렇게 Base Class를 선언하기도함</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Goose</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ngoose <span class=\"token operator\">=</span> Goose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>goose<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">abstractmethod</code> 를 구현한 <code class=\"language-text\">Animal</code> 은 인스턴스화가 되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> TypeError<span class=\"token punctuation\">:</span> Can't instantiate abstract <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">with</span> abstract method voice</code></pre></div>\n<p><code class=\"language-text\">Animal</code> 을 상속받은 클래스는 추상 메소드 <code class=\"language-text\">voice</code> 를 구현해야 한다.  그렇지 않으면 instantiate 에서 에러가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> TypeError<span class=\"token punctuation\">:</span> Can't instantiate abstract <span class=\"token keyword\">class</span> <span class=\"token class-name\">Goose</span> <span class=\"token keyword\">with</span> abstract method moew</code></pre></div>\n<p><code class=\"language-text\">Goose</code> 클래스에 <code class=\"language-text\">voice</code>를 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Goose</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kwak\"</span><span class=\"token punctuation\">)</span>\n\ngoose <span class=\"token operator\">=</span> Goose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>goose<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> kwak</code></pre></div>\n<p>정상 동작을 확인 할 수 있다.</p>\n<p><code class=\"language-text\">make_noise</code>에 들어올 모든 클래스들은 <code class=\"language-text\">Animal</code>을 상속받도록 하고, <code class=\"language-text\">voice</code>를 구현하도록한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lion</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tiger</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Gorilla</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><code class=\"language-text\">make_noise</code> 에서  <code class=\"language-text\">x</code> 가 <code class=\"language-text\">Animal</code> 의 구체 클래스라면 <code class=\"language-text\">voice</code> 가 구현 되어 있는지에 대해서는 이제 걱정하지 않아도 된다. 이를 검증하는 빌트인메소드 <code class=\"language-text\">issubclass</code>를 파이썬에서 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\tx<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is not subclass of Animal\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Duck-typing 에서 보던 elif 블록들이 사라졌다.</p>\n<p>이처럼 추상클래스로 인터페이스를 구현하고 구상클래스들이 인터페이스를 따르도록 하는 것을 Goose-typing이라고 한다.</p>\n<p>우리는 아직 파이썬 런타임에서만 <code class=\"language-text\">make_noise</code>의 안정성을 검증할 수 있다. 소규모 프로젝트에서는 가능하다.</p>\n<p>대규모 파이썬 프로젝트의 아주 깊숙이 있는 코드에서 이런 런타임에러가 난다면 프로젝트를 안정하게 유지하는건 여전히 힘든일이 될 수 있다.</p>\n<h1 id=\"static-type-check\" style=\"position:relative;\"><a href=\"#static-type-check\" aria-label=\"static type check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Type Check</h1>\n<p>python 3.5 부터 추가된 type hints를 활용한다. <code class=\"language-text\">x</code>에 type annotation 으로 <code class=\"language-text\">Animal</code>을 추가한다.  <code class=\"language-text\">x</code>에 <code class=\"language-text\">Animal</code> 구상 클래스만 들어오도록 강제하지는 못한다. <code class=\"language-text\">issubclass</code> 를 통해서 구상클래스를 검증 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABC<span class=\"token punctuation\">,</span> abstractmethod\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NotImplementedError\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Goose</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kwak\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token builtin\">issubclass</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t    x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is not subclass of Animal\"</span><span class=\"token punctuation\">)</span>\n\ngoose <span class=\"token operator\">=</span> Goose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>goose<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> kwak</code></pre></div>\n<p><code class=\"language-text\">Animal</code> 의 서브클래스가 아닌것으로 <code class=\"language-text\">make_noise</code> 에 전달 할 경우,</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bark\"</span><span class=\"token punctuation\">)</span>\n\ndog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span></code></pre></div>\n<p>IDE 에서는 경고가 뜬다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Expected <span class=\"token builtin\">type</span> <span class=\"token string\">'Animal'</span><span class=\"token punctuation\">,</span> got <span class=\"token string\">'Goose'</span> instead</code></pre></div>\n<p>mypy를 실행하면 에러가 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">error<span class=\"token punctuation\">:</span> Argument <span class=\"token number\">1</span> to <span class=\"token string\">\"make_noise\"</span> has incompatible <span class=\"token builtin\">type</span> <span class=\"token string\">\"Goose\"</span><span class=\"token punctuation\">;</span> expected <span class=\"token string\">\"Animal\"</span></code></pre></div>\n<p>mypy, pyright 등의 type checker를 개발조직내에서 강제한다면, <code class=\"language-text\">issubclass</code> 없이도, type hints 만으로 프로그램의 안정성을 지킬 수 있게 된다.</p>\n<h1 id=\"static-duck-typing\" style=\"position:relative;\"><a href=\"#static-duck-typing\" aria-label=\"static duck typing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Duck-typing</h1>\n<p>ABC에 Type Annotation을 적용하면 완전해 지는가?</p>\n<p>PEP-544에 따르자면 아직은 그렇지 않다.</p>\n<blockquote>\n<p>PEP-484 에서 제안된 typing은  파이썬 일반 프로토콜인 <strong>len</strong>, <strong>iter</strong> 를 위한 추상 클래스(<code class=\"language-text\">Iterable</code> and <code class=\"language-text\">Sized</code>)들을  가지고 있습니다. 문제는 이 클래스를 상속하고 있음음 명시적으로 적어 줘야 한다는 것입니다. 이는 파이써닉 하지 않고,  관용 동적 타이핑 파이썬 코드와도 다릅니다. 사용자 정의 추상 클래스도 마찬가지 입니다. 라이브러리 타입과 할경우 타입이 어디 있는지 찾기 힘듭니다. 상속을 활용하기 위해서는 Base Class 되거나  가상클래스로 Base Class에 등록 되어야 합니다. 그리고 ABC 과도한 사용은 추가적인 자원을 소모 합니다.</p>\n<p><a href=\"https://peps.python.org/pep-0544/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">참조 PEP-544</a></p>\n</blockquote>\n<p>엄격한 type checker 에서 파생된 구조적 복잡성 문제를 해결하기 위해 PEP-544가 제안 되었다. 이는 Static Duck-typing 으로 부른다.</p>\n<p>PEP-544에서 제안되고, python 3.8에서 도입된 <code class=\"language-text\">Protocol</code> 은 메소드, 어트리뷰트 검증을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> Protocol<span class=\"token punctuation\">,</span> List\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Template</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>        <span class=\"token comment\"># This is a protocol member</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>   <span class=\"token comment\"># This one too (with default)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>temp<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># Error in type checker</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Concrete</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\nvar<span class=\"token punctuation\">:</span> Template <span class=\"token operator\">=</span> Concrete<span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># OK</span></code></pre></div>\n<p>ABC 처럼도 사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PColor</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@abstractmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">complex_method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># some complex code here</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NiceColor</span><span class=\"token punctuation\">(</span>PColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"deep blue\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BadColor</span><span class=\"token punctuation\">(</span>PColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>draw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Error, no default implementation</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ImplicitColor</span><span class=\"token punctuation\">:</span>   <span class=\"token comment\"># Note no 'PColor' base here</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"probably gray\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">complex_method</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># class needs to implement this</span>\n\nnice<span class=\"token punctuation\">:</span> NiceColor\nanother<span class=\"token punctuation\">:</span> ImplicitColor\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">represent</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">:</span> PColor<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>draw<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>complex_method<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nrepresent<span class=\"token punctuation\">(</span>nice<span class=\"token punctuation\">)</span> <span class=\"token comment\"># OK</span>\nrepresent<span class=\"token punctuation\">(</span>another<span class=\"token punctuation\">)</span> <span class=\"token comment\"># Also OK</span></code></pre></div>\n<p>PEP-544의 제안자는 다음과 같이 적었다.</p>\n<blockquote>\n<p>“Therefore, in this PEP we <em>do not propose</em>  to replace the nominal subtyping described by <a href=\"https://peps.python.org/pep-0484\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 484</a> with structural subtyping completely. Instead, protocol classes as specified in this PEP complement normal classes, and users are free to choose where to apply a particular solution.”</p>\n<p>PEP-484를 대체 하고자 제안 하는 것이 아니며, 일반 클래스의 보완물로서 유저는 어느 곳에 적용할 지 자유롭게 선택할 수 있게 한다.</p>\n</blockquote>\n<p><code class=\"language-text\">runtime_chekable</code>  데코레이터를 사용하면 <code class=\"language-text\">Procotol</code>이  <code class=\"language-text\">isinstance</code>, <code class=\"language-text\">issubclass</code> 를 지원한다. Protocol의 하위인지 검사가 아니라, method구현여부를 검증하기에 런타임에서도 검사할 수 있는 장치를 달 수 있다. 단 <code class=\"language-text\">method</code> ,  <code class=\"language-text\">attribute</code> 소유 여부만 조사하고, 실제 구현의 방식(parameter type annotation, return type annotation) 까지 검사하지는 못한다. 이는 static type checker로만 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> runtime_checkable<span class=\"token punctuation\">,</span> Union\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NoiseMaker</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">moew</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> master<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"moew </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>master<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NoiseMaker2</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">moew2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> master<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"moew </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>master<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@runtime_checkable</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NoiseMakerProtocol</span><span class=\"token punctuation\">(</span>NoiseMaker<span class=\"token punctuation\">,</span> NoiseMaker2<span class=\"token punctuation\">,</span> Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">moew1</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> master<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"moew\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">moew2</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> master1<span class=\"token punctuation\">:</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"moew </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>master1<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> No <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> No<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x<span class=\"token punctuation\">.</span>moew1<span class=\"token punctuation\">(</span><span class=\"token string\">'master'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span>\n\ncat <span class=\"token operator\">=</span> Cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> no</code></pre></div>\n<p>프로토콜 합성도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal2</span><span class=\"token punctuation\">(</span>Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># 주의: 합성 클래스에도 Protocol 이 들어가야함</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AnimalProtocol</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">,</span> Animal2<span class=\"token punctuation\">,</span> Protocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tiger</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Gorilla</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">voice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">motion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_noise</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span>AnimalProtocol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  x<span class=\"token punctuation\">.</span>voice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  x<span class=\"token punctuation\">.</span>shout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ntiger <span class=\"token operator\">=</span> Tiger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>tiger<span class=\"token punctuation\">)</span> <span class=\"token comment\"># OK</span>\n\ngorilla <span class=\"token operator\">=</span> Gorilla<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmake_noise<span class=\"token punctuation\">(</span>gorilla<span class=\"token punctuation\">)</span> <span class=\"token comment\"># ERROR</span></code></pre></div>\n<p>함수입장에서는 인터페이스가 강제된 특정 구상클래스로 구현하는것보다 파라미터가 유연해진 다.  명시적 타입 ( 추상 클래스 or 구상 클래스) 이 암묵적 타입 ( 동작 스코프내 필요한 어트리뷰트와 메소드 검증) 으로 바뀌기 때문이다.</p>\n<p>인터페이스를 프로토콜로 지정 해놓으면 상속을 받지 않은 작은 타입들로도 동작이 가능하다.</p>\n<p>추상 클래스에 집중되고 중앙화 되던 타입검증 책임이, 프로토콜들로 분산 된다.</p>\n<h1 id=\"항목별-비교표\" style=\"position:relative;\"><a href=\"#%ED%95%AD%EB%AA%A9%EB%B3%84-%EB%B9%84%EA%B5%90%ED%91%9C\" aria-label=\"항목별 비교표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>항목별 비교표</h1>\n<p>인터페이스 안정을 위한 방법들을 표로 정리해 본다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Duck-typing</th>\n<th>Goose-typing</th>\n<th>Static Type Check</th>\n<th>Static Duck-typing</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><br />runtime checkable<br /></td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr>\n<td><br />runtime check method<br /></td>\n<td><code class=\"language-text\">isinstance</code></td>\n<td><code class=\"language-text\">issubclass</code></td>\n<td><code class=\"language-text\">issubclass</code></td>\n<td><code class=\"language-text\">isinstance</code>, <code class=\"language-text\">issubclass</code>(<code class=\"language-text\">@runtime_checkable</code> 필요함)</td>\n</tr>\n<tr>\n<td><br />static checkable<br /></td>\n<td>X</td>\n<td>X</td>\n<td>O</td>\n<td>O</td>\n</tr>\n<tr>\n<td><br />static check way<br /></td>\n<td>X</td>\n<td>X</td>\n<td>Type annotation: Abstract Base Class</td>\n<td>type annotation: Protocol</td>\n</tr>\n<tr>\n<td><br />파라미터 타입 검증 가능<br /></td>\n<td>X</td>\n<td>X</td>\n<td><br />O <br />타입체커가 구상 메소드 타입 어노테이션 검증 런타임 체크(issubclass)는 추상 클래스만 확인</td>\n<td><br />O <br />타입체커가 메소드 타입 어노테이션도 검증 런타임 체크(isinstance)는 소유 여부만 확인가능</td>\n</tr>\n<tr>\n<td><br />인터페이스 집중<br /></td>\n<td>X</td>\n<td>O</td>\n<td>O</td>\n<td>X</td>\n</tr>\n<tr>\n<td><br />인터페이스 분산<br /></td>\n<td>O</td>\n<td>X <br />추상 메소드 구현필요</td>\n<td>X <br />추상 메소드 구현필요</td>\n<td>△ <br />구상 메소드 + 추상 프로토콜 작성 필요</td>\n</tr>\n<tr>\n<td><br />코드 난이도<br /></td>\n<td>하</td>\n<td>상</td>\n<td>상</td>\n<td>중</td>\n</tr>\n<tr>\n<td><br />메모리 효율성<br /></td>\n<td>상</td>\n<td>하</td>\n<td>하</td>\n<td>중</td>\n</tr>\n<tr>\n<td><br />구조 단순성<br /></td>\n<td>상</td>\n<td>하</td>\n<td>하</td>\n<td>중</td>\n</tr>\n<tr>\n<td><br />코드 안정성<br /></td>\n<td>하</td>\n<td>상</td>\n<td>상</td>\n<td>중</td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/posts/python-interface/","tagSlugs":["/tag/python/","/tag/interface/","/tag/protocol/"]},"frontmatter":{"date":"2022-11-27T01:23:45.678Z","description":"duck-typing 부터 Protocol 까지","tags":["python","interface","protocol"],"title":" 파이썬 인터페이스 정리하기"}}},"pageContext":{"slug":"/posts/python-interface/"}},"staticQueryHashes":["251939775","3613830147","401334301"]}