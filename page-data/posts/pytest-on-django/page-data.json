{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/pytest-on-django/","result":{"data":{"markdownRemark":{"id":"a3f405a4-b966-5f69-ab26-e0525d8159a7","html":"<h2 id=\"왜\" style=\"position:relative;\"><a href=\"#%EC%99%9C\" aria-label=\"왜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜?</h2>\n<p>django 에는 기본 테스트 모듈이 내재 되어 있다. 그런데 왜 pytest를 별도로 실행을 해야하는 걸까? </p>\n<ol>\n<li>\n<p>django 내장 test 는 Boiler Plate가 존재한다.</p>\n<ul>\n<li>모든 test set이 단일 클래스(django.test.TestCase)를 상속받아 운영된다. </li>\n<li>\n<p>실행이 순차적으로 진행이 되다 보니 규모가 커지다 보니 느려진다.</p>\n<ul>\n<li>pytest는 멀티 실행을 지원한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>코드 작성이 단순해진다.</p>\n<ul>\n<li>\n<p>Django</p>\n<ul>\n<li>모든 test가 class 상속으로 이루어진다. </li>\n<li>assert 를 각 class의 method로 평가해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>pytest</p>\n<ul>\n<li>function 단위로 test를 작성 할 수 있다.</li>\n<li>단순 assert로 test를 평가할 수 있다. </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Django 외 다른 Python project에도 도입이 가능하다.</li>\n<li>그 외 test config를 파일로 지정해 놓을 수 있고, fixture를 정해놓고 여러 곳에서, 원하는 순서에 맞추어 실행 시켜 볼 수 있다.</li>\n</ol>\n<h2 id=\"설치-및-기본-설정\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98-%EB%B0%8F-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\" aria-label=\"설치 및 기본 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치 및 기본 설정</h2>\n<h3 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> pytest-django</code></pre></div>\n<h3 id=\"기본-설정\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\" aria-label=\"기본 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 설정</h3>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token comment\"># pytest.ini Project root folder</span>\n<span class=\"token comment\"># 아래 설정을 잡아 주지 않을 경우, pytest 실행시 에러가 난다.</span>\n\n<span class=\"token selector\">[pytest]</span>\n<span class=\"token constant\">DJANGO_SETTINGS_MODULE</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> yourproject.settings</span></code></pre></div>\n<h3 id=\"실행\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89\" aria-label=\"실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pytest <span class=\"token operator\">&lt;</span>argument<span class=\"token operator\">></span> </code></pre></div>\n<h3 id=\"실행-옵션pytest-run-param\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%98%B5%EC%85%98pytest-run-param\" aria-label=\"실행 옵션pytest run param permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 옵션(pytest run param)</h3>\n<p>pytest.ini 에 지정을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token selector\">[pytest]</span>\n<span class=\"token constant\">addopts</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> --reuse-db\t</span></code></pre></div>\n<p>—db-reuse: 테스트 시작시 DB 를 만들고 삭제하는 작업을 하지 않는다. 소규모 테스트를 한다면 이게 더 중요하다.</p>\n<p>—create-db: 테스트 시작시 DB를 새로 만든다.(models 변경 사항을 반영 할 수 있다.)</p>\n<ul>\n<li>default로 —db-reuse 기본으로 해놓고 db schema 변경시에만 설정하는걸 공식 문서에서는 추천한다.</li>\n</ul>\n<p>—migration: model schema 변경이 있을 경우 migration을 진행한다. (django db 가 아닌 test db에)</p>\n<p>—no-migration: schema 변경을 무시한다.</p>\n<h2 id=\"markers\" style=\"position:relative;\"><a href=\"#markers\" aria-label=\"markers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Markers</h2>\n<p>테스트 함수나 클래스에 메타 데이터를 쉽게 설정할 수 있다.</p>\n<ul>\n<li>\n<p>pytest.marks.db_django</p>\n<ul>\n<li>db 연결이 필요할 경우 marks 를 활용한다. </li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>django_db</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_my_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tme <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'me'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">assert</span> me<span class=\"token punctuation\">.</span>is_superuser</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fixture\" style=\"position:relative;\"><a href=\"#fixture\" aria-label=\"fixture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixture</h2>\n<ul>\n<li>\n<p><code class=\"language-text\">rf</code>: django.utils.RequestFactory</p>\n<ul>\n<li>middleware를 거치지 않고 바로 view로 연결 되는 request를 만든다.</li>\n<li>이럴 경우, request.user가 없어서 별도로 부착을 해줘야 한다.</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> myapp<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> my_view\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_details</span><span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    request <span class=\"token operator\">=</span> rf<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/customer/details'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Remember that when using RequestFactory, the request does not pass</span>\n    <span class=\"token comment\"># through middleware. If your view expects fields such as request.user</span>\n    <span class=\"token comment\"># to be set, you need to set them explicitly.</span>\n    <span class=\"token comment\"># The following line sets request.user to an admin user.</span>\n    request<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> admin\n    response <span class=\"token operator\">=</span> my_view<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">client</code> : <a href=\"https://docs.djangoproject.com/en/dev/topics/testing/tools/#the-test-client\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">django.test.Client</code></a></li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">test_with_client</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>content <span class=\"token operator\">==</span> <span class=\"token string\">'Foobar'</span></code></pre></div>\n<h3 id=\"fixture-만들기-샘플\" style=\"position:relative;\"><a href=\"#fixture-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%83%98%ED%94%8C\" aria-label=\"fixture 만들기 샘플 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fixture 만들기 샘플</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># user 라는 fixtrue를 만들어 다른 곳에서 사용한다.</span>\n\n<span class=\"token keyword\">import</span> pytest\n\n<span class=\"token keyword\">from</span> model_bakery <span class=\"token keyword\">import</span> baker\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> baker<span class=\"token punctuation\">.</span>bake<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SiteAPIViewTestSuite</span><span class=\"token punctuation\">:</span>\n\t  <span class=\"token comment\"># 위에서 만든 user 라는 fixture를 사용한다. </span>\n    <span class=\"token comment\"># client는 pytest-django 내장 client를 지칭한다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_create_view</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> Site<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n\n        post_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Stackoverflow'</span>\n            <span class=\"token string\">'url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'http://stackoverflow.com'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n        response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>\n            reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'sites:create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>post_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            content_type<span class=\"token operator\">=</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n\n        data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">201</span>\n        <span class=\"token keyword\">assert</span> Site<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">assert</span> data <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'count'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'next'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'previous'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span>\n            <span class=\"token string\">'results'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Stackoverflow'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'http://stackoverflow.com'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'user_id'</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>","fields":{"slug":"/posts/pytest-on-django/","tagSlugs":["/tag/python/","/tag/test/","/tag/django/","/tag/pytest/"]},"frontmatter":{"date":"2021-03-27T13:23:45.678Z","description":"Django에서 Pytest 사용하기 위한 기초 정보 ","tags":["python","test","django","pytest"],"title":" Django에서 Pytest 사용하기"}}},"pageContext":{"slug":"/posts/pytest-on-django/"}}}