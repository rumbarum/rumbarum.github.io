{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/cors-trouble/","result":{"data":{"markdownRemark":{"id":"5125368c-2ee6-5ca4-a0e9-4b61505c8dcc","html":"<h3 id=\"prologue\" style=\"position:relative;\"><a href=\"#prologue\" aria-label=\"prologue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prologue:</h3>\n<ul>\n<li>\n<p>간만에 서버 만들어서 주소 포트 알려줬고 동작 테스트 시작</p>\n<ul>\n<li><del>네트워크 이슈</del> -> 네트워크 연결 </li>\n<li><del>http 이슈</del> -> nginx port fowarding</li>\n<li><del>cert Invaliid</del> -> <code class=\"language-text\">thisisunsafe</code></li>\n<li>\n<p>CORS 이슈?</p>\n<ul>\n<li>\n<p>flask 아예 처음 부터 세팅해서 올렸는데?</p>\n<ul>\n<li>flask? nginx? front? 돌고 돌다</li>\n<li>cors 무지함을 깨닫고 찬찬히 살펴봄</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cors\" style=\"position:relative;\"><a href=\"#cors\" aria-label=\"cors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS</h3>\n<ul>\n<li>\n<p>의미</p>\n<ul>\n<li><a href=\"https://ko.javascript.info/fetch-crossorigin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기를 읽어보면 히스토리부터 자세히 설명이 되어있다. </a></li>\n<li>\n<p>TLDR;</p>\n<blockquote>\n<p>도메인이나 서브도메인, 프로토콜, 포트가 다른 곳에 요청을 보내는 것을 Cross-Origin Request(크로스 오리진 요청)라고 합니다. 크로스 오리진 요청을 보내려면 리모트 오리진에서 전송받은 특별한 헤더가 필요합니다.</p>\n<p>이러한 정책을 ‘CORS(Cross-Origin Resource Sharing, 크로스 오리진 리소스 공유)‘라고 부릅니다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>해결찾아가는 과정</p>\n<ul>\n<li>\n<p>flask cors 설정에 뭔가 문제가 있었는지 다시 찾아봄.</p>\n<ul>\n<li><code class=\"language-text\">Access-Control-Allow-Origin</code> default 설정이 ”*” => pass</li>\n</ul>\n</li>\n<li>\n<p>nginx 설정이 뭔가 이상한가 다시 찾아봄.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">Access-Control-Allow-Origin</code>  ”*” 인데</p>\n<ul>\n<li><code class=\"language-text\">Access-Control-Allow-Origin</code> 을 프론트 주소로 변경</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Access-Control-Allow-Credential</code> true 로 바꾸고 나서 동작이 됨.</li>\n</ul>\n</li>\n<li>\n<p>flask cors 에서도 하는건데?</p>\n<ul>\n<li><code class=\"language-text\">Access-Control-Allow-Credential</code> 을 헤더에 넣을 경우, </li>\n<li><code class=\"language-text\">Access-Control-Allow-Origin</code> 에 ”*” 을 넣을 수 없음</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Access-Control-Allow-Credential</code> 헤더가 왜 필요한가? </p>\n<blockquote>\n<p>자바스크립트로 크로스 오리진 요청을 보내는 경우, 기본적으로 쿠키나 HTTP 인증 같은 자격 증명(credential)이 함께 전송되지 않습니다.</p>\n<p>HTTP 요청의 경우 대개 쿠키가 함께 전송되는데, 자바스크립트를 사용해 만든 크로스 오리진 요청은 예외이죠.</p>\n<p>따라서 <code class=\"language-text\">fetch(&#39;http://another.com&#39;)</code>를 사용해 요청을 보내도 <code class=\"language-text\">another.com</code> 관련 쿠키가 함께 전송되지 않습니다.</p>\n<p>왜 그럴까요?</p>\n<p>이런 예외가 생긴 이유는 자격 증명과 함께 전송되는 요청의 경우 영향력이 강하기 때문입니다. 크로스 오리진 요청 시 자격 증명을 함께 전송할 수 있으면 사용자 동의 없이 자바스크립트로 민감한 정보에 접근할 수 있게 됩니다.</p>\n<p>그럼에도 불구하고 서버에서 이를 허용하고 싶다면, 자격 증명이 담긴 헤더를 명시적으로 허용하겠다는 세팅을 서버에 해줘야 합니다.</p>\n<p><code class=\"language-text\">fetch</code> 메서드에 자격 증명 정보를 함께 전송하려면 다음과 같이 <code class=\"language-text\">credentials: &quot;include&quot;</code> 옵션을 추가하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://another.com'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  credentials<span class=\"token operator\">:</span> <span class=\"token string\">\"include\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 옵션을 추가하면 <code class=\"language-text\">fetch</code>로 요청을 보낼 때 <code class=\"language-text\">another.com</code>에 대응하는 쿠키가 함께 전송됩니다.</p>\n<p><em>자격 증명 정보가 담긴</em> 요청을 서버에서 받아들이기로 동의했다면 서버는 응답에 <code class=\"language-text\">Access-Control-Allow-Origin</code> 헤더와 함께 <code class=\"language-text\">Access-Control-Allow-Credentials: true</code> 헤더를 추가해서 보냅니다.</p>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\">200 OK\n<span class=\"token header-name keyword\">Access-Control-Allow-Origin:</span> https://javascript.info\n<span class=\"token header-name keyword\">Access-Control-Allow-Credentials:</span> true</code></pre></div>\n<p>자격 증명이 함께 전송되는 요청을 보낼 땐 <code class=\"language-text\">Access-Control-Allow-Origin</code>에 <code class=\"language-text\">*</code>을 쓸 수 없습니다. 위 예시에서처럼 <code class=\"language-text\">Access-Control-Allow-Origin</code>엔 정확한 오리진 정보만 명시되어야 합니다. 이런 제약이 있어야 어떤 오리진에서 요청이 왔는지에 대한 정보를 서버가 신뢰할 수 있기 때문입니다.</p>\n<p><a href=\"https://ko.javascript.info/fetch-crossorigin#ref-955\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.javascript.info/fetch-crossorigin#ref-955</a></p>\n</blockquote>\n<ul>\n<li>js fetch를 사용 한다면 credentials: “include” </li>\n<li>\n<p>XMLHttpRequest 객체를 사용한다면, <code class=\"language-text\">withCredential = true</code> 로 세팅해 놓았기 때문이다.</p>\n<ul>\n<li>쿠키기반 인증을 사용하게 된다면… token기반으로 변경이 필요해진다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h3 id=\"flask-cors-세팅-값-알아보기\" style=\"position:relative;\"><a href=\"#flask-cors-%EC%84%B8%ED%8C%85-%EA%B0%92-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"flask cors 세팅 값 알아보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>flask CORS 세팅 값 알아보기</h3>\n<ul>\n<li>\n<p>CORS<em>ALLOW</em>HEADERS: “*”</p>\n<ul>\n<li>CORS 요청 가능한 헤더</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>ALWAYS</em>SEND: True</p>\n<ul>\n<li>ORIGIN 헤더 없어도 Response 보냄</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>AUTOMATIC</em>OPTIONS: True</p>\n<ul>\n<li>flask default option handling 덮어씀</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>EXPOSE</em>HEADERS: None</p>\n<ul>\n<li><code class=\"language-text\">Access-Control-Expose-Headers</code> 에 들어갈 것들 설정</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>INTERCEPT</em>EXCEPTIONS: True</p>\n<ul>\n<li>flask 에러 핸들러 쓸지 말지</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>MAX</em>AGE: None</p>\n<ul>\n<li>cors request cached duration</li>\n</ul>\n</li>\n<li>\n<p>CORS_METHODS: [”<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GET</a>”, “<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HEAD</a>”, “<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">POST</a>”, “<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OPTIONS</a>”, “<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PUT</a>”, “<a href=\"https://tools.ietf.org/html/rfc5789#section-2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PATCH</a>”, “<a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">DELETE</a>”]</p>\n<ul>\n<li>cors 요청 가능한 http method</li>\n</ul>\n</li>\n<li>\n<p>CORS_ORIGINS: “*”</p>\n<ul>\n<li>cors 요청 가능한 주소, * 이면 모든 요청, 특정 url로 고정되면 해당 url만</li>\n</ul>\n</li>\n<li>\n<p>CORS_RESOURCES: r”/*”</p>\n<ul>\n<li>cors 적용되는 resource path 등록</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>SEND</em>WILDCARD: False</p>\n<ul>\n<li>true 이고, CORS<em>ALLOW</em>HEADERS가 * 이라면 *</li>\n<li>false 이고, CORS<em>ALLOW</em>HEADERS가 * 이라면 Requests의 Origin을 보냄</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>SUPPORTS</em>CREDENTIALS: False</p>\n<ul>\n<li><a href=\"http://www.w3.org/TR/cors/#access-control-allow-credentials-response-header\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Access-Control-Allow-Credentials</a>  을 Response Header 에 삽입</li>\n<li>\n<p>상충하는 옵션</p>\n<ul>\n<li>CORS<em>SUPPORTS</em>CREDENTIALS</li>\n<li>CORS<em>ALLOW</em>HEADERS</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>CORS<em>VARY</em>HEADER: True</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vary</a> response header is set to <code class=\"language-text\">Origin</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"해결법\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B2%95\" aria-label=\"해결법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결법</h3>\n<ul>\n<li>\n<ol>\n<li>프론트에게 credential을 꺼달라고 한다. </li>\n<li>\n<p>flask cors 에서 </p>\n<ol>\n<li>CORS<em>ALLOW</em>HEADERS = “프론트 주소”</li>\n<li>CORS<em>SUPPORTS</em>CREDENTIALS = True</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"배운것\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%9A%B4%EA%B2%83\" aria-label=\"배운것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배운것</h3>\n<ul>\n<li>문제 진단을 제대로 해야한다.</li>\n<li>개념은 잘 알고 넘어가야 한다.</li>\n</ul>","fields":{"slug":"/posts/cors-trouble/","tagSlugs":["/tag/cors/","/tag/debugging/","/tag//"]},"frontmatter":{"date":"2022-10-16T01:23:45.678Z","description":"???: 서버에서 CORS 처리 해주셔야....","tags":["CORS","debugging",""],"title":"CORS 복습하기"}}},"pageContext":{"slug":"/posts/cors-trouble/"}},"staticQueryHashes":["251939775","3613830147","401334301"]}