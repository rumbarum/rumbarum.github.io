{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/understand-F-class-on-django/","webpackCompilationHash":"422757ed827c7cec9960","result":{"data":{"markdownRemark":{"id":"05aae913-ee77-5a98-bb97-9df6f24cdb73","html":"<h2 style=\"color:rgb(9, 136, 104)\"> </h2>\n<h2 id=\"situation\"><a href=\"#situation\" aria-label=\"situation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Situation:</h2>\n<p> Django 와 별도의 python module: Sender을 동작하고 있다. Sender는 request count DB 에 쌓인 요청이 80개 미만이면 외부서버에 (동시 처리가능 80개) 요청을 보내고 request count DB에 +1 한다. 80개 이상이면 대기하다가 요청을 보내고 count +1을 한다.  외부서버는 요청을 처리하여  Django Was 에 Http Post로 보낸다. Django는 요청을 받으면 처리값을 테이블에 저장하고 count -1을 한다. </p>\n<h2 id=\"problem\"><a href=\"#problem\" aria-label=\"problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem:</h2>\n<p> 프로세스가 종료되고 난 뒤에 request count DB 의 counter는 0 이 되어야 하는게 맞는데 끝나고 난뒤에 살펴보면 1이나 2 또는 5가 되어있는 경우도 있다. python module의 request의 텀이 더 빨라질수록 숫자도 커졌다.  요청도 제대로 되고, 다른 것도 다 정상인데 무엇이 문제일까? </p>\n<h2 id=\"reason\"><a href=\"#reason\" aria-label=\"reason permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reason:</h2>\n<p>count를 저장하는 과정에서 문제가 생겼기 때문이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#기존 저장하는 코드</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">#... 요청 처리 ... </span>\n  \n  <span class=\"token comment\">#counter + </span>\n  counter <span class=\"token operator\">=</span> Count<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  counter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n  counter<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">return</span> Httpresponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token string\">'200'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>처음에는 이렇게 작성을 했다. 별 문제가 없어 보인다고 생각했으나 문제가 있었다. </p>\n<h3 id=\"예상하는-과정\"><a href=\"#%EC%98%88%EC%83%81%ED%95%98%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"예상하는 과정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예상하는 과정</h3>\n<ol>\n<li>Sender 가 요청을 보내 count가 40이다. </li>\n<li>Django는 40을 DB에서 불러와서 Python 메모리에 들고 있는다.</li>\n<li>40에 1을 더한다.</li>\n<li>Django가 DB에 41을 저장한다. </li>\n</ol>\n<p>Sender가 요청을 보내지 않고 있다면 문제는 없을 것이다. 하지만 Sender는 80개가 넘지 않으면 요청을 계속 보내고 있는 상황이다. </p>\n<h3 id=\"실제-과정\"><a href=\"#%EC%8B%A4%EC%A0%9C-%EA%B3%BC%EC%A0%95\" aria-label=\"실제 과정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실제 과정</h3>\n<ol>\n<li>Sender 가 요청을 보내 count가 40이다. </li>\n<li>Django는 40을 DB에서 불러와서 Python 메모리에 들고 있는다.</li>\n<li>40에 1을 더한다.</li>\n<li>Sender 가 요청을 보내 count가 41이다.</li>\n<li>Django가 DB에 41을 저장한다. </li>\n<li>count 1이 누락된다. </li>\n</ol>\n<p>값을 불러와서 값을 처리하고 처리된 값을 다시 넣으니 문제가 생기는 것이다. 그럼 Sender는 문제 없는건가?</p>\n<p>Sender는 DB에 +1을 하라고 요청을 하고 있어서(Update +1 ) 이에 해당하지 않는다. </p>\n<h2 id=\"solution\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution:</h2>\n<p>그럼 어떻게??? 이런 난감함을 해결하고자 Django에는 F class가 있다. </p>\n<blockquote>\n<p>F() 객체는 모델의 필드 혹은 어노테이트된 열의 값을 나타낸다. 실제로 데이터베이스에서 Python 메모리로 가져오지 않고, 모델 필드 값을 참조하고 이를 데이터베이스에서 사용하여 작업할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reporter <span class=\"token operator\">=</span> Reporters<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Tintin'</span><span class=\"token punctuation\">)</span>\nreporter<span class=\"token punctuation\">.</span>stories_filed <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\nreporter<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>요렇게 되어있던 코드를</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> F\n\nreporter <span class=\"token operator\">=</span> Reporters<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'Tintin'</span><span class=\"token punctuation\">)</span>\nreporter<span class=\"token punctuation\">.</span>stories_filed <span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span><span class=\"token string\">'stories_filed'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\nreporter<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 해주면 파이썬을 거치지 않고 DB 에서  stories_filed에 바로 +1을 해준다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#고친 저장하는 코드</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">#... 요청 처리 ... </span>\n  \n  <span class=\"token comment\">#counter + </span>\n  counter <span class=\"token operator\">=</span> Count<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  counter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  counter<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">return</span> Httpresponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token string\">'200'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#or queryset의 update를 사용할수도 있다. *get이 아닌 filter를 사용함에 주의주의주의</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">#... 요청 처리 ... </span>\n  \n  <span class=\"token comment\">#counter + </span>\n  counter <span class=\"token operator\">=</span> Count<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  counter<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>count<span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n  \n  <span class=\"token keyword\">return</span> Httpresponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token string\">'200'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"caution\"><a href=\"#caution\" aria-label=\"caution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caution:</h2>\n<p>위의 작업은 전적으로 데이터베이스에서 처리하므로, Python에서는 <code class=\"language-text\">counter.count</code>에 대해 알 수 없다.</p>\n<p>따라서 위의 작업으로 저장된 새로운 값을 사용하려면 반드시 아래 코드처럼 다시 불러와야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Wrong case</span>\n  counter <span class=\"token operator\">=</span> Count<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1번 print:\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n  counter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  counter<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2번 print:\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n  \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>번 <span class=\"token keyword\">print</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  \t<span class=\"token number\">2</span>번 <span class=\"token keyword\">print</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n\n<span class=\"token comment\"># Correct case</span>\n  counter <span class=\"token operator\">=</span> Count<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1번 print:\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n  counter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \n  counter<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  \n  couter<span class=\"token punctuation\">.</span>refresh_from_db<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2번 print:\"</span><span class=\"token punctuation\">,</span>counter<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n  \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>번 <span class=\"token keyword\">print</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n  \t<span class=\"token number\">2</span>번 <span class=\"token keyword\">print</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span>\n      </code></pre></div>","fields":{"slug":"/posts/understand-F-class-on-django/","tagSlugs":["/tag/django/","/tag/database/","/tag/wecode/"]},"frontmatter":{"date":"2020-06-14T11:23:45.678Z","description":"Django로 DB 관리하다 보면 쓸일이 생긴다 반드시... ","tags":["Django","database","wecode"],"title":" Django F class 알아보자"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/understand-F-class-on-django/"}}}