{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/19-08-06_python/","result":{"data":{"markdownRemark":{"id":"385d0ed3-e6d6-5a95-8d8c-37a6c88d04de","html":"<ul>\n<li>\n<h3 id=\"class\" style=\"position:relative;\"><a href=\"#class\" aria-label=\"class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class</h3>\n<ul>\n<li>공통적인 개념으로 묶이는, 추상적 대상</li>\n<li>object</li>\n<li>실체가 있는 구체적인 대상</li>\n<li>Class 정의 하기</li>\n<li>class 이름은 각 단어의 앞글자를 대문자로 사용합니다.</li>\n<li>한단어 이상으로 이루어져 있다면 밑줄(underscore) 없이 모든 단어를 다 붙인다.</li>\n<li>Class의 attribute(속성)</li>\n<li>class에 정의되는 공통 요소</li>\n<li>class 안에서 정의해주는 함수(function)는 function이라고 하지 않고 method 라고 합니다)</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> maker<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> horse_power<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    self<span class=\"token punctuation\">.</span>maker <span class=\"token operator\">=</span> maker \n    self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model \n    self<span class=\"token punctuation\">.</span>horse_power <span class=\"token operator\">=</span> horse_power</code></pre></div>\n</li>\n<li>Class Method</li>\n<li>객체가 행할 수 있는 행동</li>\n<li>메소드를 사용할때는 dot(.) 을 사용하여 객체를 호출</li>\n<li>&#x3C;객체>.&#x3C;메소드></li>\n<li>\n<p>메소드 정의</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">:</span> \n<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> maker<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> horse_power<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  self<span class=\"token punctuation\">.</span>maker <span class=\"token operator\">=</span> maker \n  self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model \n  self<span class=\"token punctuation\">.</span>horse_power <span class=\"token operator\">=</span> horse_power \n  \n<span class=\"token keyword\">def</span> <span class=\"token function\">honk</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>maker<span class=\"token punctuation\">}</span></span><span class=\"token string\"> 빠라바라빠라밤\"</span></span>\n\nhyundai <span class=\"token operator\">=</span> Car<span class=\"token punctuation\">(</span><span class=\"token string\">\"현대\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"제네시스\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\nhyundai<span class=\"token punctuation\">.</span>honk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"현대 빠라바라빠라밤\"</span></code></pre></div>\n</li>\n<li>Modules</li>\n<li>모듈은 변수나 함수 그리고 클래스 등을 모아놓은 파일 (라이브러리?)</li>\n<li>다른 파일에서 재사용이 가능</li>\n<li>전체 코드가 한 파일에 넣기에는 너무 커졌을때 여러 파일로 나누어서 정리</li>\n<li>\n<p>Module 만들기</p>\n<ul>\n<li>파일을 만든후 그 안에 재사용 하고 싶은 함수나 클래스 혹은 변수등을 구현</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## my_module.py</span>\nmy_module_var <span class=\"token operator\">=</span> <span class=\"token number\">7</span></code></pre></div>\n</li>\n</ul>\n<p>def my<em>module</em>func():\nreturn “Hello!“class MyModuleClass: pass</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>\n<p>import my_module</p>\n<ul>\n<li>모듈 전체 import</li>\n<li>파일 확장자인 “.py” 는 제외하고 파일 이름만 사용</li>\n<li>사용하기</li>\n<li>&#x3C;모듈 이름>.&#x3C;모듈에서 사용하길 원하는 변수/함수/클래스 이름></li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">## main.py</span>\n<span class=\"token keyword\">import</span> my_module</code></pre></div>\n</li>\n</ul>\n<p>print(my<em>module.my</em>module_var)</p>\n<p>my<em>module.my</em>module_func()</p>\n<p>my<em>module</em>class = my_module.MyModuleClass()</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n<li>\n<p>Alternative ways to import modules</p>\n<ul>\n<li>모듈의 일부분 import</li>\n<li>from &#x3C;모듈 이름> import &#x3C;함수/변수/클래스1>, &#x3C;함수/변수/클래스2>, …, &#x3C;함수/변수/클래스N></li>\n<li>이렇게 가져온 다음에 모듈이름을 앞에 붙이지 않아도 바로 처리가 가능하다.</li>\n<li>모듈에서 사용하는 것이 명확할때 from import 를 사용하면 편리</li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> my_module <span class=\"token keyword\">import</span> my_module_func<span class=\"token punctuation\">,</span> my_module_var\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_module_var<span class=\"token punctuation\">)</span>my_module_func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Import As</p>\n<ul>\n<li>import 해온 정보의 이름을 사용하기 편하게 바꾼다.</li>\n<li>이름의 중복 이나 긴 이름을 방지한다.</li>\n</ul>\n</li>\n<li>Packages</li>\n<li>파일에 나누어져 있는 코드들도 다른 곳에서 하나의 module로 불러와서 사용할 수 있도록 해주는것</li>\n<li>파이썬 파일들로 이루어져 있는 디렉토리(directory)가 하나의 package</li>\n<li>Package Initialization</li>\n<li><a href=\"http://init.py/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">init.py</a>파일을 통해 package 초기 설정을 가능하게함</li>\n<li>\n<p>Import 할때 경로의 총 길이 줄여주기</p>\n<ul>\n<li><a href=\"http://init.py/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">init.py</a>파일에 먼저 한번 import 후 .py 에서 import</li>\n</ul>\n<p>init</p>\n</li>\n<li>\n<p>Package에서 import 할 수 있는 변수/함수/클래스 제한하기</p>\n<ul>\n<li>package를 통해 import 될 수 있는 요소들은 모두 변수를 통해 정의</li>\n</ul>\n<p>all</p>\n<ul>\n<li>all 변수는 string 값의 요소를 가지고 있는 list</li>\n<li>all 변수의 default 값은 모든 함수/변수/클래스</li>\n<li>all 변수를 따로 정의해줌으로 import 될 수 있는 요소들을 제한</li>\n</ul>\n</li>\n<li>그 외 package가 import될때 꼭 먼저 실행되어야 하는 코드들을 설정해 놓는다.</li>\n<li>다른 사람의 package 사용</li>\n<li>\n<p>PIP는 파이썬의 package manager</p>\n<ul>\n<li>pip install Django ( 컴온 장고!)</li>\n</ul>\n</li>\n<li>How import statement finds modules and packages</li>\n<li>\n<p>Import Search 순서</p>\n<ul>\n<li>sys.module</li>\n<li>import된 모듈과 package들을 저장</li>\n<li>단순한 dictionary</li>\n<li>새로 import 하는 모듈은 sys.modules 에서 찾을 수 없다.</li>\n<li>built-in modules</li>\n<li>파이썬 공식 라이브러리들</li>\n<li>이미 포함되어 있어서 찾기 쉽다.</li>\n<li>sys.path</li>\n<li>\n<p>string 요소들을 가지고 있는 list </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/anaconda3/bin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/anaconda3/lib/python36.zip'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/anaconda3/lib/python3.6'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/anaconda3/lib/python3.6/lib-dynload'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/anaconda3/lib/python3.6/site-packages'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/anaconda3/lib/python3.6/site-packages/aeosa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/anaconda3/lib/python3.6/site-packages/IPython/extensions'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/Users/song-eun-u/.ipython'</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>Absolute Path &#x26; Relative Path</li>\n<li>\n<p>Absolute path</p>\n<ul>\n<li>최상위 폴더를 기준으로 탐색</li>\n<li>어느 파일, 어느 위치에서 import 하던지 경로가 항상 위와 같이 동일하게 된다.</li>\n<li>경로가 길어지는 경우가 생길 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>relativev path</p>\n<ul>\n<li>현재 위치를 기준으로 탐색</li>\n<li>헷갈리기 쉽고 파일 위치가 변경되면 경로 위치도 변경되어야 하는 단점이 있습니다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Exceptions</p>\n<ul>\n<li>에러 발생시 예외처리 정하기 </li>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">somefunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \ntrial <span class=\"token punctuation\">:</span> \n  <span class=\"token operator\">&lt;</span>실행코드<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>실행코드에 에러가 없으면 진행되는 코드<span class=\"token operator\">></span> \n  \nexception ErrorName <span class=\"token punctuation\">:</span>\n  <span class=\"token operator\">&lt;</span>실행코드 진행중 ErrorName 에러 발생시 실행코드<span class=\"token operator\">></span> \n\nanotherException anotherErrorName <span class=\"token punctuation\">:</span> <span class=\"token comment\">#(optional)</span>\n   <span class=\"token operator\">&lt;</span>anotherErrorName 에러 발생시 실행코드<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span> <span class=\"token comment\">#(optional)</span>\n   <span class=\"token operator\">&lt;</span>ErrorName<span class=\"token punctuation\">,</span> anotherErrorName 외의 에러 발생시 실행코드<span class=\"token operator\">></span> \n  \n<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">:</span> \n  <span class=\"token operator\">&lt;</span>에러 발생 여부와 상관없이 최종적으로 실행되는 코드<span class=\"token operator\">></span> <span class=\"token comment\">#(optional)</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/19-08-06_python/","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2019-08-06T01:23:45.678Z","description":"야생의 바름은(는) 파이썬의 Class,Module,Exception과 조우했다. ","tags":["Python"],"title":"Python -Class, Module, Exception "}}},"pageContext":{"slug":"/posts/19-08-06_python/"}}}