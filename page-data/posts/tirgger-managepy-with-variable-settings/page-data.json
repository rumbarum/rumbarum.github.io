{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/tirgger-managepy-with-variable-settings/","result":{"data":{"markdownRemark":{"id":"975a56d0-bd87-5108-869f-3c62a2491e80","html":"<p><a href=\"https://rumbarum.github.io/posts/seperate-django-settings/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">앞글</a>에서 django로 개발할 환경들(product.py, develop.py, local.py )을 세팅해 놨는데, 실행을 위해선 manage.py를 변경해 주어야 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#beautiful_awosome_project/manage.py </span>\n\n<span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token triple-quoted-string string\">\"\"\"Django's command-line utility for administrative tasks.\"\"\"</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'DJANGO_SETTINGS_MODULE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'beautiful_awosome_project.settings.local'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#settings 밑에 하위 파일들을 만들어 놓았기 때문에, </span>\n    <span class=\"token comment\">#실행을 원하는 세팅을 명시해놔야한다. 여기서는 local로 설정</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>management <span class=\"token keyword\">import</span> execute_from_command_line\n    <span class=\"token keyword\">except</span> ImportError <span class=\"token keyword\">as</span> exc<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ImportError<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Couldn't import Django. Are you sure it's installed and \"</span>\n            <span class=\"token string\">\"available on your PYTHONPATH environment variable? Did you \"</span>\n            <span class=\"token string\">\"forget to activate a virtual environment?\"</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> exc\n    execute_from_command_line<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 설정을 해놓으면 </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token variable\">$python</span> manage.py <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span></code></pre></div>\n<p>실행시  <code class=\"language-text\">local.py</code> setting 값으로 command가 실행된다.</p>\n<p>이렇게 해놓으면 환경을 바꿔서 실행할 경우마다 manage.py를 변경하고 실행해야하므로 번거로워 진다. </p>\n<p>그래서 manage.py를 살짝 손봐 세팅환경 변경을 쉽게 해보도록 하겠다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token triple-quoted-string string\">\"\"\"Django's command-line utility for administrative tasks.\"\"\"</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'production'</span> <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'DJANGO_SETTINGS_MODULE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'project.settings.production'</span><span class=\"token punctuation\">)</span>\n        sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token string\">'develop'</span> <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'DJANGO_SETTINGS_MODULE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'project.settings.develop'</span><span class=\"token punctuation\">)</span>\n        sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token string\">'develop'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">'DJANGO_SETTINGS_MODULE'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'project.settings.local'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>management <span class=\"token keyword\">import</span> execute_from_command_line\n    <span class=\"token keyword\">except</span> ImportError <span class=\"token keyword\">as</span> exc<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ImportError<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Couldn't import Django. Are you sure it's installed and \"</span>\n            <span class=\"token string\">\"available on your PYTHONPATH environment variable? Did you \"</span>\n            <span class=\"token string\">\"forget to activate a virtual environment?\"</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> exc\n    execute_from_command_line<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>sys.argv 는  <code class=\"language-text\">$python</code>으로 실행시 입력된 값들을 담은 커맨드 실행 명령 인자 <code class=\"language-text\">list</code> 입니다. </p>\n<p>​\targv[0]은 실행 파일(<code class=\"language-text\">manage.py</code>)이 됩니다. </p>\n<p>원래 있던 파일에 제가 설정한 키워드가 들어가면 그 키워드에 맞추어 실행환경을 세팅합니다. 아무 키워드도 입력하지 않으면 local을 기본 환경으로 동작합니다. 키워드가 남아있으면 manage.py 동작에 방해가 될것 같아 환경을 지정하고 다시 sys.argv에서 삭제를 합니다.</p>\n<p>이렇게 해놓으면 아래처럼 변수 하나로 python 실행 환경을 자유롭게 이동 하실 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token variable\">$python</span> manage.py\tdevelop runserver\n<span class=\"token comment\">#develop 환경으로 runserver</span>\n\n<span class=\"token variable\">$python</span> manage.py\tproduct migrate\n<span class=\"token comment\">#product 환경으로 migrate</span>\n\n<span class=\"token variable\">$python</span> manage.py shell\n<span class=\"token comment\">#develop 환경으로 shell 접속</span></code></pre></div>\n<p>주의사항  </p>\n<ol>\n<li>인자를 확인하고 다시 제거 하기 때문에 환경키워드를 아무 위치에나 두어도 동작은 합니다. django 명령어의 순서는 바꾸면 안됩니다. </li>\n<li>환경 키워드를 장고 명령어와 동일한 것으로 사용시 꼬여서 에러가 발생할 수 있으니 겹치지 않는 키워드를 사용해 주세요.</li>\n</ol>","fields":{"slug":"/posts/tirgger-managepy-with-variable-settings/","tagSlugs":["/tag/django/","/tag/python/"]},"frontmatter":{"date":"2020-05-17T01:23:45.678Z","description":"테스트 서버 환경 변경을 쉽게 해보자! ","tags":["Django","Python"],"title":" manage.py 실행환경 쉽게 설정하기"}}},"pageContext":{"slug":"/posts/tirgger-managepy-with-variable-settings/"}}}